
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Feb 17 20:51:55 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoListas;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Feb 17 20:51:55 CET 2024
  */
public class AnalizadorSintacticoListas extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoListas() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoListas(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoListas(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\005\000\002\002\004\000\002\002" +
    "\006\000\002\002\002\000\002\003\005\000\002\004\003" +
    "\000\002\004\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\007\005\000\002\010" +
    "\006\000\002\010\006\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\010\002\ufffe\004\004\010\006\001\002\000" +
    "\010\005\016\006\015\007\011\001\002\000\004\002\057" +
    "\001\002\000\004\030\007\001\002\000\010\005\016\006" +
    "\015\007\011\001\002\000\020\002\ufffb\004\ufffb\010\ufffb" +
    "\023\ufffb\025\ufffb\027\ufffb\031\ufffb\001\002\000\012\013" +
    "\043\014\044\015\047\016\045\001\002\000\020\002\ufffc" +
    "\004\ufffc\010\ufffc\023\ufffc\025\ufffc\027\ufffc\031\ufffc\001" +
    "\002\000\004\023\053\001\002\000\010\002\ufffe\004\004" +
    "\010\006\001\002\000\012\013\043\014\044\015\047\016" +
    "\045\001\002\000\012\017\022\020\023\021\021\022\020" +
    "\001\002\000\004\011\024\001\002\000\004\011\uffe9\001" +
    "\002\000\004\011\uffea\001\002\000\004\011\uffec\001\002" +
    "\000\004\011\uffeb\001\002\000\010\010\030\024\027\026" +
    "\025\001\002\000\012\005\016\006\015\007\011\011\033" +
    "\001\002\000\020\002\ufff2\004\ufff2\010\ufff2\023\ufff2\025" +
    "\ufff2\027\ufff2\031\ufff2\001\002\000\010\005\016\006\015" +
    "\007\011\001\002\000\020\002\ufffa\004\ufffa\010\ufffa\023" +
    "\ufffa\025\ufffa\027\ufffa\031\ufffa\001\002\000\004\025\032" +
    "\001\002\000\020\002\ufff8\004\ufff8\010\ufff8\023\ufff8\025" +
    "\ufff8\027\ufff8\031\ufff8\001\002\000\006\027\ufff5\031\041" +
    "\001\002\000\004\027\040\001\002\000\006\027\ufff4\031" +
    "\036\001\002\000\012\005\016\006\015\007\011\011\033" +
    "\001\002\000\004\027\ufff6\001\002\000\020\002\ufff9\004" +
    "\ufff9\010\ufff9\023\ufff9\025\ufff9\027\ufff9\031\ufff9\001\002" +
    "\000\012\005\016\006\015\007\011\011\033\001\002\000" +
    "\004\027\ufff7\001\002\000\012\010\ufff0\011\ufff0\024\ufff0" +
    "\026\ufff0\001\002\000\012\010\uffef\011\uffef\024\uffef\026" +
    "\uffef\001\002\000\012\010\uffed\011\uffed\024\uffed\026\uffed" +
    "\001\002\000\004\011\050\001\002\000\012\010\uffee\011" +
    "\uffee\024\uffee\026\uffee\001\002\000\010\010\030\024\027" +
    "\026\025\001\002\000\020\002\ufff1\004\ufff1\010\ufff1\023" +
    "\ufff1\025\ufff1\027\ufff1\031\ufff1\001\002\000\004\002\uffff" +
    "\001\002\000\010\005\016\006\015\007\011\001\002\000" +
    "\016\002\ufffd\004\ufffd\010\ufffd\025\ufffd\027\ufffd\031\ufffd" +
    "\001\002\000\010\010\030\024\027\026\025\001\002\000" +
    "\020\002\ufff3\004\ufff3\010\ufff3\023\ufff3\025\ufff3\027\ufff3" +
    "\031\ufff3\001\002\000\004\002\000\001\002\000\010\002" +
    "\ufffe\004\004\010\006\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\004\002\004\001\001\000\012\003\057\004" +
    "\012\007\011\010\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\013\004\012\007\011\010\007\001" +
    "\001\000\002\001\001\000\004\011\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\051\001\001\000" +
    "\004\011\045\001\001\000\004\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\025\001\001\000\014" +
    "\003\034\004\012\006\033\007\011\010\007\001\001\000" +
    "\002\001\001\000\012\003\030\004\012\007\011\010\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\034\004\012\006\036\007\011\010\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\034" +
    "\004\012\006\041\007\011\010\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\053" +
    "\007\011\010\007\001\001\000\002\001\001\000\004\005" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\060\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoListas$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoListas$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoListas$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoListas alex = (AnalizadorLexicoListas)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoListas$actions {
  private final AnalizadorSintacticoListas parser;

  /** Constructor */
  CUP$AnalizadorSintacticoListas$actions(AnalizadorSintacticoListas parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoListas$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoListas$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoListas$parser,
    java.util.Stack            CUP$AnalizadorSintacticoListas$stack,
    int                        CUP$AnalizadorSintacticoListas$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoListas$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoListas$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= PRINT L0 S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoListas$stack.elementAt(CUP$AnalizadorSintacticoListas$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoListas$parser.done_parsing();
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= IDEN ASIGNACION L0 S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L0 ::= L1 CONCATENACION L1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("L0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L1 ::= FUNC2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("L1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L1 ::= FUNC3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("L1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("L2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L2 ::= CAP CORC CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("L2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L2 ::= PAP L0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("L2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CORC ::= ENT COMA CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CORC ::= L0 COMA CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CORC ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CORC ::= L0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNC2 ::= LREDUCE OPAR L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("FUNC2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNC3 ::= LFILTER OPREL ENT L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("FUNC3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNC3 ::= LMAP OPAR ENT L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("FUNC3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPAR ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("OPAR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPAR ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("OPAR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPAR ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("OPAR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPAR ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("OPAR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPREL ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("OPREL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPREL ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("OPREL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPREL ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("OPREL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPREL ::= DESIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoListas$result = parser.getSymbolFactory().newSymbol("OPREL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoListas$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoListas$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoListas$do_action(
    int                        CUP$AnalizadorSintacticoListas$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoListas$parser,
    java.util.Stack            CUP$AnalizadorSintacticoListas$stack,
    int                        CUP$AnalizadorSintacticoListas$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoListas$do_action_part00000000(
                               CUP$AnalizadorSintacticoListas$act_num,
                               CUP$AnalizadorSintacticoListas$parser,
                               CUP$AnalizadorSintacticoListas$stack,
                               CUP$AnalizadorSintacticoListas$top);
    }
}

