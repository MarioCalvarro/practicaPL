
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Feb 19 16:21:08 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoLista;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Feb 19 16:21:08 CET 2024
  */
public class AnalizadorSintacticoLista extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoLista() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoLista(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoLista(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\005\000\002\002\004\000\002\002" +
    "\006\000\002\002\002\000\002\003\005\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\005\005\000\002\005\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\002\000\002\007\005\000\002\010\006" +
    "\000\002\010\006\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\010\002\ufffe\004\004\010\006\001\002\000" +
    "\016\005\012\006\022\007\021\010\014\024\013\026\020" +
    "\001\002\000\004\002\060\001\002\000\004\030\007\001" +
    "\002\000\016\005\012\006\022\007\021\010\014\024\013" +
    "\026\020\001\002\000\020\002\ufffa\004\ufffa\010\ufffa\023" +
    "\ufffa\025\ufffa\027\ufffa\031\ufffa\001\002\000\020\002\ufffb" +
    "\004\ufffb\010\ufffb\023\ufffb\025\ufffb\027\ufffb\031\ufffb\001" +
    "\002\000\012\017\054\020\055\021\053\022\052\001\002" +
    "\000\016\005\012\006\022\007\021\010\014\024\013\026" +
    "\020\001\002\000\020\002\ufff8\004\ufff8\010\ufff8\023\ufff8" +
    "\025\ufff8\027\ufff8\031\ufff8\001\002\000\020\002\ufff9\004" +
    "\ufff9\010\ufff9\023\ufff9\025\ufff9\027\ufff9\031\ufff9\001\002" +
    "\000\020\002\ufffc\004\ufffc\010\ufffc\023\ufffc\025\ufffc\027" +
    "\ufffc\031\ufffc\001\002\000\012\002\ufffe\004\004\010\006" +
    "\023\040\001\002\000\022\005\012\006\022\007\021\010" +
    "\014\011\034\024\013\026\020\027\ufff1\001\002\000\012" +
    "\013\023\014\024\015\027\016\026\001\002\000\012\013" +
    "\023\014\024\015\027\016\026\001\002\000\012\010\uffed" +
    "\011\uffed\024\uffed\026\uffed\001\002\000\012\010\uffec\011" +
    "\uffec\024\uffec\026\uffec\001\002\000\004\011\030\001\002" +
    "\000\012\010\uffea\011\uffea\024\uffea\026\uffea\001\002\000" +
    "\012\010\uffeb\011\uffeb\024\uffeb\026\uffeb\001\002\000\010" +
    "\010\014\024\013\026\020\001\002\000\020\002\uffee\004" +
    "\uffee\010\uffee\023\uffee\025\uffee\027\uffee\031\uffee\001\002" +
    "\000\010\010\014\024\013\026\020\001\002\000\020\002" +
    "\ufff0\004\ufff0\010\ufff0\023\ufff0\025\ufff0\027\ufff0\031\ufff0" +
    "\001\002\000\006\027\ufff3\031\044\001\002\000\004\027" +
    "\043\001\002\000\010\023\040\027\ufff2\031\037\001\002" +
    "\000\022\005\012\006\022\007\021\010\014\011\034\024" +
    "\013\026\020\027\ufff1\001\002\000\016\005\012\006\022" +
    "\007\021\010\014\024\013\026\020\001\002\000\020\002" +
    "\ufffd\004\ufffd\010\ufffd\023\ufffd\025\ufffd\027\ufffd\031\ufffd" +
    "\001\002\000\004\027\ufff4\001\002\000\020\002\ufff7\004" +
    "\ufff7\010\ufff7\023\ufff7\025\ufff7\027\ufff7\031\ufff7\001\002" +
    "\000\022\005\012\006\022\007\021\010\014\011\034\024" +
    "\013\026\020\027\ufff1\001\002\000\004\027\ufff5\001\002" +
    "\000\004\002\uffff\001\002\000\006\023\040\025\050\001" +
    "\002\000\020\002\ufff6\004\ufff6\010\ufff6\023\ufff6\025\ufff6" +
    "\027\ufff6\031\ufff6\001\002\000\004\011\056\001\002\000" +
    "\004\011\uffe6\001\002\000\004\011\uffe7\001\002\000\004" +
    "\011\uffe9\001\002\000\004\011\uffe8\001\002\000\010\010" +
    "\014\024\013\026\020\001\002\000\020\002\uffef\004\uffef" +
    "\010\uffef\023\uffef\025\uffef\027\uffef\031\uffef\001\002\000" +
    "\004\002\000\001\002\000\012\002\ufffe\004\004\010\006" +
    "\023\040\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\004\002\004\001\001\000\014\003\060\004" +
    "\015\005\014\007\010\010\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\016\004\015\005\014\007" +
    "\010\010\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\014\003\046\004\015\005" +
    "\014\007\010\010\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\045\001\001\000" +
    "\016\003\035\004\015\005\014\006\034\007\010\010\007" +
    "\001\001\000\004\011\031\001\001\000\004\011\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\030\001" +
    "\001\000\002\001\001\000\004\005\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\035\004\015\005\014\006\041\007\010" +
    "\010\007\001\001\000\012\004\040\005\014\007\010\010" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\035\004\015\005\014\006\044\007" +
    "\010\010\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\061\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoLista$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoLista$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoLista$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoLista alex = (AnalizadorLexicoLista)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoLista$actions {
  private final AnalizadorSintacticoLista parser;

  /** Constructor */
  CUP$AnalizadorSintacticoLista$actions(AnalizadorSintacticoLista parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoLista$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoLista$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoLista$parser,
    java.util.Stack            CUP$AnalizadorSintacticoLista$stack,
    int                        CUP$AnalizadorSintacticoLista$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoLista$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoLista$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= PRINT L0 S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLista$stack.elementAt(CUP$AnalizadorSintacticoLista$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoLista$parser.done_parsing();
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= IDEN ASIGNACION L0 S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L0 ::= L0 CONCATENACION L1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("L0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L0 ::= L1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("L0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L1 ::= FUNC2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("L1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L1 ::= FUNC3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("L1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L1 ::= L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("L1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("L2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // L2 ::= CAP CORC CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("L2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // L2 ::= PAP L0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("L2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CORC ::= ENT COMA CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CORC ::= L0 COMA CORC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CORC ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CORC ::= L0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CORC ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("CORC",4, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNC2 ::= LREDUCE OPAR L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("FUNC2",5, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNC3 ::= LFILTER OPREL ENT L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("FUNC3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNC3 ::= LMAP OPAR ENT L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("FUNC3",6, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPAR ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("OPAR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPAR ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("OPAR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPAR ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("OPAR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPAR ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("OPAR",7, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPREL ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("OPREL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPREL ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("OPREL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPREL ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("OPREL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPREL ::= DESIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLista$result = parser.getSymbolFactory().newSymbol("OPREL",8, RESULT);
            }
          return CUP$AnalizadorSintacticoLista$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoLista$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoLista$do_action(
    int                        CUP$AnalizadorSintacticoLista$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoLista$parser,
    java.util.Stack            CUP$AnalizadorSintacticoLista$stack,
    int                        CUP$AnalizadorSintacticoLista$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoLista$do_action_part00000000(
                               CUP$AnalizadorSintacticoLista$act_num,
                               CUP$AnalizadorSintacticoLista$parser,
                               CUP$AnalizadorSintacticoLista$stack,
                               CUP$AnalizadorSintacticoLista$top);
    }
}

