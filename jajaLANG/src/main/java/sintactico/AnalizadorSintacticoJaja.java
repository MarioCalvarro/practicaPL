
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 01 21:29:17 CEST 2024
//----------------------------------------------------

package main.java.sintactico;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.*;
import main.java.lexico.AnalizadorLexicoJaja;
import main.java.lexico.UnidadLexica;
import main.java.errors.GestionErroresJaja;
import main.java.ast.Programa;
import main.java.ast.Import;
import main.java.ast.declaraciones.*;
import main.java.ast.expresiones.*;
import main.java.ast.instrucciones.*;
import main.java.ast.literales.*;
import main.java.ast.tipos.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 01 21:29:17 CEST 2024
  */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJaja() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\002\000\002\003\007\000\002\003\007" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\002\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\007\003\000\002\007\005\000\002\007\005" +
    "\000\002\006\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\011\010\000\002\011\012\000\002" +
    "\012\002\000\002\012\003\000\002\013\003\000\002\013" +
    "\005\000\002\014\005\000\002\014\006\000\002\015\005" +
    "\000\002\016\003\000\002\016\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\017\004\000\002\020\005\000\002\020" +
    "\005\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\021\006\000\002" +
    "\024\002\000\002\024\004\000\002\024\006\000\002\022" +
    "\005\000\002\022\011\000\002\023\004\000\002\026\004" +
    "\000\002\026\010\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\006\000\002\031\003\000\002\031\004\000\002\031" +
    "\004\000\002\031\005\000\002\032\004\000\002\032\005" +
    "\000\002\033\005\000\002\034\005\000\002\034\003\000" +
    "\002\035\005\000\002\035\003\000\002\036\005\000\002" +
    "\036\003\000\002\051\003\000\002\051\003\000\002\037" +
    "\005\000\002\037\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\040\005\000" +
    "\002\040\003\000\002\053\003\000\002\053\003\000\002" +
    "\041\005\000\002\041\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\042\005\000\002\042\003" +
    "\000\002\043\004\000\002\043\003\000\002\055\003\000" +
    "\002\055\003\000\002\044\004\000\002\044\003\000\002" +
    "\056\003\000\002\056\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\025\006\000\002\025\005" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\004\000\002\057\004\000\002" +
    "\057\004\000\002\060\004\000\002\060\005\000\002\061" +
    "\005\000\002\062\005\000\002\062\007\000\002\046\006" +
    "\000\002\046\005\000\002\046\005\000\002\046\003\000" +
    "\002\047\003\000\002\047\005\000\002\063\005\000\002" +
    "\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\026\002\ufffe\003\ufffe\004\ufffe\005\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\075\ufffe\001\002" +
    "\000\004\002\340\001\002\000\026\002\ufff8\003\ufff8\004" +
    "\ufff8\005\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\017\006" +
    "\075\ufff8\001\002\000\006\003\332\076\331\001\002\000" +
    "\024\002\001\003\023\004\016\005\021\012\014\013\025" +
    "\014\013\015\024\075\020\001\002\000\024\002\ufff9\003" +
    "\ufff9\004\ufff9\005\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\075\ufff9\001\002\000\106\003\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\056\uffc2\060\uffc2\061\uffc2\064" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\075\uffc2\001\002\000\010" +
    "\003\327\052\164\075\035\001\002\000\004\065\322\001" +
    "\002\000\004\075\215\001\002\000\004\056\214\001\002" +
    "\000\106\003\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\052\uffc5\053\uffc5" +
    "\055\uffc5\056\uffc5\060\uffc5\061\uffc5\064\uffc5\066\uffc5\067" +
    "\uffc5\070\uffc5\075\uffc5\001\002\000\106\003\uffc6\022\uffc6" +
    "\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\060\uffc6" +
    "\061\uffc6\064\uffc6\066\uffc6\067\uffc6\070\uffc6\075\uffc6\001" +
    "\002\000\116\003\uff80\022\uff80\023\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\047\uff80\050\uff80\052\uff80\053" +
    "\uff80\054\uff80\055\uff80\056\uff80\057\212\060\uff80\061\uff80" +
    "\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\075" +
    "\uff80\001\002\000\106\003\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\052" +
    "\uffc4\053\uffc4\055\uffc4\056\uffc4\060\uffc4\061\uffc4\064\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\075\uffc4\001\002\000\106\003" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3\055\uffc3\056" +
    "\uffc3\060\uffc3\061\uffc3\064\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\075\uffc3\001\002\000\006\003\032\075\035\001\002\000" +
    "\006\003\202\075\203\001\002\000\004\067\030\001\002" +
    "\000\004\056\027\001\002\000\024\002\ufffb\003\ufffb\004" +
    "\ufffb\005\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\075\ufffb" +
    "\001\002\000\006\003\032\075\035\001\002\000\010\055" +
    "\ufff1\056\ufff1\060\ufff1\001\002\000\004\053\200\001\002" +
    "\000\006\055\173\060\174\001\002\000\006\003\032\075" +
    "\035\001\002\000\012\053\042\055\uffee\056\uffee\060\uffee" +
    "\001\002\000\006\055\041\070\uffc0\001\002\000\004\070" +
    "\040\001\002\000\106\003\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1\050\uffc1\052" +
    "\uffc1\053\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1\064\uffc1" +
    "\066\uffc1\067\uffc1\070\uffc1\075\uffc1\001\002\000\010\003" +
    "\uffbc\070\uffbf\075\uffbc\001\002\000\032\003\065\021\062" +
    "\046\045\051\044\052\063\062\043\065\064\071\074\072" +
    "\072\073\060\074\070\075\020\001\002\000\024\021\uff99" +
    "\046\uff99\062\uff99\065\uff99\071\uff99\072\uff99\073\uff99\074" +
    "\uff99\075\uff99\001\002\000\030\021\uff9e\046\uff9e\051\uff9e" +
    "\052\uff9e\062\uff9e\065\uff9e\071\uff9e\072\uff9e\073\uff9e\074" +
    "\uff9e\075\uff9e\001\002\000\024\021\uff9a\046\uff9a\062\uff9a" +
    "\065\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\001" +
    "\002\000\100\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\047\uff9b\050\uff9b\053\uff9b\055\uff9b\056" +
    "\uff9b\060\uff9b\061\uff9b\064\uff9b\066\uff9b\067\uff9b\070\uff9b" +
    "\001\002\000\100\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\047\uff9f\050\uff9f\053\uff9f\055\uff9f" +
    "\056\uff9f\060\uff9f\061\uff9f\064\uff9f\066\uff9f\067\uff9f\070" +
    "\uff9f\001\002\000\100\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\047\uffa1\050\uffa1\053\uffa1\055" +
    "\uffa1\056\uffa1\060\uffa1\061\uffa1\064\uffa1\066\uffa1\067\uffa1" +
    "\070\uffa1\001\002\000\012\050\102\055\uffed\056\uffed\060" +
    "\uffed\001\002\000\106\022\uff84\023\uff84\024\uff84\025\uff84" +
    "\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84" +
    "\043\uff84\044\uff84\045\uff84\047\uff84\050\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\060\uff84\061\uff84\063\uff84\064\uff84" +
    "\065\165\066\uff84\067\uff84\070\uff84\001\002\000\100\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\132\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\047\uffa6\050\uffa6\053\uffa6\055\uffa6\056\uffa6\060\uffa6\061" +
    "\uffa6\064\uffa6\066\uffa6\067\uffa6\070\uffa6\001\002\000\076" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\033\126\034\127\035\125\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\047" +
    "\uffaa\050\uffaa\053\uffaa\055\uffaa\056\uffaa\060\uffaa\061\uffaa" +
    "\064\uffaa\066\uffaa\067\uffaa\070\uffaa\001\002\000\070\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\036\123\037\122\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\053\uffb0\055\uffb0" +
    "\056\uffb0\060\uffb0\061\uffb0\064\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\001\002\000\064\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\040\uffb4\041\uffb4\042" +
    "\117\043\116\044\113\045\114\047\uffb4\050\uffb4\053\uffb4" +
    "\055\uffb4\056\uffb4\060\uffb4\061\uffb4\064\uffb4\066\uffb4\067" +
    "\uffb4\070\uffb4\001\002\000\054\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\040\111\041" +
    "\110\047\uffb6\050\uffb6\053\uffb6\055\uffb6\056\uffb6\060\uffb6" +
    "\061\uffb6\064\uffb6\066\uffb6\067\uffb6\070\uffb6\001\002\000" +
    "\100\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91" +
    "\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\047\uff91\050\uff91\053\uff91\055\uff91\056\uff91\060" +
    "\uff91\061\uff91\064\uff91\066\uff91\067\uff91\070\uff91\001\002" +
    "\000\050\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\047\105\050\uffb8\053\uffb8\055\uffb8" +
    "\056\uffb8\060\uffb8\061\uffb8\064\uffb8\066\uffb8\067\uffb8\070" +
    "\uffb8\001\002\000\020\004\016\005\021\013\025\014\013" +
    "\063\142\067\144\075\020\001\002\000\030\021\uff9d\046" +
    "\uff9d\051\uff9d\052\uff9d\062\uff9d\065\uff9d\071\uff9d\072\uff9d" +
    "\073\uff9d\074\uff9d\075\uff9d\001\002\000\030\021\062\046" +
    "\045\051\044\052\063\062\043\065\064\071\074\072\072" +
    "\073\060\074\070\075\020\001\002\000\010\055\uffec\056" +
    "\uffec\060\uffec\001\002\000\024\021\062\046\045\062\043" +
    "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
    "\002\000\030\021\062\046\045\051\044\052\063\062\043" +
    "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
    "\002\000\100\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90" +
    "\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035" +
    "\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\047\uff90\050\uff90\053\uff90\055\uff90\056" +
    "\uff90\060\uff90\061\uff90\064\uff90\066\uff90\067\uff90\070\uff90" +
    "\001\002\000\104\022\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\047\uff96\050\uff96\053\uff96\054\077" +
    "\055\uff96\056\uff96\060\uff96\061\uff96\063\076\064\uff96\066" +
    "\uff96\067\uff96\070\uff96\001\002\000\100\022\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\047\uff92\050" +
    "\uff92\053\uff92\055\uff92\056\uff92\060\uff92\061\uff92\064\uff92" +
    "\066\uff92\067\uff92\070\uff92\001\002\000\100\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\047\uff97" +
    "\050\uff97\053\uff97\055\uff97\056\uff97\060\uff97\061\uff97\064" +
    "\uff97\066\uff97\067\uff97\070\uff97\001\002\000\100\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\047" +
    "\uff93\050\uff93\053\uff93\055\uff93\056\uff93\060\uff93\061\uff93" +
    "\064\uff93\066\uff93\067\uff93\070\uff93\001\002\000\100\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98" +
    "\047\uff98\050\uff98\053\uff98\055\uff98\056\uff98\060\uff98\061" +
    "\uff98\064\uff98\066\uff98\067\uff98\070\uff98\001\002\000\030" +
    "\021\062\046\045\051\044\052\063\062\043\065\064\071" +
    "\074\072\072\073\060\074\070\075\020\001\002\000\004" +
    "\075\100\001\002\000\104\022\uff86\023\uff86\024\uff86\025" +
    "\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86" +
    "\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\047\uff86\050\uff86\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\060\uff86\061\uff86\063\uff86\064" +
    "\uff86\066\uff86\067\uff86\070\uff86\001\002\000\006\050\102" +
    "\064\103\001\002\000\030\021\062\046\045\051\044\052" +
    "\063\062\043\065\064\071\074\072\072\073\060\074\070" +
    "\075\020\001\002\000\104\022\uff87\023\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87" +
    "\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\047\uff87\050\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\060\uff87\061\uff87\063\uff87\064" +
    "\uff87\066\uff87\067\uff87\070\uff87\001\002\000\050\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\047\105\050\uffb9\053\uffb9\055\uffb9\056\uffb9\060\uffb9" +
    "\061\uffb9\064\uffb9\066\uffb9\067\uffb9\070\uffb9\001\002\000" +
    "\030\021\062\046\045\051\044\052\063\062\043\065\064" +
    "\071\074\072\072\073\060\074\070\075\020\001\002\000" +
    "\054\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\040\111\041\110\047\uffb7\050\uffb7\053" +
    "\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7\064\uffb7\066\uffb7" +
    "\067\uffb7\070\uffb7\001\002\000\030\021\062\046\045\051" +
    "\044\052\063\062\043\065\064\071\074\072\072\073\060" +
    "\074\070\075\020\001\002\000\030\021\uffb3\046\uffb3\051" +
    "\uffb3\052\uffb3\062\uffb3\065\uffb3\071\uffb3\072\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\001\002\000\030\021\uffb2\046\uffb2\051" +
    "\uffb2\052\uffb2\062\uffb2\065\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\001\002\000\064\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\040\uffb5" +
    "\041\uffb5\042\117\043\116\044\113\045\114\047\uffb5\050" +
    "\uffb5\053\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5\064\uffb5" +
    "\066\uffb5\067\uffb5\070\uffb5\001\002\000\030\021\uffad\046" +
    "\uffad\051\uffad\052\uffad\062\uffad\065\uffad\071\uffad\072\uffad" +
    "\073\uffad\074\uffad\075\uffad\001\002\000\030\021\uffac\046" +
    "\uffac\051\uffac\052\uffac\062\uffac\065\uffac\071\uffac\072\uffac" +
    "\073\uffac\074\uffac\075\uffac\001\002\000\030\021\062\046" +
    "\045\051\044\052\063\062\043\065\064\071\074\072\072" +
    "\073\060\074\070\075\020\001\002\000\030\021\uffae\046" +
    "\uffae\051\uffae\052\uffae\062\uffae\065\uffae\071\uffae\072\uffae" +
    "\073\uffae\074\uffae\075\uffae\001\002\000\030\021\uffaf\046" +
    "\uffaf\051\uffaf\052\uffaf\062\uffaf\065\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\075\uffaf\001\002\000\070\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\036\123\037\122\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\047\uffb1\050\uffb1\053\uffb1\055\uffb1\056\uffb1" +
    "\060\uffb1\061\uffb1\064\uffb1\066\uffb1\067\uffb1\070\uffb1\001" +
    "\002\000\030\021\062\046\045\051\044\052\063\062\043" +
    "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
    "\002\000\030\021\uffa8\046\uffa8\051\uffa8\052\uffa8\062\uffa8" +
    "\065\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\001" +
    "\002\000\030\021\uffa9\046\uffa9\051\uffa9\052\uffa9\062\uffa9" +
    "\065\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\001" +
    "\002\000\076\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\033\126\034\127\035\125\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\047\uffab\050\uffab\053\uffab\055\uffab\056\uffab\060" +
    "\uffab\061\uffab\064\uffab\066\uffab\067\uffab\070\uffab\001\002" +
    "\000\030\021\uffa3\046\uffa3\051\uffa3\052\uffa3\062\uffa3\065" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\001\002" +
    "\000\030\021\uffa5\046\uffa5\051\uffa5\052\uffa5\062\uffa5\065" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\001\002" +
    "\000\030\021\uffa4\046\uffa4\051\uffa4\052\uffa4\062\uffa4\065" +
    "\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\001\002" +
    "\000\030\021\062\046\045\051\044\052\063\062\043\065" +
    "\064\071\074\072\072\073\060\074\070\075\020\001\002" +
    "\000\100\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\132\033\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\047\uffa7\050\uffa7\053\uffa7\055\uffa7\056\uffa7" +
    "\060\uffa7\061\uffa7\064\uffa7\066\uffa7\067\uffa7\070\uffa7\001" +
    "\002\000\030\021\062\046\045\051\044\052\063\062\043" +
    "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
    "\002\000\100\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\047\uffa2\050\uffa2\053\uffa2\055\uffa2\056" +
    "\uffa2\060\uffa2\061\uffa2\064\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\001\002\000\100\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0\053\uffa0\055\uffa0" +
    "\056\uffa0\060\uffa0\061\uffa0\064\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\001\002\000\100\022\uff9c\023\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\047\uff9c\050\uff9c\053\uff9c\055" +
    "\uff9c\056\uff9c\060\uff9c\061\uff9c\064\uff9c\066\uff9c\067\uff9c" +
    "\070\uff9c\001\002\000\006\050\102\066\137\001\002\000" +
    "\104\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85" +
    "\030\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036" +
    "\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85" +
    "\045\uff85\047\uff85\050\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\060\uff85\061\uff85\063\uff85\064\uff85\066\uff85\067\uff85" +
    "\070\uff85\001\002\000\102\022\uff8d\023\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\047\uff8d\050\uff8d\052\164" +
    "\053\uff8d\055\uff8d\056\uff8d\060\uff8d\061\uff8d\064\uff8d\066" +
    "\uff8d\067\uff8d\070\uff8d\001\002\000\100\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f\050" +
    "\uff8f\053\uff8f\055\uff8f\056\uff8f\060\uff8f\061\uff8f\064\uff8f" +
    "\066\uff8f\067\uff8f\070\uff8f\001\002\000\032\021\062\046" +
    "\045\051\044\052\063\062\043\064\156\065\064\071\074" +
    "\072\072\073\060\074\070\075\020\001\002\000\100\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\047\uff8e\050\uff8e\053\uff8e\055\uff8e\056\uff8e\060\uff8e\061" +
    "\uff8e\064\uff8e\066\uff8e\067\uff8e\070\uff8e\001\002\000\004" +
    "\075\146\001\002\000\006\055\151\070\152\001\002\000" +
    "\004\053\147\001\002\000\030\021\062\046\045\051\044" +
    "\052\063\062\043\065\064\071\074\072\072\073\060\074" +
    "\070\075\020\001\002\000\010\050\102\055\uff89\070\uff89" +
    "\001\002\000\004\075\153\001\002\000\100\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\047\uff8a" +
    "\050\uff8a\053\uff8a\055\uff8a\056\uff8a\060\uff8a\061\uff8a\064" +
    "\uff8a\066\uff8a\067\uff8a\070\uff8a\001\002\000\004\053\154" +
    "\001\002\000\030\021\062\046\045\051\044\052\063\062" +
    "\043\065\064\071\074\072\072\073\060\074\070\075\020" +
    "\001\002\000\010\050\102\055\uff88\070\uff88\001\002\000" +
    "\100\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c" +
    "\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\047\uff8c\050\uff8c\053\uff8c\055\uff8c\056\uff8c\060" +
    "\uff8c\061\uff8c\064\uff8c\066\uff8c\067\uff8c\070\uff8c\001\002" +
    "\000\012\050\102\055\uff83\064\uff83\066\uff83\001\002\000" +
    "\006\055\161\064\162\001\002\000\030\021\062\046\045" +
    "\051\044\052\063\062\043\065\064\071\074\072\072\073" +
    "\060\074\070\075\020\001\002\000\100\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032" +
    "\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\047\uff8b\050" +
    "\uff8b\053\uff8b\055\uff8b\056\uff8b\060\uff8b\061\uff8b\064\uff8b" +
    "\066\uff8b\067\uff8b\070\uff8b\001\002\000\012\050\102\055" +
    "\uff82\064\uff82\066\uff82\001\002\000\106\003\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\047" +
    "\uffc8\050\uffc8\052\uffc8\053\uffc8\055\uffc8\056\uffc8\060\uffc8" +
    "\061\uffc8\064\uffc8\066\uffc8\067\uffc8\070\uffc8\075\uffc8\001" +
    "\002\000\032\021\062\046\045\051\044\052\063\062\043" +
    "\065\064\066\166\071\074\072\072\073\060\074\070\075" +
    "\020\001\002\000\100\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\047\uff94\050\uff94\053\uff94\055" +
    "\uff94\056\uff94\060\uff94\061\uff94\064\uff94\066\uff94\067\uff94" +
    "\070\uff94\001\002\000\006\055\161\066\170\001\002\000" +
    "\100\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\047\uff95\050\uff95\053\uff95\055\uff95\056\uff95\060" +
    "\uff95\061\uff95\064\uff95\066\uff95\067\uff95\070\uff95\001\002" +
    "\000\006\055\172\070\uffbe\001\002\000\010\003\uffbb\070" +
    "\uffbd\075\uffbb\001\002\000\006\003\177\075\035\001\002" +
    "\000\014\004\016\005\021\013\025\014\013\075\020\001" +
    "\002\000\010\052\164\055\uffba\070\uffba\001\002\000\010" +
    "\055\ufff0\056\ufff0\060\ufff0\001\002\000\012\053\200\055" +
    "\uffef\056\uffef\060\uffef\001\002\000\030\021\062\046\045" +
    "\051\044\052\063\062\043\065\064\071\074\072\072\073" +
    "\060\074\070\075\020\001\002\000\012\050\102\055\uffeb" +
    "\056\uffeb\060\uffeb\001\002\000\004\053\207\001\002\000" +
    "\004\053\204\001\002\000\016\003\206\004\016\005\021" +
    "\013\025\014\013\075\020\001\002\000\006\052\164\056" +
    "\ufff7\001\002\000\004\056\ufff5\001\002\000\014\004\016" +
    "\005\021\013\025\014\013\075\020\001\002\000\006\052" +
    "\164\056\ufff6\001\002\000\006\055\173\056\ufff2\001\002" +
    "\000\004\075\213\001\002\000\114\003\uff81\022\uff81\023" +
    "\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81" +
    "\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\047\uff81" +
    "\050\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\060" +
    "\uff81\061\uff81\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81" +
    "\070\uff81\075\uff81\001\002\000\024\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\075\ufffa" +
    "\001\002\000\004\065\216\001\002\000\010\051\217\066" +
    "\uffe8\075\223\001\002\000\004\075\317\001\002\000\006" +
    "\061\315\066\uffe7\001\002\000\004\066\226\001\002\000" +
    "\006\061\uffe6\066\uffe6\001\002\000\004\060\224\001\002" +
    "\000\014\004\016\005\021\013\025\014\013\075\020\001" +
    "\002\000\010\052\164\061\uffe4\066\uffe4\001\002\000\006" +
    "\061\227\067\230\001\002\000\014\004\016\005\021\013" +
    "\025\014\013\075\020\001\002\000\052\003\023\004\016" +
    "\005\021\006\232\010\241\011\246\013\025\014\013\016" +
    "\240\021\062\046\045\051\044\052\063\062\043\065\064" +
    "\071\074\072\072\073\060\074\070\075\020\001\002\000" +
    "\024\002\uffea\003\uffea\004\uffea\005\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\075\uffea\001\002\000\030\021\062\046" +
    "\045\051\044\052\063\062\043\065\064\071\074\072\072" +
    "\073\060\074\070\075\020\001\002\000\054\003\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb" +
    "\016\uffdb\021\uffdb\046\uffdb\051\uffdb\052\uffdb\062\uffdb\065" +
    "\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb" +
    "\001\002\000\004\056\302\001\002\000\062\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\047\uff97" +
    "\050\uff97\053\uff97\056\301\001\002\000\004\056\300\001" +
    "\002\000\054\003\023\004\016\005\021\006\232\010\241" +
    "\011\246\013\025\014\013\016\240\021\062\046\045\051" +
    "\044\052\063\062\043\065\064\070\276\071\074\072\072" +
    "\073\060\074\070\075\020\001\002\000\030\021\062\046" +
    "\045\051\044\052\063\062\043\065\064\071\074\072\072" +
    "\073\060\074\070\075\020\001\002\000\030\021\062\046" +
    "\045\051\044\052\063\062\043\065\064\071\074\072\072" +
    "\073\060\074\070\075\020\001\002\000\004\056\272\001" +
    "\002\000\054\003\uffe1\004\uffe1\005\uffe1\006\uffe1\010\uffe1" +
    "\011\uffe1\013\uffe1\014\uffe1\016\uffe1\021\uffe1\046\uffe1\051" +
    "\uffe1\052\uffe1\062\uffe1\065\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\001\002\000\054\003\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc" +
    "\016\uffdc\021\uffdc\046\uffdc\051\uffdc\052\uffdc\062\uffdc\065" +
    "\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc" +
    "\001\002\000\074\003\uffc3\022\uff84\023\uff84\024\uff84\025" +
    "\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042" +
    "\uff84\043\uff84\044\uff84\045\uff84\047\uff84\050\uff84\052\uffc3" +
    "\053\uff84\054\uff84\063\uff84\065\165\075\uffc3\001\002\000" +
    "\004\075\264\001\002\000\026\022\261\023\253\024\250" +
    "\025\251\026\255\027\256\030\260\031\252\050\102\053" +
    "\254\001\002\000\030\021\uffd5\046\uffd5\051\uffd5\052\uffd5" +
    "\062\uffd5\065\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075" +
    "\uffd5\001\002\000\030\021\uffd4\046\uffd4\051\uffd4\052\uffd4" +
    "\062\uffd4\065\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075" +
    "\uffd4\001\002\000\030\021\uffd0\046\uffd0\051\uffd0\052\uffd0" +
    "\062\uffd0\065\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\001\002\000\030\021\uffd6\046\uffd6\051\uffd6\052\uffd6" +
    "\062\uffd6\065\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075" +
    "\uffd6\001\002\000\030\021\062\046\045\051\044\052\063" +
    "\062\043\065\064\071\074\072\072\073\060\074\070\075" +
    "\020\001\002\000\030\021\uffd3\046\uffd3\051\uffd3\052\uffd3" +
    "\062\uffd3\065\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\001\002\000\030\021\uffd2\046\uffd2\051\uffd2\052\uffd2" +
    "\062\uffd2\065\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075" +
    "\uffd2\001\002\000\030\021\062\046\045\051\044\052\063" +
    "\062\043\065\064\071\074\072\072\073\060\074\070\075" +
    "\020\001\002\000\030\021\uffd1\046\uffd1\051\uffd1\052\uffd1" +
    "\062\uffd1\065\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075" +
    "\uffd1\001\002\000\030\021\uffd7\046\uffd7\051\uffd7\052\uffd7" +
    "\062\uffd7\065\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075" +
    "\uffd7\001\002\000\006\050\102\056\uffd8\001\002\000\006" +
    "\050\102\056\uffd9\001\002\000\004\053\265\001\002\000" +
    "\030\021\062\046\045\051\044\052\063\062\043\065\064" +
    "\071\074\072\072\073\060\074\070\075\020\001\002\000" +
    "\006\050\102\061\267\001\002\000\030\021\062\046\045" +
    "\051\044\052\063\062\043\065\064\071\074\072\072\073" +
    "\060\074\070\075\020\001\002\000\006\050\102\067\230" +
    "\001\002\000\054\003\uffca\004\uffca\005\uffca\006\uffca\010" +
    "\uffca\011\uffca\013\uffca\014\uffca\016\uffca\021\uffca\046\uffca" +
    "\051\uffca\052\uffca\062\uffca\065\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\001\002\000\054\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\010\uffda\011\uffda\013\uffda\014" +
    "\uffda\016\uffda\021\uffda\046\uffda\051\uffda\052\uffda\062\uffda" +
    "\065\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075" +
    "\uffda\001\002\000\006\050\102\067\230\001\002\000\054" +
    "\003\uffcb\004\uffcb\005\uffcb\006\uffcb\010\uffcb\011\uffcb\013" +
    "\uffcb\014\uffcb\016\uffcb\021\uffcb\046\uffcb\051\uffcb\052\uffcb" +
    "\062\uffcb\065\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074" +
    "\uffcb\075\uffcb\001\002\000\006\050\102\056\uffc9\001\002" +
    "\000\064\002\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\021\uffe2\046\uffe2\051\uffe2\052\uffe2\062\uffe2\065" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2" +
    "\001\002\000\054\003\uffe0\004\uffe0\005\uffe0\006\uffe0\010" +
    "\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0\021\uffe0\046\uffe0" +
    "\051\uffe0\052\uffe0\062\uffe0\065\uffe0\070\uffe0\071\uffe0\072" +
    "\uffe0\073\uffe0\074\uffe0\075\uffe0\001\002\000\054\003\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\010\uffdf\011\uffdf\013\uffdf\014" +
    "\uffdf\016\uffdf\021\uffdf\046\uffdf\051\uffdf\052\uffdf\062\uffdf" +
    "\065\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075" +
    "\uffdf\001\002\000\054\003\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\010\uffdd\011\uffdd\013\uffdd\014\uffdd\016\uffdd\021\uffdd\046" +
    "\uffdd\051\uffdd\052\uffdd\062\uffdd\065\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\075\uffdd\001\002\000\054\003" +
    "\uffde\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde\013\uffde" +
    "\014\uffde\016\uffde\021\uffde\046\uffde\051\uffde\052\uffde\062" +
    "\uffde\065\uffde\070\uffde\071\uffde\072\uffde\073\uffde\074\uffde" +
    "\075\uffde\001\002\000\006\050\102\067\230\001\002\000" +
    "\056\003\uffce\004\uffce\005\uffce\006\uffce\007\306\010\uffce" +
    "\011\uffce\013\uffce\014\uffce\016\uffce\021\uffce\046\uffce\051" +
    "\uffce\052\uffce\062\uffce\065\uffce\070\uffce\071\uffce\072\uffce" +
    "\073\uffce\074\uffce\075\uffce\001\002\000\054\003\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\016\uffcf\021\uffcf\046\uffcf\051\uffcf\052\uffcf\062\uffcf\065" +
    "\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf" +
    "\001\002\000\032\021\062\046\045\051\044\052\063\062" +
    "\043\065\064\067\230\071\074\072\072\073\060\074\070" +
    "\075\020\001\002\000\054\003\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd\016\uffcd\021\uffcd" +
    "\046\uffcd\051\uffcd\052\uffcd\062\uffcd\065\uffcd\070\uffcd\071" +
    "\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\001\002\000\006" +
    "\050\102\067\230\001\002\000\056\003\uffce\004\uffce\005" +
    "\uffce\006\uffce\007\306\010\uffce\011\uffce\013\uffce\014\uffce" +
    "\016\uffce\021\uffce\046\uffce\051\uffce\052\uffce\062\uffce\065" +
    "\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce" +
    "\001\002\000\054\003\uffcc\004\uffcc\005\uffcc\006\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\021\uffcc\046\uffcc" +
    "\051\uffcc\052\uffcc\062\uffcc\065\uffcc\070\uffcc\071\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\001\002\000\006\052\164" +
    "\067\230\001\002\000\024\002\uffe9\003\uffe9\004\uffe9\005" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\075\uffe9\001\002" +
    "\000\006\051\217\075\223\001\002\000\006\061\uffe5\066" +
    "\uffe5\001\002\000\004\060\320\001\002\000\014\004\016" +
    "\005\021\013\025\014\013\075\020\001\002\000\010\052" +
    "\164\061\uffe3\066\uffe3\001\002\000\014\004\016\005\021" +
    "\013\025\014\013\075\020\001\002\000\006\052\164\055" +
    "\324\001\002\000\004\071\325\001\002\000\004\066\326" +
    "\001\002\000\106\003\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\052\uffc7" +
    "\053\uffc7\055\uffc7\056\uffc7\060\uffc7\061\uffc7\064\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\075\uffc7\001\002\000\006\053\200" +
    "\056\ufff3\001\002\000\006\055\173\056\ufff4\001\002\000" +
    "\004\020\335\001\002\000\004\020\333\001\002\000\004" +
    "\075\334\001\002\000\026\002\ufffd\003\ufffd\004\ufffd\005" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\017\ufffd\075\ufffd" +
    "\001\002\000\006\003\336\075\337\001\002\000\026\002" +
    "\ufffc\003\ufffc\004\ufffc\005\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\017\ufffc\075\ufffc\001\002\000\026\002\uffff\003" +
    "\uffff\004\uffff\005\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\017\uffff\075\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\020" +
    "\005\025\010\014\011\007\026\011\027\016\030\010\063" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\030\007\327\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\030\007\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\030\007\032\031\036\032\033\033\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\030\007\032\033\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\025\072\034\050\035\060\036\056\037\055" +
    "\040\054\041\053\042\052\043\047\044\046\045\045\046" +
    "\070\055\066\056\065\057\074\063\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\127\001" +
    "\001\000\004\053\120\001\001\000\004\052\114\001\001" +
    "\000\004\051\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\137\027\016\030\010\060\140\061\142" +
    "\063\021\001\001\000\002\001\001\000\042\025\072\034" +
    "\135\035\060\036\056\037\055\040\054\041\053\042\052" +
    "\043\047\044\046\045\045\046\070\055\066\056\065\057" +
    "\074\063\051\001\001\000\002\001\001\000\020\025\072" +
    "\044\134\045\045\046\070\056\065\057\074\063\051\001" +
    "\001\000\024\025\072\043\133\044\046\045\045\046\070" +
    "\055\066\056\065\057\074\063\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\025\072\034" +
    "\100\035\060\036\056\037\055\040\054\041\053\042\052" +
    "\043\047\044\046\045\045\046\070\055\066\056\065\057" +
    "\074\063\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\025\072\035\103\036\056\037" +
    "\055\040\054\041\053\042\052\043\047\044\046\045\045" +
    "\046\070\055\066\056\065\057\074\063\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\025\072\036\105" +
    "\037\055\040\054\041\053\042\052\043\047\044\046\045" +
    "\045\046\070\055\066\056\065\057\074\063\051\001\001" +
    "\000\004\051\106\001\001\000\034\025\072\037\111\040" +
    "\054\041\053\042\052\043\047\044\046\045\045\046\070" +
    "\055\066\056\065\057\074\063\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\025\072\040\117\041" +
    "\053\042\052\043\047\044\046\045\045\046\070\055\066" +
    "\056\065\057\074\063\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\120\001\001\000\030\025\072" +
    "\041\123\042\052\043\047\044\046\045\045\046\070\055" +
    "\066\056\065\057\074\063\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\025\072" +
    "\042\130\043\047\044\046\045\045\046\070\055\066\056" +
    "\065\057\074\063\051\001\001\000\002\001\001\000\024" +
    "\025\072\043\132\044\046\045\045\046\070\055\066\056" +
    "\065\057\074\063\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\025\072" +
    "\034\156\035\060\036\056\037\055\040\054\041\053\042" +
    "\052\043\047\044\046\045\045\046\070\047\157\055\066" +
    "\056\065\057\074\063\051\001\001\000\002\001\001\000" +
    "\004\062\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\025\072\034\147\035\060\036\056\037\055\040" +
    "\054\041\053\042\052\043\047\044\046\045\045\046\070" +
    "\055\066\056\065\057\074\063\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\025\072\034\154\035\060\036\056\037\055\040" +
    "\054\041\053\042\052\043\047\044\046\045\045\046\070" +
    "\055\066\056\065\057\074\063\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\025\072\034\162\035\060\036\056\037\055\040" +
    "\054\041\053\042\052\043\047\044\046\045\045\046\070" +
    "\055\066\056\065\057\074\063\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\025\072" +
    "\034\156\035\060\036\056\037\055\040\054\041\053\042" +
    "\052\043\047\044\046\045\045\046\070\047\166\055\066" +
    "\056\065\057\074\063\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\175\001\001\000\012\026\174\027" +
    "\016\030\010\063\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\025\072\034\200\035" +
    "\060\036\056\037\055\040\054\041\053\042\052\043\047" +
    "\044\046\045\045\046\070\055\066\056\065\057\074\063" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\204\027\016\030\010\063\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\207" +
    "\027\016\030\010\063\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\220\013\217\014" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\224\027\016\030\010\063\021\001\001\000\002\001\001" +
    "\000\004\015\230\001\001\000\012\026\312\027\016\030" +
    "\010\063\021\001\001\000\066\010\235\016\236\017\242" +
    "\020\233\021\243\022\232\023\241\025\234\026\011\027" +
    "\016\030\010\034\246\035\060\036\056\037\055\040\054" +
    "\041\053\042\052\043\047\044\046\045\045\046\070\055" +
    "\066\056\065\057\074\063\244\001\001\000\002\001\001" +
    "\000\042\025\072\034\302\035\060\036\056\037\055\040" +
    "\054\041\053\042\052\043\047\044\046\045\045\046\070" +
    "\055\066\056\065\057\074\063\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\010\235\017\276\020\233\021\243\022\232\023" +
    "\241\025\234\026\011\027\016\030\010\034\246\035\060" +
    "\036\056\037\055\040\054\041\053\042\052\043\047\044" +
    "\046\045\045\046\070\055\066\056\065\057\074\063\244" +
    "\001\001\000\042\025\072\034\274\035\060\036\056\037" +
    "\055\040\054\041\053\042\052\043\047\044\046\045\045" +
    "\046\070\055\066\056\065\057\074\063\051\001\001\000" +
    "\042\025\072\034\272\035\060\036\056\037\055\040\054" +
    "\041\053\042\052\043\047\044\046\045\045\046\070\055" +
    "\066\056\065\057\074\063\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\025\072\034\262\035\060\036\056\037\055\040\054" +
    "\041\053\042\052\043\047\044\046\045\045\046\070\055" +
    "\066\056\065\057\074\063\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\025\072\034\261\035\060\036" +
    "\056\037\055\040\054\041\053\042\052\043\047\044\046" +
    "\045\045\046\070\055\066\056\065\057\074\063\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\025\072\034" +
    "\265\035\060\036\056\037\055\040\054\041\053\042\052" +
    "\043\047\044\046\045\045\046\070\055\066\056\065\057" +
    "\074\063\051\001\001\000\002\001\001\000\042\025\072" +
    "\034\267\035\060\036\056\037\055\040\054\041\053\042" +
    "\052\043\047\044\046\045\045\046\070\055\066\056\065" +
    "\057\074\063\051\001\001\000\004\015\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\303\001\001\000\004\024\304\001" +
    "\001\000\002\001\001\000\044\015\306\025\072\034\307" +
    "\035\060\036\056\037\055\040\054\041\053\042\052\043" +
    "\047\044\046\045\045\046\070\055\066\056\065\057\074" +
    "\063\051\001\001\000\002\001\001\000\004\015\310\001" +
    "\001\000\004\024\311\001\001\000\002\001\001\000\004" +
    "\015\313\001\001\000\002\001\001\000\004\014\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\320" +
    "\027\016\030\010\063\021\001\001\000\002\001\001\000" +
    "\012\026\322\027\016\030\010\063\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJaja$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

    public Symbol iniciarParseo() throws Exception {
    	Symbol res = this.parse();
        if (errores.hayErrores()) {
            throw new Exception("El programa contiene errores. Abortando compilación...");
        }
        return res;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJaja$actions {
  private final AnalizadorSintacticoJaja parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJaja$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_Imports Lista_Declaraciones 
            {
              Programa RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Programa(lImp, lDecl); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJaja$parser.done_parsing();
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_Imports ::= Lista_Imports TRAFICAR RUTA COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lImp.add(new Import(ruta, id)); RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_Imports ::= 
            {
              List<Import> RESULT =null;
		 RESULT = new ArrayList<Import>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_Imports ::= Lista_Imports TRAFICAR error COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 System.err.println("Error al importar un archivo, ruta incorrecta. Usa \"ruta/relativa/a/fichero.jaja\".");
                 RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Imports ::= Lista_Imports TRAFICAR RUTA COMO error 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 System.err.println("Error al importar un archivo, identificador incorrecto.");
                 RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion_Alias PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionAlias dAlias = (DeclaracionAlias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dAlias); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Variables PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables dGen = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Funcion 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionFun dGen = (DeclaracionFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lista_Declaraciones ::= 
            {
              ListaDeclaraciones RESULT =null;
		 RESULT = new ListaDeclaraciones(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionAlias(id, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaracion_Alias ::= INCOGNITO error ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 System.err.println("Declaración de alias incorrecta. Identificador no válido.");
                     RESULT = null; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION error 
            {
              DeclaracionAlias RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 System.err.println("Declaración de alias incorrecta. Tipo no válido.");
                     RESULT = null; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl_Variables ::= Tipo Lista_Decl_Asignaciones 
            {
              DeclaracionVariables RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decl_Variables ::= Tipo error 
            {
              DeclaracionVariables RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 System.err.println("Declaración de variables incorrecta. Lista de variables no válida.");
                  RESULT = null; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decl_Variables ::= error Lista_Decl_Asignaciones 
            {
              DeclaracionVariables RESULT =null;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 System.err.println("Declaración de variables incorrecta. Tipo no válido.");
                  RESULT = null; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Decl_Asignaciones ::= Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionVar> lista_var = new ArrayList<DeclaracionVar>();
                        lista_var.add(var); RESULT = lista_var; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		List<DeclaracionVar> lDecl = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(var); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA error 
            {
              List<DeclaracionVar> RESULT =null;
		List<DeclaracionVar> lDecl = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 System.err.println("Declaración de variable incorrecta. Identificador no válido.");
                           RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Decl_Asig ::= IDEN 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Decl_Asig ::= IDEN ASIGNACION Expresion 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Decl_Asig ::= IDEN ASIGNACION error 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 System.err.println("Declaración de variable incorrecta. Expresión no válida.");
             RESULT = null; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Decl_Asig ::= error ASIGNACION Expresion 
            {
              DeclaracionVar RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 System.err.println("Declaración de variable incorrecta. Identificador no válido.");
             RESULT = null; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-6)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lista_Parametros ::= 
            {
              List<DeclaracionPar> RESULT =null;
		 RESULT = new ArrayList<DeclaracionPar>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_Parametros ::= Lista_Parametros2 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lista_Parametros2 ::= Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionPar> lista_par = new ArrayList<DeclaracionPar>();
                  lista_par.add(par); RESULT = lista_par; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lista_Parametros2 ::= Lista_Parametros2 FLECHA Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lPar.add(par); RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Parametro ::= IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Parametro ::= DIRECCION IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Bloque_Anidado ::= LLAP Lista_Instrucciones LLCIERRE 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> LIns = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = LIns; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bloque_Anidado",11, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Lista_Instrucciones ::= Instruccion 
            {
              List<Instruccion> RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
                    lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= Decl_Variables PUNTOCOMA 
            {
              Instruccion RESULT =null;
		DeclaracionVariables decl = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = decl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= Asignacion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = as; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= Llamada_Fun PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= Condicional 
            {
              Instruccion RESULT =null;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= Bucle 
            {
              Instruccion RESULT =null;
		Instruccion buc = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = buc; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= Inst_Return PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion iRet = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = iRet; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asignacion ::= Expresion ASIGNACION Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, expr2); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Asignacion ::= Expresion OpBin Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, new OperadorBin(op, expr1, expr2)); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OpBin ::= POTASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.POT; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OpBin ::= MULASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OpBin ::= DIVASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OpBin ::= MODASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OpBin ::= SUMAASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OpBin ::= RESTAASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OpBin ::= CONJASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.CONJ; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OpBin ::= DISYASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DISY; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Condicional ::= SI Expresion Bloque_Anidado Cond_Else 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional",15, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Cond_Else ::= 
            {
              InsCond RESULT =null;
		 RESULT = new InsCond(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Cond_Else ::= SINO Bloque_Anidado 
            {
              InsCond RESULT =null;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Cond_Else ::= SINO Expresion Bloque_Anidado Cond_Else 
            {
              InsCond RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bucle ::= MIENTRAS Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleWhile(expr, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bucle ::= PARA IDEN ASIGNACION Expresion FLECHA Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-5)).value;
		Expresion exprIni = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion exprFin = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleFor(id, exprIni, exprFin, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Inst_Return ::= DEVUELVE Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsReturn(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return",17, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo ::= Tipo PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoPuntero(tipo); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo ::= VECTOR PAP Tipo COMA ENTERO PCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoArray(tipo, ent); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo ::= T 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // T ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = TipoEntero.instancia();  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= BIN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBinario.instancia(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= Identificador 
            {
              Tipo RESULT =null;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new TipoAlias(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // T ::= Tipo_Reg 
            {
              Tipo RESULT =null;
		Tipo t_reg = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t_reg; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo_Reg ::= REGISTRO LLAP Matriz_Atributos LLCIERRE 
            {
              Tipo RESULT =null;
		ListaDeclaraciones mAtrib = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoRegistro(mAtrib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg",22, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matriz_Atributos ::= Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matriz_Atributos ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matriz_Atributos2 ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                  mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matriz_Atributos2 ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS Tipo 
            {
              DeclaracionVariables RESULT =null;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos",25, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion ::= Expresion DISY E1 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.DISY, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion ::= E1 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e1; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E1 ::= E1 CONJ E2 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.CONJ, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e2; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op2 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op2, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e3; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP2 ::= DESIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DESIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP2 ::= IGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.IGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E3 ::= E3 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op3 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op3, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e4; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP3 ::= MAYOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP3 ::= MENOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP3 ::= MAYORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP3 ::= MENORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E4 ::= E4 OP4 E5 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op4 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op4, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion e5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e5; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP4 ::= SUMA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP4 ::= RESTA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E5 ::= E5 OP5 E6 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op5 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op5, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion e6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e6; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP5 ::= MUL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP5 ::= DIV 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP5 ::= MOD 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E6 ::= E6 POT E7 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.POT, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion e7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e7; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E7 ::= OP7 E7 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op7 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op7, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion e8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e8; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP7 ::= DIRECCION 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.DIRECCION; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP7 ::= PUNTERO 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.PUNTERO; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E8 ::= OP8 E8 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op8 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op8, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E8 ::= E9 
            {
              Expresion RESULT =null;
		Expresion e9 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e9; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP8 ::= NEG 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.NEG; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP8 ::= MENOS 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.MENOS; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E9 ::= Literal 
            {
              Expresion RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E9 ::= Llamada_Fun 
            {
              Expresion RESULT =null;
		Llamada ll = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = ll; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E9 ::= E10 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Llamada_Fun ::= Identificador PAP Lista_Expresiones PCIERRE 
            {
              Llamada RESULT =null;
		Identificador izquierda = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new Llamada(izquierda, lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Llamada_Fun ::= Identificador PAP PCIERRE 
            {
              Llamada RESULT =null;
		Identificador izquierda = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 RESULT = new Llamada(izquierda, new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		Entero e = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Literal ::= FACTO 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Literal ::= FAKE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Literal ::= NULO 
            {
              Literal RESULT =null;
		Nulo n = (Nulo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Literal ::= NUEVO Array_Literal 
            {
              Literal RESULT =null;
		LiteralArray aL = (LiteralArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = aL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Literal ::= NUEVO Struct_Literal 
            {
              Literal RESULT =null;
		LiteralStruct sL = (LiteralStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = sL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Literal ::= NUEVO Tipo 
            {
              Literal RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DirDinamica(t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Array_Literal ::= CAP CCIERRE 
            {
              LiteralArray RESULT =null;
		 RESULT = new LiteralArray(new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Array_Literal ::= CAP Lista_Expresiones CCIERRE 
            {
              LiteralArray RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralArray(lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Struct_Literal ::= LLAP Lista_Asig_Atributos LLCIERRE 
            {
              LiteralStruct RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralStruct(lAtr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Struct_Literal",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Lista_Asig_Atributos ::= IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 Map<String, Expresion> valores = new HashMap<String, Expresion>();
                     valores.put(id, expr); RESULT = valores; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",48, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Lista_Asig_Atributos ::= Lista_Asig_Atributos COMA IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lAtr.put(id, expr); RESULT = lAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",48, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E10 ::= E10 CAP Expresion CCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new AccesoArray(izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E10 ::= E10 PUNTO IDEN 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new AccesoStruct(izquierda, id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E10 ::= PAP Expresion PCIERRE 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E10 ::= Identificador 
            {
              Expresion RESULT =null;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Lista_Expresiones ::= Expresion 
            {
              List<Expresion> RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Expresion> lExpr = new ArrayList<Expresion>();
                   lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Lista_Expresiones ::= Lista_Expresiones COMA Expresion 
            {
              List<Expresion> RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Identificador ::= IDEN CUATROPUNTOS IDEN 
            {
              Identificador RESULT =null;
		String lib = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id, lib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador",49, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Identificador ::= IDEN 
            {
              Identificador RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador",49, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoJaja$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                               CUP$AnalizadorSintacticoJaja$act_num,
                               CUP$AnalizadorSintacticoJaja$parser,
                               CUP$AnalizadorSintacticoJaja$stack,
                               CUP$AnalizadorSintacticoJaja$top);
    }
}

