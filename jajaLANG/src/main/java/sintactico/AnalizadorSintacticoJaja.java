//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 15 17:01:32 CEST 2024
//----------------------------------------------------

package main.java.sintactico;

import java_cup.runtime.Symbol;
import main.java.ast.Programa;
import main.java.ast.declaraciones.*;
import main.java.ast.expresiones.*;
import main.java.ast.instrucciones.*;
import main.java.ast.literales.*;
import main.java.ast.tipos.*;
import main.java.errors.GestionErroresJaja;
import main.java.lexico.AnalizadorLexicoJaja;
import main.java.lexico.TokenValue;
import main.java.lexico.UnidadLexica;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * CUP v0.11b beta 20140220 generated parser.
 *
 * @version Mon Apr 15 17:01:32 CEST 2024
 */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\225\000\002\002\004\000\002\002\004\000\002\003" +
                            "\007\000\002\003\002\000\002\003\007\000\002\003\007" +
                            "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
                            "\002\004\002\000\002\005\006\000\002\005\006\000\002" +
                            "\005\006\000\002\010\004\000\002\010\004\000\002\010" +
                            "\004\000\002\007\003\000\002\007\005\000\002\007\005" +
                            "\000\002\006\003\000\002\006\005\000\002\006\005\000" +
                            "\002\006\005\000\002\011\010\000\002\011\012\000\002" +
                            "\011\010\000\002\011\012\000\002\011\010\000\002\011" +
                            "\012\000\002\011\012\000\002\012\002\000\002\012\003" +
                            "\000\002\013\003\000\002\013\005\000\002\014\005\000" +
                            "\002\014\006\000\002\015\005\000\002\016\003\000\002" +
                            "\016\004\000\002\017\004\000\002\017\004\000\002\017" +
                            "\004\000\002\017\003\000\002\017\003\000\002\017\004" +
                            "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
                            "\002\020\005\000\002\050\003\000\002\050\003\000\002" +
                            "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
                            "\003\000\002\050\003\000\002\050\003\000\002\021\006" +
                            "\000\002\021\006\000\002\024\002\000\002\024\004\000" +
                            "\002\024\006\000\002\024\006\000\002\022\005\000\002" +
                            "\022\011\000\002\022\005\000\002\022\011\000\002\022" +
                            "\011\000\002\022\011\000\002\023\004\000\002\023\004" +
                            "\000\002\026\004\000\002\026\010\000\002\026\003\000" +
                            "\002\026\010\000\002\027\003\000\002\027\003\000\002" +
                            "\027\003\000\002\027\003\000\002\030\006\000\002\030" +
                            "\006\000\002\031\003\000\002\031\004\000\002\031\004" +
                            "\000\002\031\005\000\002\032\004\000\002\032\005\000" +
                            "\002\033\005\000\002\033\005\000\002\034\005\000\002" +
                            "\034\003\000\002\035\005\000\002\035\003\000\002\036" +
                            "\005\000\002\036\003\000\002\051\003\000\002\051\003" +
                            "\000\002\037\005\000\002\037\003\000\002\052\003\000" +
                            "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
                            "\040\005\000\002\040\003\000\002\053\003\000\002\053" +
                            "\003\000\002\041\005\000\002\041\003\000\002\054\003" +
                            "\000\002\054\003\000\002\054\003\000\002\042\005\000" +
                            "\002\042\003\000\002\043\004\000\002\043\003\000\002" +
                            "\055\003\000\002\055\003\000\002\044\004\000\002\044" +
                            "\003\000\002\056\003\000\002\056\003\000\002\045\003" +
                            "\000\002\045\003\000\002\045\003\000\002\025\006\000" +
                            "\002\025\005\000\002\025\006\000\002\057\003\000\002" +
                            "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
                            "\004\000\002\057\004\000\002\057\004\000\002\057\004" +
                            "\000\002\060\004\000\002\060\005\000\002\061\005\000" +
                            "\002\062\005\000\002\062\007\000\002\046\006\000\002" +
                            "\046\005\000\002\046\005\000\002\046\003\000\002\047" +
                            "\003\000\002\047\005\000\002\063\005\000\002\063\003" +
                            ""});
    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\u0111\000\026\002\ufffe\003\ufffe\004\ufffe\005\ufffe\012" +
                            "\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\075\ufffe\001\002" +
                            "\000\004\002\u0113\001\002\000\026\002\ufff8\003\ufff8\004" +
                            "\ufff8\005\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\017\006" +
                            "\075\ufff8\001\002\000\006\003\u010d\076\u010c\001\002\000" +
                            "\024\002\001\003\023\004\016\005\021\012\013\013\025" +
                            "\014\014\015\024\075\020\001\002\000\024\002\ufff9\003" +
                            "\ufff9\004\ufff9\005\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
                            "\075\ufff9\001\002\000\106\003\uffb3\022\uffb3\023\uffb3\024" +
                            "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
                            "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
                            "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3" +
                            "\052\uffb3\053\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3\064" +
                            "\uffb3\066\uffb3\067\uffb3\070\uffb3\075\uffb3\001\002\000\010" +
                            "\003\u010a\052\165\075\035\001\002\000\006\003\234\075" +
                            "\235\001\002\000\004\065\223\001\002\000\004\056\222" +
                            "\001\002\000\106\003\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
                            "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
                            "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
                            "\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\052\uffb6" +
                            "\053\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6\064\uffb6\066" +
                            "\uffb6\067\uffb6\070\uffb6\075\uffb6\001\002\000\106\003\uffb8" +
                            "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
                            "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
                            "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
                            "\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8" +
                            "\060\uffb8\061\uffb8\064\uffb8\066\uffb8\067\uffb8\070\uffb8\075" +
                            "\uffb8\001\002\000\116\003\uff6d\022\uff6d\023\uff6d\024\uff6d" +
                            "\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033" +
                            "\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d" +
                            "\042\uff6d\043\uff6d\044\uff6d\045\uff6d\047\uff6d\050\uff6d\052" +
                            "\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\220\060\uff6d" +
                            "\061\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070" +
                            "\uff6d\075\uff6d\001\002\000\106\003\uffb5\022\uffb5\023\uffb5" +
                            "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032" +
                            "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
                            "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\047\uffb5\050" +
                            "\uffb5\052\uffb5\053\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5" +
                            "\064\uffb5\066\uffb5\067\uffb5\070\uffb5\075\uffb5\001\002\000" +
                            "\106\003\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
                            "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
                            "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
                            "\044\uffb4\045\uffb4\047\uffb4\050\uffb4\052\uffb4\053\uffb4\055" +
                            "\uffb4\056\uffb4\060\uffb4\061\uffb4\064\uffb4\066\uffb4\067\uffb4" +
                            "\070\uffb4\075\uffb4\001\002\000\006\003\174\075\035\001" +
                            "\002\000\006\003\210\075\211\001\002\000\004\067\030" +
                            "\001\002\000\004\056\027\001\002\000\024\002\ufffb\003" +
                            "\ufffb\004\ufffb\005\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
                            "\075\ufffb\001\002\000\006\003\032\075\035\001\002\000" +
                            "\010\055\ufff1\056\ufff1\060\ufff1\001\002\000\006\053\177" +
                            "\070\207\001\002\000\006\055\201\060\202\001\002\000" +
                            "\006\003\174\075\035\001\002\000\012\053\042\055\uffee" +
                            "\056\uffee\060\uffee\001\002\000\006\055\041\070\uffb0\001" +
                            "\002\000\004\070\040\001\002\000\106\003\uffb2\022\uffb2" +
                            "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
                            "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
                            "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047" +
                            "\uffb2\050\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\060\uffb2" +
                            "\061\uffb2\064\uffb2\066\uffb2\067\uffb2\070\uffb2\075\uffb2\001" +
                            "\002\000\010\003\uffac\070\uffaf\075\uffac\001\002\000\032" +
                            "\003\065\021\062\046\045\051\044\052\063\062\043\065" +
                            "\064\071\074\072\072\073\060\074\070\075\020\001\002" +
                            "\000\024\021\uff88\046\uff88\062\uff88\065\uff88\071\uff88\072" +
                            "\uff88\073\uff88\074\uff88\075\uff88\001\002\000\030\021\uff8d" +
                            "\046\uff8d\051\uff8d\052\uff8d\062\uff8d\065\uff8d\071\uff8d\072" +
                            "\uff8d\073\uff8d\074\uff8d\075\uff8d\001\002\000\024\021\uff89" +
                            "\046\uff89\062\uff89\065\uff89\071\uff89\072\uff89\073\uff89\074" +
                            "\uff89\075\uff89\001\002\000\100\022\uff8a\023\uff8a\024\uff8a" +
                            "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
                            "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
                            "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\047\uff8a\050\uff8a\053" +
                            "\uff8a\055\uff8a\056\uff8a\060\uff8a\061\uff8a\064\uff8a\066\uff8a" +
                            "\067\uff8a\070\uff8a\001\002\000\100\022\uff8e\023\uff8e\024" +
                            "\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e" +
                            "\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
                            "\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\047\uff8e\050\uff8e" +
                            "\053\uff8e\055\uff8e\056\uff8e\060\uff8e\061\uff8e\064\uff8e\066" +
                            "\uff8e\067\uff8e\070\uff8e\001\002\000\100\022\uff90\023\uff90" +
                            "\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032" +
                            "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
                            "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\047\uff90\050" +
                            "\uff90\053\uff90\055\uff90\056\uff90\060\uff90\061\uff90\064\uff90" +
                            "\066\uff90\067\uff90\070\uff90\001\002\000\100\022\uff95\023" +
                            "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
                            "\032\132\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040" +
                            "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\047\uff95" +
                            "\050\uff95\053\uff95\055\uff95\056\uff95\060\uff95\061\uff95\064" +
                            "\uff95\066\uff95\067\uff95\070\uff95\001\002\000\012\050\102" +
                            "\055\uffed\056\uffed\060\uffed\001\002\000\106\022\uff71\023" +
                            "\uff71\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71" +
                            "\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040" +
                            "\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\047\uff71" +
                            "\050\uff71\053\uff71\054\uff71\055\uff71\056\uff71\060\uff71\061" +
                            "\uff71\063\uff71\064\uff71\065\166\066\uff71\067\uff71\070\uff71" +
                            "\001\002\000\076\022\uff99\023\uff99\024\uff99\025\uff99\026" +
                            "\uff99\027\uff99\030\uff99\031\uff99\033\126\034\127\035\125" +
                            "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044" +
                            "\uff99\045\uff99\047\uff99\050\uff99\053\uff99\055\uff99\056\uff99" +
                            "\060\uff99\061\uff99\064\uff99\066\uff99\067\uff99\070\uff99\001" +
                            "\002\000\070\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
                            "\027\uff9f\030\uff9f\031\uff9f\036\123\037\122\040\uff9f\041" +
                            "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\047\uff9f\050\uff9f" +
                            "\053\uff9f\055\uff9f\056\uff9f\060\uff9f\061\uff9f\064\uff9f\066" +
                            "\uff9f\067\uff9f\070\uff9f\001\002\000\064\022\uffa3\023\uffa3" +
                            "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\040" +
                            "\uffa3\041\uffa3\042\117\043\116\044\114\045\113\047\uffa3" +
                            "\050\uffa3\053\uffa3\055\uffa3\056\uffa3\060\uffa3\061\uffa3\064" +
                            "\uffa3\066\uffa3\067\uffa3\070\uffa3\001\002\000\054\022\uffa5" +
                            "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
                            "\uffa5\040\111\041\110\047\uffa5\050\uffa5\053\uffa5\055\uffa5" +
                            "\056\uffa5\060\uffa5\061\uffa5\064\uffa5\066\uffa5\067\uffa5\070" +
                            "\uffa5\001\002\000\100\022\uff7f\023\uff7f\024\uff7f\025\uff7f" +
                            "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034" +
                            "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
                            "\043\uff7f\044\uff7f\045\uff7f\047\uff7f\050\uff7f\053\uff7f\055" +
                            "\uff7f\056\uff7f\060\uff7f\061\uff7f\064\uff7f\066\uff7f\067\uff7f" +
                            "\070\uff7f\001\002\000\050\022\uffa7\023\uffa7\024\uffa7\025" +
                            "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\047\105\050\uffa7" +
                            "\053\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7\064\uffa7\066" +
                            "\uffa7\067\uffa7\070\uffa7\001\002\000\022\003\145\004\016" +
                            "\005\021\013\025\014\014\063\142\067\144\075\020\001" +
                            "\002\000\030\021\uff8c\046\uff8c\051\uff8c\052\uff8c\062\uff8c" +
                            "\065\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\001" +
                            "\002\000\030\021\062\046\045\051\044\052\063\062\043" +
                            "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
                            "\002\000\010\055\uffec\056\uffec\060\uffec\001\002\000\024" +
                            "\021\062\046\045\062\043\065\064\071\074\072\072\073" +
                            "\060\074\070\075\020\001\002\000\030\021\062\046\045" +
                            "\051\044\052\063\062\043\065\064\071\074\072\072\073" +
                            "\060\074\070\075\020\001\002\000\100\022\uff7e\023\uff7e" +
                            "\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032" +
                            "\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e" +
                            "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\047\uff7e\050" +
                            "\uff7e\053\uff7e\055\uff7e\056\uff7e\060\uff7e\061\uff7e\064\uff7e" +
                            "\066\uff7e\067\uff7e\070\uff7e\001\002\000\104\022\uff85\023" +
                            "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
                            "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
                            "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\047\uff85" +
                            "\050\uff85\053\uff85\054\077\055\uff85\056\uff85\060\uff85\061" +
                            "\uff85\063\076\064\uff85\066\uff85\067\uff85\070\uff85\001\002" +
                            "\000\100\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027" +
                            "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80" +
                            "\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044" +
                            "\uff80\045\uff80\047\uff80\050\uff80\053\uff80\055\uff80\056\uff80" +
                            "\060\uff80\061\uff80\064\uff80\066\uff80\067\uff80\070\uff80\001" +
                            "\002\000\100\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86" +
                            "\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035" +
                            "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86" +
                            "\044\uff86\045\uff86\047\uff86\050\uff86\053\uff86\055\uff86\056" +
                            "\uff86\060\uff86\061\uff86\064\uff86\066\uff86\067\uff86\070\uff86" +
                            "\001\002\000\100\022\uff81\023\uff81\024\uff81\025\uff81\026" +
                            "\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81" +
                            "\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043" +
                            "\uff81\044\uff81\045\uff81\047\uff81\050\uff81\053\uff81\055\uff81" +
                            "\056\uff81\060\uff81\061\uff81\064\uff81\066\uff81\067\uff81\070" +
                            "\uff81\001\002\000\100\022\uff87\023\uff87\024\uff87\025\uff87" +
                            "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034" +
                            "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
                            "\043\uff87\044\uff87\045\uff87\047\uff87\050\uff87\053\uff87\055" +
                            "\uff87\056\uff87\060\uff87\061\uff87\064\uff87\066\uff87\067\uff87" +
                            "\070\uff87\001\002\000\030\021\062\046\045\051\044\052" +
                            "\063\062\043\065\064\071\074\072\072\073\060\074\070" +
                            "\075\020\001\002\000\004\075\100\001\002\000\104\022" +
                            "\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73" +
                            "\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\037" +
                            "\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73" +
                            "\047\uff73\050\uff73\053\uff73\054\uff73\055\uff73\056\uff73\060" +
                            "\uff73\061\uff73\063\uff73\064\uff73\066\uff73\067\uff73\070\uff73" +
                            "\001\002\000\006\050\102\064\103\001\002\000\030\021" +
                            "\062\046\045\051\044\052\063\062\043\065\064\071\074" +
                            "\072\072\073\060\074\070\075\020\001\002\000\104\022" +
                            "\uff74\023\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74" +
                            "\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\037" +
                            "\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74" +
                            "\047\uff74\050\uff74\053\uff74\054\uff74\055\uff74\056\uff74\060" +
                            "\uff74\061\uff74\063\uff74\064\uff74\066\uff74\067\uff74\070\uff74" +
                            "\001\002\000\050\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
                            "\uffa8\027\uffa8\030\uffa8\031\uffa8\047\105\050\uffa8\053\uffa8" +
                            "\055\uffa8\056\uffa8\060\uffa8\061\uffa8\064\uffa8\066\uffa8\067" +
                            "\uffa8\070\uffa8\001\002\000\030\021\062\046\045\051\044" +
                            "\052\063\062\043\065\064\071\074\072\072\073\060\074" +
                            "\070\075\020\001\002\000\054\022\uffa6\023\uffa6\024\uffa6" +
                            "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\040\111\041" +
                            "\110\047\uffa6\050\uffa6\053\uffa6\055\uffa6\056\uffa6\060\uffa6" +
                            "\061\uffa6\064\uffa6\066\uffa6\067\uffa6\070\uffa6\001\002\000" +
                            "\030\021\062\046\045\051\044\052\063\062\043\065\064" +
                            "\071\074\072\072\073\060\074\070\075\020\001\002\000" +
                            "\030\021\uffa2\046\uffa2\051\uffa2\052\uffa2\062\uffa2\065\uffa2" +
                            "\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\001\002\000" +
                            "\030\021\uffa1\046\uffa1\051\uffa1\052\uffa1\062\uffa1\065\uffa1" +
                            "\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\001\002\000" +
                            "\064\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
                            "\030\uffa4\031\uffa4\040\uffa4\041\uffa4\042\117\043\116\044" +
                            "\114\045\113\047\uffa4\050\uffa4\053\uffa4\055\uffa4\056\uffa4" +
                            "\060\uffa4\061\uffa4\064\uffa4\066\uffa4\067\uffa4\070\uffa4\001" +
                            "\002\000\030\021\uff9b\046\uff9b\051\uff9b\052\uff9b\062\uff9b" +
                            "\065\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\001" +
                            "\002\000\030\021\uff9c\046\uff9c\051\uff9c\052\uff9c\062\uff9c" +
                            "\065\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\001" +
                            "\002\000\030\021\062\046\045\051\044\052\063\062\043" +
                            "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
                            "\002\000\030\021\uff9d\046\uff9d\051\uff9d\052\uff9d\062\uff9d" +
                            "\065\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\001" +
                            "\002\000\030\021\uff9e\046\uff9e\051\uff9e\052\uff9e\062\uff9e" +
                            "\065\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\001" +
                            "\002\000\070\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
                            "\027\uffa0\030\uffa0\031\uffa0\036\123\037\122\040\uffa0\041" +
                            "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0" +
                            "\053\uffa0\055\uffa0\056\uffa0\060\uffa0\061\uffa0\064\uffa0\066" +
                            "\uffa0\067\uffa0\070\uffa0\001\002\000\030\021\062\046\045" +
                            "\051\044\052\063\062\043\065\064\071\074\072\072\073" +
                            "\060\074\070\075\020\001\002\000\030\021\uff97\046\uff97" +
                            "\051\uff97\052\uff97\062\uff97\065\uff97\071\uff97\072\uff97\073" +
                            "\uff97\074\uff97\075\uff97\001\002\000\030\021\uff98\046\uff98" +
                            "\051\uff98\052\uff98\062\uff98\065\uff98\071\uff98\072\uff98\073" +
                            "\uff98\074\uff98\075\uff98\001\002\000\076\022\uff9a\023\uff9a" +
                            "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033" +
                            "\126\034\127\035\125\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
                            "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\047\uff9a\050\uff9a\053" +
                            "\uff9a\055\uff9a\056\uff9a\060\uff9a\061\uff9a\064\uff9a\066\uff9a" +
                            "\067\uff9a\070\uff9a\001\002\000\030\021\uff92\046\uff92\051" +
                            "\uff92\052\uff92\062\uff92\065\uff92\071\uff92\072\uff92\073\uff92" +
                            "\074\uff92\075\uff92\001\002\000\030\021\uff94\046\uff94\051" +
                            "\uff94\052\uff94\062\uff94\065\uff94\071\uff94\072\uff94\073\uff94" +
                            "\074\uff94\075\uff94\001\002\000\030\021\uff93\046\uff93\051" +
                            "\uff93\052\uff93\062\uff93\065\uff93\071\uff93\072\uff93\073\uff93" +
                            "\074\uff93\075\uff93\001\002\000\030\021\062\046\045\051" +
                            "\044\052\063\062\043\065\064\071\074\072\072\073\060" +
                            "\074\070\075\020\001\002\000\100\022\uff96\023\uff96\024" +
                            "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\132" +
                            "\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041" +
                            "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\047\uff96\050\uff96" +
                            "\053\uff96\055\uff96\056\uff96\060\uff96\061\uff96\064\uff96\066" +
                            "\uff96\067\uff96\070\uff96\001\002\000\030\021\062\046\045" +
                            "\051\044\052\063\062\043\065\064\071\074\072\072\073" +
                            "\060\074\070\075\020\001\002\000\100\022\uff91\023\uff91" +
                            "\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032" +
                            "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
                            "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\047\uff91\050" +
                            "\uff91\053\uff91\055\uff91\056\uff91\060\uff91\061\uff91\064\uff91" +
                            "\066\uff91\067\uff91\070\uff91\001\002\000\100\022\uff8f\023" +
                            "\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
                            "\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
                            "\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f" +
                            "\050\uff8f\053\uff8f\055\uff8f\056\uff8f\060\uff8f\061\uff8f\064" +
                            "\uff8f\066\uff8f\067\uff8f\070\uff8f\001\002\000\100\022\uff8b" +
                            "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
                            "\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b" +
                            "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\047" +
                            "\uff8b\050\uff8b\053\uff8b\055\uff8b\056\uff8b\060\uff8b\061\uff8b" +
                            "\064\uff8b\066\uff8b\067\uff8b\070\uff8b\001\002\000\006\050" +
                            "\102\066\137\001\002\000\104\022\uff72\023\uff72\024\uff72" +
                            "\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033" +
                            "\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72" +
                            "\042\uff72\043\uff72\044\uff72\045\uff72\047\uff72\050\uff72\053" +
                            "\uff72\054\uff72\055\uff72\056\uff72\060\uff72\061\uff72\063\uff72" +
                            "\064\uff72\066\uff72\067\uff72\070\uff72\001\002\000\102\022" +
                            "\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
                            "\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
                            "\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b" +
                            "\047\uff7b\050\uff7b\052\165\053\uff7b\055\uff7b\056\uff7b\060" +
                            "\uff7b\061\uff7b\064\uff7b\066\uff7b\067\uff7b\070\uff7b\001\002" +
                            "\000\100\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027" +
                            "\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034\uff7d\035\uff7d" +
                            "\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044" +
                            "\uff7d\045\uff7d\047\uff7d\050\uff7d\053\uff7d\055\uff7d\056\uff7d" +
                            "\060\uff7d\061\uff7d\064\uff7d\066\uff7d\067\uff7d\070\uff7d\001" +
                            "\002\000\032\021\062\046\045\051\044\052\063\062\043" +
                            "\064\160\065\064\071\074\072\072\073\060\074\070\075" +
                            "\020\001\002\000\100\022\uff7c\023\uff7c\024\uff7c\025\uff7c" +
                            "\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\034" +
                            "\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c" +
                            "\043\uff7c\044\uff7c\045\uff7c\047\uff7c\050\uff7c\053\uff7c\055" +
                            "\uff7c\056\uff7c\060\uff7c\061\uff7c\064\uff7c\066\uff7c\067\uff7c" +
                            "\070\uff7c\001\002\000\004\075\147\001\002\000\100\022" +
                            "\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a" +
                            "\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037" +
                            "\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a" +
                            "\047\uff7a\050\uff7a\053\uff7a\055\uff7a\056\uff7a\060\uff7a\061" +
                            "\uff7a\064\uff7a\066\uff7a\067\uff7a\070\uff7a\001\002\000\006" +
                            "\055\152\070\153\001\002\000\004\053\150\001\002\000" +
                            "\030\021\062\046\045\051\044\052\063\062\043\065\064" +
                            "\071\074\072\072\073\060\074\070\075\020\001\002\000" +
                            "\010\050\102\055\uff76\070\uff76\001\002\000\004\075\154" +
                            "\001\002\000\100\022\uff77\023\uff77\024\uff77\025\uff77\026" +
                            "\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77" +
                            "\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043" +
                            "\uff77\044\uff77\045\uff77\047\uff77\050\uff77\053\uff77\055\uff77" +
                            "\056\uff77\060\uff77\061\uff77\064\uff77\066\uff77\067\uff77\070" +
                            "\uff77\001\002\000\004\053\155\001\002\000\030\021\062" +
                            "\046\045\051\044\052\063\062\043\065\064\071\074\072" +
                            "\072\073\060\074\070\075\020\001\002\000\010\050\102" +
                            "\055\uff75\070\uff75\001\002\000\012\050\102\055\uff70\064" +
                            "\uff70\066\uff70\001\002\000\100\022\uff79\023\uff79\024\uff79" +
                            "\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\033" +
                            "\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041\uff79" +
                            "\042\uff79\043\uff79\044\uff79\045\uff79\047\uff79\050\uff79\053" +
                            "\uff79\055\uff79\056\uff79\060\uff79\061\uff79\064\uff79\066\uff79" +
                            "\067\uff79\070\uff79\001\002\000\006\055\162\064\163\001" +
                            "\002\000\030\021\062\046\045\051\044\052\063\062\043" +
                            "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
                            "\002\000\100\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78" +
                            "\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035" +
                            "\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78" +
                            "\044\uff78\045\uff78\047\uff78\050\uff78\053\uff78\055\uff78\056" +
                            "\uff78\060\uff78\061\uff78\064\uff78\066\uff78\067\uff78\070\uff78" +
                            "\001\002\000\012\050\102\055\uff6f\064\uff6f\066\uff6f\001" +
                            "\002\000\106\003\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
                            "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
                            "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
                            "\043\uffba\044\uffba\045\uffba\047\uffba\050\uffba\052\uffba\053" +
                            "\uffba\055\uffba\056\uffba\060\uffba\061\uffba\064\uffba\066\uffba" +
                            "\067\uffba\070\uffba\075\uffba\001\002\000\034\003\171\021" +
                            "\062\046\045\051\044\052\063\062\043\065\064\066\167" +
                            "\071\074\072\072\073\060\074\070\075\020\001\002\000" +
                            "\100\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83" +
                            "\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83\036" +
                            "\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
                            "\045\uff83\047\uff83\050\uff83\053\uff83\055\uff83\056\uff83\060" +
                            "\uff83\061\uff83\064\uff83\066\uff83\067\uff83\070\uff83\001\002" +
                            "\000\006\055\162\066\173\001\002\000\004\066\172\001" +
                            "\002\000\100\022\uff82\023\uff82\024\uff82\025\uff82\026\uff82" +
                            "\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035" +
                            "\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82" +
                            "\044\uff82\045\uff82\047\uff82\050\uff82\053\uff82\055\uff82\056" +
                            "\uff82\060\uff82\061\uff82\064\uff82\066\uff82\067\uff82\070\uff82" +
                            "\001\002\000\100\022\uff84\023\uff84\024\uff84\025\uff84\026" +
                            "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84" +
                            "\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043" +
                            "\uff84\044\uff84\045\uff84\047\uff84\050\uff84\053\uff84\055\uff84" +
                            "\056\uff84\060\uff84\061\uff84\064\uff84\066\uff84\067\uff84\070" +
                            "\uff84\001\002\000\004\053\177\001\002\000\006\055\176" +
                            "\070\uffae\001\002\000\010\003\uffab\070\uffad\075\uffab\001" +
                            "\002\000\030\021\062\046\045\051\044\052\063\062\043" +
                            "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
                            "\002\000\012\050\102\055\uffeb\056\uffeb\060\uffeb\001\002" +
                            "\000\006\003\206\075\035\001\002\000\016\003\204\004" +
                            "\016\005\021\013\025\014\014\075\020\001\002\000\010" +
                            "\052\165\055\uffaa\070\uffaa\001\002\000\006\055\uffa9\070" +
                            "\uffa9\001\002\000\010\055\ufff0\056\ufff0\060\ufff0\001\002" +
                            "\000\012\053\177\055\uffef\056\uffef\060\uffef\001\002\000" +
                            "\106\003\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
                            "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
                            "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1" +
                            "\044\uffb1\045\uffb1\047\uffb1\050\uffb1\052\uffb1\053\uffb1\055" +
                            "\uffb1\056\uffb1\060\uffb1\061\uffb1\064\uffb1\066\uffb1\067\uffb1" +
                            "\070\uffb1\075\uffb1\001\002\000\004\053\215\001\002\000" +
                            "\004\053\212\001\002\000\016\003\214\004\016\005\021" +
                            "\013\025\014\014\075\020\001\002\000\006\052\165\056" +
                            "\ufff7\001\002\000\004\056\ufff5\001\002\000\014\004\016" +
                            "\005\021\013\025\014\014\075\020\001\002\000\006\052" +
                            "\165\056\ufff6\001\002\000\006\055\201\056\ufff2\001\002" +
                            "\000\004\075\221\001\002\000\114\003\uff6e\022\uff6e\023" +
                            "\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e" +
                            "\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\037\uff6e\040" +
                            "\uff6e\041\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\047\uff6e" +
                            "\050\uff6e\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\060" +
                            "\uff6e\061\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e" +
                            "\070\uff6e\075\uff6e\001\002\000\024\002\ufffa\003\ufffa\004" +
                            "\ufffa\005\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\075\ufffa" +
                            "\001\002\000\016\003\225\004\016\005\021\013\025\014" +
                            "\014\075\020\001\002\000\006\052\165\055\231\001\002" +
                            "\000\004\055\226\001\002\000\004\071\227\001\002\000" +
                            "\004\066\230\001\002\000\106\003\uffb7\022\uffb7\023\uffb7" +
                            "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
                            "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
                            "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\050" +
                            "\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7" +
                            "\064\uffb7\066\uffb7\067\uffb7\070\uffb7\075\uffb7\001\002\000" +
                            "\004\071\232\001\002\000\004\066\233\001\002\000\106" +
                            "\003\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
                            "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
                            "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
                            "\uffb9\045\uffb9\047\uffb9\050\uffb9\052\uffb9\053\uffb9\055\uffb9" +
                            "\056\uffb9\060\uffb9\061\uffb9\064\uffb9\066\uffb9\067\uffb9\070" +
                            "\uffb9\075\uffb9\001\002\000\004\065\u0103\001\002\000\004" +
                            "\065\236\001\002\000\012\003\240\051\237\066\uffe3\075" +
                            "\244\001\002\000\004\075\u0100\001\002\000\004\066\373" +
                            "\001\002\000\006\061\371\066\uffe2\001\002\000\004\066" +
                            "\247\001\002\000\006\061\uffe1\066\uffe1\001\002\000\004" +
                            "\060\245\001\002\000\014\004\016\005\021\013\025\014" +
                            "\014\075\020\001\002\000\010\052\165\061\uffdf\066\uffdf" +
                            "\001\002\000\006\061\250\067\251\001\002\000\016\003" +
                            "\366\004\016\005\021\013\025\014\014\075\020\001\002" +
                            "\000\052\003\265\004\016\005\021\006\253\010\262\011" +
                            "\270\013\025\014\014\016\261\021\062\046\045\051\044" +
                            "\052\063\062\043\065\064\071\074\072\072\073\060\074" +
                            "\070\075\020\001\002\000\024\002\uffea\003\uffea\004\uffea" +
                            "\005\uffea\012\uffea\013\uffea\014\uffea\015\uffea\075\uffea\001" +
                            "\002\000\032\003\350\021\062\046\045\051\044\052\063" +
                            "\062\043\065\064\071\074\072\072\073\060\074\070\075" +
                            "\020\001\002\000\054\003\uffd6\004\uffd6\005\uffd6\006\uffd6" +
                            "\010\uffd6\011\uffd6\013\uffd6\014\uffd6\016\uffd6\021\uffd6\046" +
                            "\uffd6\051\uffd6\052\uffd6\062\uffd6\065\uffd6\070\uffd6\071\uffd6" +
                            "\072\uffd6\073\uffd6\074\uffd6\075\uffd6\001\002\000\004\056" +
                            "\346\001\002\000\062\022\uff86\023\uff86\024\uff86\025\uff86" +
                            "\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034" +
                            "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86" +
                            "\043\uff86\044\uff86\045\uff86\047\uff86\050\uff86\053\uff86\056" +
                            "\345\001\002\000\004\056\344\001\002\000\054\003\265" +
                            "\004\016\005\021\006\253\010\262\011\270\013\025\014" +
                            "\014\016\261\021\062\046\045\051\044\052\063\062\043" +
                            "\065\064\070\342\071\074\072\072\073\060\074\070\075" +
                            "\020\001\002\000\032\003\341\021\062\046\045\051\044" +
                            "\052\063\062\043\065\064\071\074\072\072\073\060\074" +
                            "\070\075\020\001\002\000\032\003\335\021\062\046\045" +
                            "\051\044\052\063\062\043\065\064\071\074\072\072\073" +
                            "\060\074\070\075\020\001\002\000\004\056\333\001\002" +
                            "\000\054\003\uffdc\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011" +
                            "\uffdc\013\uffdc\014\uffdc\016\uffdc\021\uffdc\046\uffdc\051\uffdc" +
                            "\052\uffdc\062\uffdc\065\uffdc\070\uffdc\071\uffdc\072\uffdc\073" +
                            "\uffdc\074\uffdc\075\uffdc\001\002\000\010\003\174\053\331" +
                            "\075\035\001\002\000\054\003\uffd7\004\uffd7\005\uffd7\006" +
                            "\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\016\uffd7\021\uffd7" +
                            "\046\uffd7\051\uffd7\052\uffd7\062\uffd7\065\uffd7\070\uffd7\071" +
                            "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\001\002\000\074" +
                            "\003\uffb4\022\uff71\023\uff71\024\uff71\025\uff71\026\uff71\027" +
                            "\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71" +
                            "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044" +
                            "\uff71\045\uff71\047\uff71\050\uff71\052\uffb4\053\uff71\054\uff71" +
                            "\063\uff71\065\166\075\uffb4\001\002\000\006\003\307\075" +
                            "\310\001\002\000\026\022\302\023\275\024\272\025\273" +
                            "\026\277\027\300\030\303\031\274\050\102\053\276\001" +
                            "\002\000\030\021\uffce\046\uffce\051\uffce\052\uffce\062\uffce" +
                            "\065\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\001" +
                            "\002\000\030\021\uffcd\046\uffcd\051\uffcd\052\uffcd\062\uffcd" +
                            "\065\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\001" +
                            "\002\000\030\021\uffc9\046\uffc9\051\uffc9\052\uffc9\062\uffc9" +
                            "\065\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\001" +
                            "\002\000\030\021\uffcf\046\uffcf\051\uffcf\052\uffcf\062\uffcf" +
                            "\065\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\001" +
                            "\002\000\032\003\306\021\062\046\045\051\044\052\063" +
                            "\062\043\065\064\071\074\072\072\073\060\074\070\075" +
                            "\020\001\002\000\030\021\uffcc\046\uffcc\051\uffcc\052\uffcc" +
                            "\062\uffcc\065\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075" +
                            "\uffcc\001\002\000\030\021\uffcb\046\uffcb\051\uffcb\052\uffcb" +
                            "\062\uffcb\065\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
                            "\uffcb\001\002\000\030\021\062\046\045\051\044\052\063" +
                            "\062\043\065\064\071\074\072\072\073\060\074\070\075" +
                            "\020\001\002\000\030\021\uffd0\046\uffd0\051\uffd0\052\uffd0" +
                            "\062\uffd0\065\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
                            "\uffd0\001\002\000\030\021\uffca\046\uffca\051\uffca\052\uffca" +
                            "\062\uffca\065\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075" +
                            "\uffca\001\002\000\006\050\102\056\uffd3\001\002\000\006" +
                            "\050\102\056\uffd4\001\002\000\004\056\uffd1\001\002\000" +
                            "\004\053\324\001\002\000\004\053\311\001\002\000\032" +
                            "\003\313\021\062\046\045\051\044\052\063\062\043\065" +
                            "\064\071\074\072\072\073\060\074\070\075\020\001\002" +
                            "\000\006\050\102\061\317\001\002\000\004\061\314\001" +
                            "\002\000\030\021\062\046\045\051\044\052\063\062\043" +
                            "\065\064\071\074\072\072\073\060\074\070\075\020\001" +
                            "\002\000\006\050\102\067\251\001\002\000\054\003\uffbe" +
                            "\004\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe\013\uffbe\014" +
                            "\uffbe\016\uffbe\021\uffbe\046\uffbe\051\uffbe\052\uffbe\062\uffbe" +
                            "\065\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075" +
                            "\uffbe\001\002\000\032\003\321\021\062\046\045\051\044" +
                            "\052\063\062\043\065\064\071\074\072\072\073\060\074" +
                            "\070\075\020\001\002\000\006\050\102\067\251\001\002" +
                            "\000\004\067\251\001\002\000\054\003\uffbd\004\uffbd\005" +
                            "\uffbd\006\uffbd\010\uffbd\011\uffbd\013\uffbd\014\uffbd\016\uffbd" +
                            "\021\uffbd\046\uffbd\051\uffbd\052\uffbd\062\uffbd\065\uffbd\070" +
                            "\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\001\002" +
                            "\000\054\003\uffc1\004\uffc1\005\uffc1\006\uffc1\010\uffc1\011" +
                            "\uffc1\013\uffc1\014\uffc1\016\uffc1\021\uffc1\046\uffc1\051\uffc1" +
                            "\052\uffc1\062\uffc1\065\uffc1\070\uffc1\071\uffc1\072\uffc1\073" +
                            "\uffc1\074\uffc1\075\uffc1\001\002\000\030\021\062\046\045" +
                            "\051\044\052\063\062\043\065\064\071\074\072\072\073" +
                            "\060\074\070\075\020\001\002\000\006\050\102\061\326" +
                            "\001\002\000\030\021\062\046\045\051\044\052\063\062" +
                            "\043\065\064\071\074\072\072\073\060\074\070\075\020" +
                            "\001\002\000\006\050\102\067\251\001\002\000\054\003" +
                            "\uffbf\004\uffbf\005\uffbf\006\uffbf\010\uffbf\011\uffbf\013\uffbf" +
                            "\014\uffbf\016\uffbf\021\uffbf\046\uffbf\051\uffbf\052\uffbf\062" +
                            "\uffbf\065\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf" +
                            "\075\uffbf\001\002\000\030\021\062\046\045\051\044\052" +
                            "\063\062\043\065\064\071\074\072\072\073\060\074\070" +
                            "\075\020\001\002\000\006\050\102\056\uffd2\001\002\000" +
                            "\054\003\uffd5\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5" +
                            "\013\uffd5\014\uffd5\016\uffd5\021\uffd5\046\uffd5\051\uffd5\052" +
                            "\uffd5\062\uffd5\065\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5" +
                            "\074\uffd5\075\uffd5\001\002\000\006\050\102\067\251\001" +
                            "\002\000\004\067\251\001\002\000\054\003\uffc0\004\uffc0" +
                            "\005\uffc0\006\uffc0\010\uffc0\011\uffc0\013\uffc0\014\uffc0\016" +
                            "\uffc0\021\uffc0\046\uffc0\051\uffc0\052\uffc0\062\uffc0\065\uffc0" +
                            "\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\001" +
                            "\002\000\054\003\uffc2\004\uffc2\005\uffc2\006\uffc2\010\uffc2" +
                            "\011\uffc2\013\uffc2\014\uffc2\016\uffc2\021\uffc2\046\uffc2\051" +
                            "\uffc2\052\uffc2\062\uffc2\065\uffc2\070\uffc2\071\uffc2\072\uffc2" +
                            "\073\uffc2\074\uffc2\075\uffc2\001\002\000\006\050\102\056" +
                            "\uffbc\001\002\000\004\056\uffbb\001\002\000\064\002\uffdd" +
                            "\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
                            "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\021\uffdd" +
                            "\046\uffdd\051\uffdd\052\uffdd\062\uffdd\065\uffdd\070\uffdd\071" +
                            "\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\001\002\000\054" +
                            "\003\uffdb\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\013" +
                            "\uffdb\014\uffdb\016\uffdb\021\uffdb\046\uffdb\051\uffdb\052\uffdb" +
                            "\062\uffdb\065\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
                            "\uffdb\075\uffdb\001\002\000\054\003\uffda\004\uffda\005\uffda" +
                            "\006\uffda\010\uffda\011\uffda\013\uffda\014\uffda\016\uffda\021" +
                            "\uffda\046\uffda\051\uffda\052\uffda\062\uffda\065\uffda\070\uffda" +
                            "\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\001\002\000" +
                            "\054\003\uffd8\004\uffd8\005\uffd8\006\uffd8\010\uffd8\011\uffd8" +
                            "\013\uffd8\014\uffd8\016\uffd8\021\uffd8\046\uffd8\051\uffd8\052" +
                            "\uffd8\062\uffd8\065\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8" +
                            "\074\uffd8\075\uffd8\001\002\000\054\003\uffd9\004\uffd9\005" +
                            "\uffd9\006\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\016\uffd9" +
                            "\021\uffd9\046\uffd9\051\uffd9\052\uffd9\062\uffd9\065\uffd9\070" +
                            "\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\001\002" +
                            "\000\006\050\102\067\251\001\002\000\004\067\251\001" +
                            "\002\000\056\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\353" +
                            "\010\uffc6\011\uffc6\013\uffc6\014\uffc6\016\uffc6\021\uffc6\046" +
                            "\uffc6\051\uffc6\052\uffc6\062\uffc6\065\uffc6\070\uffc6\071\uffc6" +
                            "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\001\002\000\054\003" +
                            "\uffc7\004\uffc7\005\uffc7\006\uffc7\010\uffc7\011\uffc7\013\uffc7" +
                            "\014\uffc7\016\uffc7\021\uffc7\046\uffc7\051\uffc7\052\uffc7\062" +
                            "\uffc7\065\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
                            "\075\uffc7\001\002\000\034\003\356\021\062\046\045\051" +
                            "\044\052\063\062\043\065\064\067\251\071\074\072\072" +
                            "\073\060\074\070\075\020\001\002\000\054\003\uffc5\004" +
                            "\uffc5\005\uffc5\006\uffc5\010\uffc5\011\uffc5\013\uffc5\014\uffc5" +
                            "\016\uffc5\021\uffc5\046\uffc5\051\uffc5\052\uffc5\062\uffc5\065" +
                            "\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5" +
                            "\001\002\000\006\050\102\067\251\001\002\000\004\067" +
                            "\251\001\002\000\056\003\uffc6\004\uffc6\005\uffc6\006\uffc6" +
                            "\007\353\010\uffc6\011\uffc6\013\uffc6\014\uffc6\016\uffc6\021" +
                            "\uffc6\046\uffc6\051\uffc6\052\uffc6\062\uffc6\065\uffc6\070\uffc6" +
                            "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\001\002\000" +
                            "\054\003\uffc3\004\uffc3\005\uffc3\006\uffc3\010\uffc3\011\uffc3" +
                            "\013\uffc3\014\uffc3\016\uffc3\021\uffc3\046\uffc3\051\uffc3\052" +
                            "\uffc3\062\uffc3\065\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
                            "\074\uffc3\075\uffc3\001\002\000\056\003\uffc6\004\uffc6\005" +
                            "\uffc6\006\uffc6\007\353\010\uffc6\011\uffc6\013\uffc6\014\uffc6" +
                            "\016\uffc6\021\uffc6\046\uffc6\051\uffc6\052\uffc6\062\uffc6\065" +
                            "\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6" +
                            "\001\002\000\054\003\uffc4\004\uffc4\005\uffc4\006\uffc4\010" +
                            "\uffc4\011\uffc4\013\uffc4\014\uffc4\016\uffc4\021\uffc4\046\uffc4" +
                            "\051\uffc4\052\uffc4\062\uffc4\065\uffc4\070\uffc4\071\uffc4\072" +
                            "\uffc4\073\uffc4\074\uffc4\075\uffc4\001\002\000\056\003\uffc6" +
                            "\004\uffc6\005\uffc6\006\uffc6\007\353\010\uffc6\011\uffc6\013" +
                            "\uffc6\014\uffc6\016\uffc6\021\uffc6\046\uffc6\051\uffc6\052\uffc6" +
                            "\062\uffc6\065\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074" +
                            "\uffc6\075\uffc6\001\002\000\054\003\uffc8\004\uffc8\005\uffc8" +
                            "\006\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\016\uffc8\021" +
                            "\uffc8\046\uffc8\051\uffc8\052\uffc8\062\uffc8\065\uffc8\070\uffc8" +
                            "\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\001\002\000" +
                            "\006\052\165\067\251\001\002\000\004\067\251\001\002" +
                            "\000\024\002\uffe4\003\uffe4\004\uffe4\005\uffe4\012\uffe4\013" +
                            "\uffe4\014\uffe4\015\uffe4\075\uffe4\001\002\000\024\002\uffe9" +
                            "\003\uffe9\004\uffe9\005\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
                            "\uffe9\075\uffe9\001\002\000\006\051\237\075\244\001\002" +
                            "\000\006\061\uffe0\066\uffe0\001\002\000\006\061\374\067" +
                            "\251\001\002\000\014\004\016\005\021\013\025\014\014" +
                            "\075\020\001\002\000\024\002\uffe6\003\uffe6\004\uffe6\005" +
                            "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\075\uffe6\001\002" +
                            "\000\006\052\165\067\251\001\002\000\024\002\uffe5\003" +
                            "\uffe5\004\uffe5\005\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
                            "\075\uffe5\001\002\000\004\060\u0101\001\002\000\014\004" +
                            "\016\005\021\013\025\014\014\075\020\001\002\000\010" +
                            "\052\165\061\uffde\066\uffde\001\002\000\010\051\237\066" +
                            "\uffe3\075\244\001\002\000\004\066\u0105\001\002\000\006" +
                            "\061\u0106\067\251\001\002\000\014\004\016\005\021\013" +
                            "\025\014\014\075\020\001\002\000\024\002\uffe8\003\uffe8" +
                            "\004\uffe8\005\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\075" +
                            "\uffe8\001\002\000\006\052\165\067\251\001\002\000\024" +
                            "\002\uffe7\003\uffe7\004\uffe7\005\uffe7\012\uffe7\013\uffe7\014" +
                            "\uffe7\015\uffe7\075\uffe7\001\002\000\006\053\177\056\ufff3" +
                            "\001\002\000\006\055\201\056\ufff4\001\002\000\004\020" +
                            "\u0110\001\002\000\004\020\u010e\001\002\000\004\075\u010f" +
                            "\001\002\000\026\002\ufffd\003\ufffd\004\ufffd\005\ufffd\012" +
                            "\ufffd\013\ufffd\014\ufffd\015\ufffd\017\ufffd\075\ufffd\001\002" +
                            "\000\006\003\u0111\075\u0112\001\002\000\026\002\ufffc\003" +
                            "\ufffc\004\ufffc\005\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
                            "\017\ufffc\075\ufffc\001\002\000\026\002\uffff\003\uffff\004" +
                            "\uffff\005\uffff\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff" +
                            "\075\uffff\001\002\000\004\002\000\001\002"});
    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\u0111\000\006\002\003\003\004\001\001\000\002\001" +
                            "\001\000\004\004\006\001\001\000\002\001\001\000\020" +
                            "\005\025\010\014\011\007\026\011\027\016\030\010\063" +
                            "\021\001\001\000\002\001\001\000\002\001\001\000\006" +
                            "\006\030\007\u010a\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\006\006\030\007\216\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
                            "\030\007\032\031\036\032\033\033\035\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
                            "\030\007\032\033\174\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\042\025\072\034\051\035\060\036\056\037\055" +
                            "\040\054\041\053\042\050\043\047\044\046\045\045\046" +
                            "\070\055\066\056\065\057\074\063\052\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\054\127\001" +
                            "\001\000\004\053\120\001\001\000\004\052\114\001\001" +
                            "\000\004\051\106\001\001\000\002\001\001\000\002\001" +
                            "\001\000\016\026\137\027\016\030\010\060\140\061\142" +
                            "\063\021\001\001\000\002\001\001\000\042\025\072\034" +
                            "\135\035\060\036\056\037\055\040\054\041\053\042\050" +
                            "\043\047\044\046\045\045\046\070\055\066\056\065\057" +
                            "\074\063\052\001\001\000\002\001\001\000\020\025\072" +
                            "\044\134\045\045\046\070\056\065\057\074\063\052\001" +
                            "\001\000\024\025\072\043\133\044\046\045\045\046\070" +
                            "\055\066\056\065\057\074\063\052\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\042\025\072\034" +
                            "\100\035\060\036\056\037\055\040\054\041\053\042\050" +
                            "\043\047\044\046\045\045\046\070\055\066\056\065\057" +
                            "\074\063\052\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\040\025\072\035\103\036\056\037" +
                            "\055\040\054\041\053\042\050\043\047\044\046\045\045" +
                            "\046\070\055\066\056\065\057\074\063\052\001\001\000" +
                            "\002\001\001\000\002\001\001\000\036\025\072\036\105" +
                            "\037\055\040\054\041\053\042\050\043\047\044\046\045" +
                            "\045\046\070\055\066\056\065\057\074\063\052\001\001" +
                            "\000\004\051\106\001\001\000\034\025\072\037\111\040" +
                            "\054\041\053\042\050\043\047\044\046\045\045\046\070" +
                            "\055\066\056\065\057\074\063\052\001\001\000\002\001" +
                            "\001\000\002\001\001\000\004\052\114\001\001\000\002" +
                            "\001\001\000\002\001\001\000\032\025\072\040\117\041" +
                            "\053\042\050\043\047\044\046\045\045\046\070\055\066" +
                            "\056\065\057\074\063\052\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\053\120\001\001\000\030\025\072" +
                            "\041\123\042\050\043\047\044\046\045\045\046\070\055" +
                            "\066\056\065\057\074\063\052\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\054\127\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\026\025\072" +
                            "\042\130\043\047\044\046\045\045\046\070\055\066\056" +
                            "\065\057\074\063\052\001\001\000\002\001\001\000\024" +
                            "\025\072\043\132\044\046\045\045\046\070\055\066\056" +
                            "\065\057\074\063\052\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\044\025\072" +
                            "\034\156\035\060\036\056\037\055\040\054\041\053\042" +
                            "\050\043\047\044\046\045\045\046\070\047\160\055\066" +
                            "\056\065\057\074\063\052\001\001\000\002\001\001\000" +
                            "\004\062\145\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\042\025\072\034\150\035\060\036" +
                            "\056\037\055\040\054\041\053\042\050\043\047\044\046" +
                            "\045\045\046\070\055\066\056\065\057\074\063\052\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\042\025\072\034\155\035\060\036" +
                            "\056\037\055\040\054\041\053\042\050\043\047\044\046" +
                            "\045\045\046\070\055\066\056\065\057\074\063\052\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\042\025\072\034\163\035\060\036" +
                            "\056\037\055\040\054\041\053\042\050\043\047\044\046" +
                            "\045\045\046\070\055\066\056\065\057\074\063\052\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\044\025\072\034\156\035\060\036\056\037\055\040" +
                            "\054\041\053\042\050\043\047\044\046\045\045\046\070" +
                            "\047\167\055\066\056\065\057\074\063\052\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\042\025\072\034\177\035\060" +
                            "\036\056\037\055\040\054\041\053\042\050\043\047\044" +
                            "\046\045\045\046\070\055\066\056\065\057\074\063\052" +
                            "\001\001\000\002\001\001\000\004\006\204\001\001\000" +
                            "\012\026\202\027\016\030\010\063\021\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\012\026\212\027\016\030\010\063\021\001\001\000" +
                            "\002\001\001\000\002\001\001\000\012\026\215\027\016" +
                            "\030\010\063\021\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\012\026\223\027\016\030\010\063\021\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\010\012\241\013\240\014\242\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\012\026\245\027" +
                            "\016\030\010\063\021\001\001\000\002\001\001\000\004" +
                            "\015\251\001\001\000\012\026\364\027\016\030\010\063" +
                            "\021\001\001\000\066\010\256\016\257\017\263\020\254" +
                            "\021\265\022\253\023\262\025\255\026\011\027\016\030" +
                            "\010\034\270\035\060\036\056\037\055\040\054\041\053" +
                            "\042\050\043\047\044\046\045\045\046\070\055\066\056" +
                            "\065\057\074\063\266\001\001\000\002\001\001\000\042" +
                            "\025\072\034\346\035\060\036\056\037\055\040\054\041" +
                            "\053\042\050\043\047\044\046\045\045\046\070\055\066" +
                            "\056\065\057\074\063\052\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
                            "\010\256\017\342\020\254\021\265\022\253\023\262\025" +
                            "\255\026\011\027\016\030\010\034\270\035\060\036\056" +
                            "\037\055\040\054\041\053\042\050\043\047\044\046\045" +
                            "\045\046\070\055\066\056\065\057\074\063\266\001\001" +
                            "\000\042\025\072\034\337\035\060\036\056\037\055\040" +
                            "\054\041\053\042\050\043\047\044\046\045\045\046\070" +
                            "\055\066\056\065\057\074\063\052\001\001\000\042\025" +
                            "\072\034\333\035\060\036\056\037\055\040\054\041\053" +
                            "\042\050\043\047\044\046\045\045\046\070\055\066\056" +
                            "\065\057\074\063\052\001\001\000\002\001\001\000\002" +
                            "\001\001\000\006\006\030\007\216\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\004\050\300" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\042\025\072\034\304\035\060" +
                            "\036\056\037\055\040\054\041\053\042\050\043\047\044" +
                            "\046\045\045\046\070\055\066\056\065\057\074\063\052" +
                            "\001\001\000\002\001\001\000\002\001\001\000\042\025" +
                            "\072\034\303\035\060\036\056\037\055\040\054\041\053" +
                            "\042\050\043\047\044\046\045\045\046\070\055\066\056" +
                            "\065\057\074\063\052\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\042\025\072" +
                            "\034\311\035\060\036\056\037\055\040\054\041\053\042" +
                            "\050\043\047\044\046\045\045\046\070\055\066\056\065" +
                            "\057\074\063\052\001\001\000\002\001\001\000\002\001" +
                            "\001\000\042\025\072\034\314\035\060\036\056\037\055" +
                            "\040\054\041\053\042\050\043\047\044\046\045\045\046" +
                            "\070\055\066\056\065\057\074\063\052\001\001\000\004" +
                            "\015\315\001\001\000\002\001\001\000\042\025\072\034" +
                            "\317\035\060\036\056\037\055\040\054\041\053\042\050" +
                            "\043\047\044\046\045\045\046\070\055\066\056\065\057" +
                            "\074\063\052\001\001\000\004\015\322\001\001\000\004" +
                            "\015\321\001\001\000\002\001\001\000\002\001\001\000" +
                            "\042\025\072\034\324\035\060\036\056\037\055\040\054" +
                            "\041\053\042\050\043\047\044\046\045\045\046\070\055" +
                            "\066\056\065\057\074\063\052\001\001\000\002\001\001" +
                            "\000\042\025\072\034\326\035\060\036\056\037\055\040" +
                            "\054\041\053\042\050\043\047\044\046\045\045\046\070" +
                            "\055\066\056\065\057\074\063\052\001\001\000\004\015" +
                            "\327\001\001\000\002\001\001\000\042\025\072\034\331" +
                            "\035\060\036\056\037\055\040\054\041\053\042\050\043" +
                            "\047\044\046\045\045\046\070\055\066\056\065\057\074" +
                            "\063\052\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\015\336\001\001\000\004\015\335\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\004\015\362\001" +
                            "\001\000\004\015\350\001\001\000\004\024\351\001\001" +
                            "\000\002\001\001\000\044\015\353\025\072\034\354\035" +
                            "\060\036\056\037\055\040\054\041\053\042\050\043\047" +
                            "\044\046\045\045\046\070\055\066\056\065\057\074\063" +
                            "\052\001\001\000\002\001\001\000\004\015\360\001\001" +
                            "\000\004\015\356\001\001\000\004\024\357\001\001\000" +
                            "\002\001\001\000\004\024\361\001\001\000\002\001\001" +
                            "\000\004\024\363\001\001\000\002\001\001\000\004\015" +
                            "\367\001\001\000\004\015\366\001\001\000\002\001\001" +
                            "\000\002\001\001\000\004\014\371\001\001\000\002\001" +
                            "\001\000\004\015\374\001\001\000\012\026\375\027\016" +
                            "\030\010\063\021\001\001\000\002\001\001\000\004\015" +
                            "\376\001\001\000\002\001\001\000\002\001\001\000\012" +
                            "\026\u0101\027\016\030\010\063\021\001\001\000\002\001" +
                            "\001\000\010\012\u0103\013\240\014\242\001\001\000\002" +
                            "\001\001\000\004\015\u0106\001\001\000\012\026\u0107\027" +
                            "\016\030\010\063\021\001\001\000\002\001\001\000\004" +
                            "\015\u0108\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001"});
    /**
     * Instance of action encapsulation class.
     */
    protected CUP$AnalizadorSintacticoJaja$actions action_obj;
    private GestionErroresJaja errores;

    /**
     * Default constructor.
     */
    public AnalizadorSintacticoJaja() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 1;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    /**
     * User initialization code.
     */
    public void user_init() throws java.lang.Exception {

        errores = new GestionErroresJaja();
        AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
        alex.fijaGestionErrores(errores);

    }

    /**
     * Scan to get the next Symbol.
     */
    public java_cup.runtime.Symbol scan()
            throws java.lang.Exception {
        return getScanner().next_token();
    }

    public void reportError(String error) {
        System.err.print("Error: ");
        System.err.println(error);
    }

    public void reportError(int fila, String error) {
        System.err.print("Error fila: " + fila + ": ");
        System.err.println(error);
    }

    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

    public Symbol iniciarParseo() throws Exception {
        Symbol res = this.parse();
        if (errores.hayErrores()) {
            throw new Exception("El programa contiene errores. Abortando compilación...");
        }
        return res;
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$AnalizadorSintacticoJaja$actions {
    private final AnalizadorSintacticoJaja parser;

    /**
     * Constructor
     */
    CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
        this.parser = parser;
    }

    /**
     * Method 0 with the actual generated action code for actions 0 to 300.
     */
    public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
            int CUP$AnalizadorSintacticoJaja$act_num,
            java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
            java.util.Stack CUP$AnalizadorSintacticoJaja$stack,
            int CUP$AnalizadorSintacticoJaja$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

        /* select the action based on the action number */
        switch (CUP$AnalizadorSintacticoJaja$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // Programa ::= Lista_Imports Lista_Declaraciones
            {
                Programa RESULT = null;
                List<Import> lImp = (List<Import>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Declaracion> lDecl = (List<Declaracion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new Programa(lImp, lDecl);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Programa", 0, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // $START ::= Programa EOF
            {
                Object RESULT = null;
                Programa start_val = (Programa) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = start_val;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
            }
            /* ACCEPT */
            CUP$AnalizadorSintacticoJaja$parser.done_parsing();
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // Lista_Imports ::= Lista_Imports TRAFICAR RUTA COMO IDEN
            {
                List<Import> RESULT = null;
                List<Import> lImp = (List<Import>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                String ruta = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                lImp.add(new Import(ruta, id));
                RESULT = lImp;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports", 1, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // Lista_Imports ::=
            {
                List<Import> RESULT = null;
                RESULT = new ArrayList<Import>();
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports", 1, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // Lista_Imports ::= Lista_Imports TRAFICAR error COMO IDEN
            {
                List<Import> RESULT = null;
                List<Import> lImp = (List<Import>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                TokenValue t = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(t.fila(), "Error al importar un archivo, ruta incorrecta. Usa \"ruta/relativa/a/fichero.jaja\".");
                RESULT = lImp;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports", 1, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // Lista_Imports ::= Lista_Imports TRAFICAR RUTA COMO error
            {
                List<Import> RESULT = null;
                List<Import> lImp = (List<Import>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                String ruta = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                TokenValue c = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(c.fila(), "Error al importar un archivo, identificador incorrecto.");
                RESULT = lImp;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports", 1, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion_Alias PUNTOCOMA
            {
                List<Declaracion> RESULT = null;
                List<Declaracion> lDecl = (List<Declaracion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                DeclaracionAlias dAlias = (DeclaracionAlias) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                lDecl.add(dAlias);
                RESULT = lDecl;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones", 2, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Variables PUNTOCOMA
            {
                List<Declaracion> RESULT = null;
                List<Declaracion> lDecl = (List<Declaracion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                DeclaracionVariables dGen = (DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                lDecl.addAll(dGen.array());
                RESULT = lDecl;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones", 2, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Funcion
            {
                List<Declaracion> RESULT = null;
                List<Declaracion> lDecl = (List<Declaracion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                DeclaracionFun dGen = (DeclaracionFun) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                lDecl.add(dGen);
                RESULT = lDecl;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones", 2, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // Lista_Declaraciones ::=
            {
                List<Declaracion> RESULT = null;
                RESULT = new ArrayList<Declaracion>();
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones", 2, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION Tipo
            {
                DeclaracionAlias RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionAlias(id, t);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias", 3, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // Declaracion_Alias ::= INCOGNITO error ASIGNACION Tipo
            {
                DeclaracionAlias RESULT = null;
                TokenValue i = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(i.fila(), "Declaración de alias incorrecta. Identificador no válido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias", 3, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION error
            {
                DeclaracionAlias RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                TokenValue a = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(a.fila(), "Declaración de alias incorrecta. Tipo no válido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias", 3, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Decl_Variables ::= Tipo Lista_Decl_Asignaciones
            {
                DeclaracionVariables RESULT = null;
                Tipo tipo = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<DeclaracionVar> lVar = (List<DeclaracionVar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionVariables(tipo, lVar);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables", 6, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // Decl_Variables ::= Tipo error
            {
                DeclaracionVariables RESULT = null;
                Tipo tipo = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError("Declaración de variables incorrecta. Lista de variables no válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables", 6, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // Decl_Variables ::= error Lista_Decl_Asignaciones
            {
                DeclaracionVariables RESULT = null;
                List<DeclaracionVar> lVar = (List<DeclaracionVar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError("Declaración de variables incorrecta. Tipo no válido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables", 6, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // Lista_Decl_Asignaciones ::= Decl_Asig
            {
                List<DeclaracionVar> RESULT = null;
                DeclaracionVar var = (DeclaracionVar) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                List<DeclaracionVar> lista_var = new ArrayList<DeclaracionVar>();
                lista_var.add(var);
                RESULT = lista_var;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones", 5, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA Decl_Asig
            {
                List<DeclaracionVar> RESULT = null;
                List<DeclaracionVar> lDecl = (List<DeclaracionVar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                DeclaracionVar var = (DeclaracionVar) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                lDecl.add(var);
                RESULT = lDecl;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones", 5, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA error
            {
                List<DeclaracionVar> RESULT = null;
                List<DeclaracionVar> lDecl = (List<DeclaracionVar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                TokenValue c = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(c.fila(), "Declaración de variable incorrecta. Identificador no válido.");
                RESULT = lDecl;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones", 5, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // Decl_Asig ::= IDEN
            {
                DeclaracionVar RESULT = null;
                String var = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionVar(var);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig", 4, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // Decl_Asig ::= IDEN ASIGNACION Expresion
            {
                DeclaracionVar RESULT = null;
                String var = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionVar(var, expr);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig", 4, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // Decl_Asig ::= IDEN ASIGNACION error
            {
                DeclaracionVar RESULT = null;
                String var = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                TokenValue a = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(a.fila(), "Declaración de variable incorrecta. Expresión no válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig", 4, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // Decl_Asig ::= error ASIGNACION Expresion
            {
                DeclaracionVar RESULT = null;
                TokenValue a = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(a.fila(), "Declaración de variable incorrecta. Identificador no válido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig", 4, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE Bloque_Anidado
            {
                DeclaracionFun RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                List<DeclaracionPar> lPar = (List<DeclaracionPar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionFun(id, lPar, bloq);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion", 7, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado
            {
                DeclaracionFun RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 6)).value;
                List<DeclaracionPar> lPar = (List<DeclaracionPar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionFun(id, lPar, bloq, t);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion", 7, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // Decl_Funcion ::= DIVER error PAP Lista_Parametros PCIERRE Bloque_Anidado
            {
                DeclaracionFun RESULT = null;
                TokenValue d = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 5)).value;
                List<DeclaracionPar> lPar = (List<DeclaracionPar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(d.fila(), "Declaración de función incorrecta. Identificador no válido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion", 7, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // Decl_Funcion ::= DIVER error PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado
            {
                DeclaracionFun RESULT = null;
                TokenValue d = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 7)).value;
                List<DeclaracionPar> lPar = (List<DeclaracionPar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(d.fila(), "Declaración de función incorrecta. Identificador no válido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion", 7, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // Decl_Funcion ::= DIVER IDEN PAP error PCIERRE Bloque_Anidado
            {
                DeclaracionFun RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                TokenValue p = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(p.fila(), "Declaración de función incorrecta. Parámetros no válidos.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion", 7, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // Decl_Funcion ::= DIVER IDEN PAP error PCIERRE FLECHA Tipo Bloque_Anidado
            {
                DeclaracionFun RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 6)).value;
                TokenValue p = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 5)).value;
                Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(p.fila(), "Declaración de función incorrecta. Parámetros no válidos.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion", 7, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA error Bloque_Anidado
            {
                DeclaracionFun RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 6)).value;
                List<DeclaracionPar> lPar = (List<DeclaracionPar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                TokenValue f = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(f.fila(), "Declaración de función incorrecta. Tipo de retorno no válido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion", 7, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // Lista_Parametros ::=
            {
                List<DeclaracionPar> RESULT = null;
                RESULT = new ArrayList<DeclaracionPar>();
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros", 8, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // Lista_Parametros ::= Lista_Parametros2
            {
                List<DeclaracionPar> RESULT = null;
                List<DeclaracionPar> lPar = (List<DeclaracionPar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = lPar;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros", 8, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // Lista_Parametros2 ::= Parametro
            {
                List<DeclaracionPar> RESULT = null;
                DeclaracionPar par = (DeclaracionPar) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                List<DeclaracionPar> lista_par = new ArrayList<DeclaracionPar>();
                lista_par.add(par);
                RESULT = lista_par;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2", 9, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // Lista_Parametros2 ::= Lista_Parametros2 FLECHA Parametro
            {
                List<DeclaracionPar> RESULT = null;
                List<DeclaracionPar> lPar = (List<DeclaracionPar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                DeclaracionPar par = (DeclaracionPar) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                lPar.add(par);
                RESULT = lPar;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2", 9, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // Parametro ::= IDEN DOSPUNTOS Tipo
            {
                DeclaracionPar RESULT = null;
                String var = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionPar(var, t, false);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro", 10, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // Parametro ::= DIRECCION IDEN DOSPUNTOS Tipo
            {
                DeclaracionPar RESULT = null;
                String var = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionPar(var, t, true);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro", 10, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // Bloque_Anidado ::= LLAP Lista_Instrucciones LLCIERRE
            {
                List<Instruccion> RESULT = null;
                List<Instruccion> LIns = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = LIns;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bloque_Anidado", 11, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // Lista_Instrucciones ::= Instruccion
            {
                List<Instruccion> RESULT = null;
                Instruccion ins = (Instruccion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
                lInstrucciones.add(ins);
                RESULT = lInstrucciones;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones", 12, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion
            {
                List<Instruccion> RESULT = null;
                List<Instruccion> lInstrucciones = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Instruccion ins = (Instruccion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                lInstrucciones.add(ins);
                RESULT = lInstrucciones;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones", 12, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // Instruccion ::= Decl_Variables PUNTOCOMA
            {
                Instruccion RESULT = null;
                DeclaracionVariables decl = (DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = decl;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion", 13, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // Instruccion ::= Asignacion PUNTOCOMA
            {
                Instruccion RESULT = null;
                Instruccion as = (Instruccion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = as;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion", 13, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // Instruccion ::= Llamada_Fun PUNTOCOMA
            {
                Instruccion RESULT = null;
                Llamada llamada = (Llamada) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = llamada;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion", 13, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // Instruccion ::= Condicional
            {
                Instruccion RESULT = null;
                Instruccion cond = (Instruccion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = cond;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion", 13, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // Instruccion ::= Bucle
            {
                Instruccion RESULT = null;
                Instruccion buc = (Instruccion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = buc;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion", 13, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // Instruccion ::= Inst_Return PUNTOCOMA
            {
                Instruccion RESULT = null;
                Instruccion iRet = (Instruccion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = iRet;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion", 13, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // Asignacion ::= Expresion ASIGNACION Expresion
            {
                Instruccion RESULT = null;
                Expresion expr1 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Expresion expr2 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new InsAsig(expr1, expr2);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion", 14, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // Asignacion ::= Expresion OpBin Expresion
            {
                Instruccion RESULT = null;
                Expresion expr1 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                OperadorBin.Operadores op = (OperadorBin.Operadores) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion expr2 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new InsAsig(expr1, new OperadorBin(op, expr1, expr2));
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion", 14, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // Asignacion ::= error ASIGNACION Expresion
            {
                Instruccion RESULT = null;
                TokenValue a = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion expr2 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(a.fila(), "Asignación incorrecta. La expresión izquierda no es válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion", 14, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // Asignacion ::= Expresion ASIGNACION error
            {
                Instruccion RESULT = null;
                Expresion expr1 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                TokenValue a = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(a.fila(), "Asignación incorrecta. La expresión derecha no es válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion", 14, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // OpBin ::= POTASIG
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.POT;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin", 38, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // OpBin ::= MULASIG
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.MUL;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin", 38, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // OpBin ::= DIVASIG
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.DIV;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin", 38, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // OpBin ::= MODASIG
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.MOD;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin", 38, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // OpBin ::= SUMAASIG
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.SUMA;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin", 38, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // OpBin ::= RESTAASIG
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.RESTA;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin", 38, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // OpBin ::= CONJASIG
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.CONJ;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin", 38, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // OpBin ::= DISYASIG
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.DISY;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin", 38, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // Condicional ::= SI Expresion Bloque_Anidado Cond_Else
            {
                Instruccion RESULT = null;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                InsCond cond_else = (InsCond) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new InsCond(expr, bloq, cond_else, true);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional", 15, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // Condicional ::= SI error Bloque_Anidado Cond_Else
            {
                Instruccion RESULT = null;
                TokenValue s = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                InsCond cond_else = (InsCond) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(s.fila(), "Condicional incorrecto. La condición no es válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional", 15, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // Cond_Else ::=
            {
                InsCond RESULT = null;
                RESULT = new InsCond();
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else", 18, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // Cond_Else ::= SINO Bloque_Anidado
            {
                InsCond RESULT = null;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new InsCond(bloq);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else", 18, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // Cond_Else ::= SINO Expresion Bloque_Anidado Cond_Else
            {
                InsCond RESULT = null;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                InsCond cond_else = (InsCond) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new InsCond(expr, bloq, cond_else, false);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else", 18, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // Cond_Else ::= SINO error Bloque_Anidado Cond_Else
            {
                InsCond RESULT = null;
                TokenValue s = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                InsCond cond_else = (InsCond) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(s.fila(), "Condicional incorrecto. La condición no es válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else", 18, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // Bucle ::= MIENTRAS Expresion Bloque_Anidado
            {
                Instruccion RESULT = null;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new InsBucleWhile(expr, bloq);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle", 16, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // Bucle ::= PARA IDEN ASIGNACION Expresion FLECHA Expresion Bloque_Anidado
            {
                Instruccion RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 5)).value;
                Expresion exprIni = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                Expresion exprFin = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new InsBucleFor(id, exprIni, exprFin, bloq);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle", 16, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // Bucle ::= MIENTRAS error Bloque_Anidado
            {
                Instruccion RESULT = null;
                TokenValue m = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(m.fila(), "Bucle incorrecto. La condición no es válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle", 16, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // Bucle ::= PARA error ASIGNACION Expresion FLECHA Expresion Bloque_Anidado
            {
                Instruccion RESULT = null;
                TokenValue p = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 6)).value;
                Expresion exprIni = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                Expresion exprFin = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(p.fila(), "Bucle incorrecto. Identificador de iterador no válido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle", 16, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // Bucle ::= PARA IDEN ASIGNACION error FLECHA Expresion Bloque_Anidado
            {
                Instruccion RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 5)).value;
                TokenValue a = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                Expresion exprFin = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(a.fila(), "Bucle incorrecto. Expresión de inicio no válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle", 16, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // Bucle ::= PARA IDEN ASIGNACION Expresion FLECHA error Bloque_Anidado
            {
                Instruccion RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 5)).value;
                Expresion exprIni = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                TokenValue f = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                List<Instruccion> bloq = (List<Instruccion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                parser.reportError(f.fila(), "Bucle incorrecto. Expresión final no válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle", 16, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // Inst_Return ::= DEVUELVE Expresion
            {
                Instruccion RESULT = null;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new InsReturn(expr);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return", 17, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // Inst_Return ::= DEVUELVE error
            {
                Instruccion RESULT = null;
                TokenValue d = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(d.fila(), "Retorno incorrecto. Expresión de devolución no válida.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return", 17, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // Tipo ::= Tipo PUNTERO
            {
                Tipo RESULT = null;
                Tipo tipo = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = new TipoPuntero(tipo);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo", 20, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // Tipo ::= VECTOR PAP Tipo COMA ENTERO PCIERRE
            {
                Tipo RESULT = null;
                Tipo tipo = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                Entero ent = (Entero) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = new TipoArray(tipo, ent);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo", 20, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // Tipo ::= T
            {
                Tipo RESULT = null;
                Tipo tipo = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = tipo;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo", 20, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // Tipo ::= VECTOR PAP error COMA ENTERO PCIERRE
            {
                Tipo RESULT = null;
                TokenValue p = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                Entero ent = (Entero) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(p.fila(), "Tipo vector inválido. Tipo de los elementos incorrecto.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo", 20, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // T ::= ENT
            {
                Tipo RESULT = null;
                RESULT = TipoEntero.instancia();
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T", 21, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // T ::= BIN
            {
                Tipo RESULT = null;
                RESULT = TipoBinario.instancia();
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T", 21, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // T ::= Identificador
            {
                Tipo RESULT = null;
                Identificador id = (Identificador) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new TipoAlias(id);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T", 21, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // T ::= Tipo_Reg
            {
                Tipo RESULT = null;
                Tipo t_reg = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = t_reg;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T", 21, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // Tipo_Reg ::= REGISTRO LLAP Matriz_Atributos LLCIERRE
            {
                Tipo RESULT = null;
                List<Declaracion> mAtrib = (List<Declaracion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = new TipoRegistro(mAtrib);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg", 22, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // Tipo_Reg ::= REGISTRO LLAP error LLCIERRE
            {
                Tipo RESULT = null;
                TokenValue l = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                parser.reportError(l.fila(), "Tipo registro incorrecto. Atributos inválidos.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg", 22, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // Matriz_Atributos ::= Lista_Atributos
            {
                List<Declaracion> RESULT = null;
                DeclaracionVariables lAtr = (DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                List<Declaracion> mAtr = new ArrayList<Declaracion>();
                mAtr.addAll(lAtr.array());
                RESULT = mAtr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos", 23, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // Matriz_Atributos ::= Lista_Atributos COMA
            {
                List<Declaracion> RESULT = null;
                DeclaracionVariables lAtr = (DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Declaracion> mAtr = new ArrayList<Declaracion>();
                mAtr.addAll(lAtr.array());
                RESULT = mAtr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos", 23, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos
            {
                List<Declaracion> RESULT = null;
                List<Declaracion> mAtr = (List<Declaracion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                DeclaracionVariables lAtr = (DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                mAtr.addAll(lAtr.array());
                RESULT = mAtr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos", 23, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos COMA
            {
                List<Declaracion> RESULT = null;
                List<Declaracion> mAtr = (List<Declaracion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                DeclaracionVariables lAtr = (DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                mAtr.addAll(lAtr.array());
                RESULT = mAtr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos", 23, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // Matriz_Atributos2 ::= Lista_Atributos COMA
            {
                List<Declaracion> RESULT = null;
                DeclaracionVariables lAtr = (DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                List<Declaracion> mAtr = new ArrayList<Declaracion>();
                mAtr.addAll(lAtr.array());
                RESULT = mAtr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2", 24, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // Matriz_Atributos2 ::= Matriz_Atributos2 Lista_Atributos COMA
            {
                List<Declaracion> RESULT = null;
                List<Declaracion> mAtr = (List<Declaracion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                DeclaracionVariables lAtr = (DeclaracionVariables) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                mAtr.addAll(lAtr.array());
                RESULT = mAtr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2", 24, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS Tipo
            {
                DeclaracionVariables RESULT = null;
                List<DeclaracionVar> lVar = (List<DeclaracionVar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Tipo tipo = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new DeclaracionVariables(tipo, lVar);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos", 25, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS error
            {
                DeclaracionVariables RESULT = null;
                List<DeclaracionVar> lVar = (List<DeclaracionVar>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                TokenValue d = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(d.fila(), "Lista de atributos incorrecta. Tipo inválido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos", 25, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // Expresion ::= Expresion DISY E1
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorBin(OperadorBin.Operadores.DISY, izquierda, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion", 26, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // Expresion ::= E1
            {
                Expresion RESULT = null;
                Expresion e1 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e1;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion", 26, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // E1 ::= E1 CONJ E2
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorBin(OperadorBin.Operadores.CONJ, izquierda, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1", 27, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // E1 ::= E2
            {
                Expresion RESULT = null;
                Expresion e2 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e2;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1", 27, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // E2 ::= E2 OP2 E3
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                OperadorBin.Operadores op2 = (OperadorBin.Operadores) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorBin(op2, izquierda, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2", 28, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // E2 ::= E3
            {
                Expresion RESULT = null;
                Expresion e3 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e3;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2", 28, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // OP2 ::= DESIGUAL
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.DESIGUAL;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2", 39, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // OP2 ::= IGUAL
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.IGUAL;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2", 39, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // E3 ::= E3 OP3 E4
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                OperadorBin.Operadores op3 = (OperadorBin.Operadores) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorBin(op3, izquierda, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3", 29, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // E3 ::= E4
            {
                Expresion RESULT = null;
                Expresion e4 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e4;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3", 29, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // OP3 ::= MAYOR
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.MAYOR;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3", 40, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // OP3 ::= MENOR
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.MENOR;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3", 40, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // OP3 ::= MAYORIGUAL
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.MAYORIGUAL;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3", 40, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // OP3 ::= MENORIGUAL
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.MENORIGUAL;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3", 40, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // E4 ::= E4 OP4 E5
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                OperadorBin.Operadores op4 = (OperadorBin.Operadores) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorBin(op4, izquierda, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4", 30, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // E4 ::= E5
            {
                Expresion RESULT = null;
                Expresion e5 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e5;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4", 30, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // OP4 ::= SUMA
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.SUMA;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4", 41, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // OP4 ::= RESTA
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.RESTA;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4", 41, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // E5 ::= E5 OP5 E6
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                OperadorBin.Operadores op5 = (OperadorBin.Operadores) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorBin(op5, izquierda, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5", 31, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // E5 ::= E6
            {
                Expresion RESULT = null;
                Expresion e6 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e6;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5", 31, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // OP5 ::= MUL
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.MUL;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5", 42, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // OP5 ::= DIV
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.DIV;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5", 42, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // OP5 ::= MOD
            {
                OperadorBin.Operadores RESULT = null;
                RESULT = OperadorBin.Operadores.MOD;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5", 42, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // E6 ::= E6 POT E7
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorBin(OperadorBin.Operadores.POT, izquierda, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6", 32, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // E6 ::= E7
            {
                Expresion RESULT = null;
                Expresion e7 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e7;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6", 32, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // E7 ::= OP7 E7
            {
                Expresion RESULT = null;
                OperadorUn.Operadores op7 = (OperadorUn.Operadores) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorUn(op7, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7", 33, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // E7 ::= E8
            {
                Expresion RESULT = null;
                Expresion e8 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e8;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7", 33, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // OP7 ::= DIRECCION
            {
                OperadorUn.Operadores RESULT = null;
                RESULT = OperadorUn.Operadores.DIRECCION;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7", 43, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // OP7 ::= PUNTERO
            {
                OperadorUn.Operadores RESULT = null;
                RESULT = OperadorUn.Operadores.PUNTERO;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7", 43, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // E8 ::= OP8 E8
            {
                Expresion RESULT = null;
                OperadorUn.Operadores op8 = (OperadorUn.Operadores) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new OperadorUn(op8, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8", 34, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // E8 ::= E9
            {
                Expresion RESULT = null;
                Expresion e9 = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e9;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8", 34, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // OP8 ::= NEG
            {
                OperadorUn.Operadores RESULT = null;
                RESULT = OperadorUn.Operadores.NEG;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8", 44, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // OP8 ::= MENOS
            {
                OperadorUn.Operadores RESULT = null;
                RESULT = OperadorUn.Operadores.MENOS;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8", 44, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // E9 ::= Literal
            {
                Expresion RESULT = null;
                Literal e = (Literal) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9", 35, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // E9 ::= Llamada_Fun
            {
                Expresion RESULT = null;
                Llamada ll = (Llamada) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = ll;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9", 35, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // E9 ::= E10
            {
                Expresion RESULT = null;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = expr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9", 35, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // Llamada_Fun ::= Identificador PAP Lista_Expresiones PCIERRE
            {
                Llamada RESULT = null;
                Identificador izquierda = (Identificador) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                List<Expresion> lExpr = (List<Expresion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = new Llamada(izquierda, lExpr);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun", 19, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // Llamada_Fun ::= Identificador PAP PCIERRE
            {
                Llamada RESULT = null;
                Identificador izquierda = (Identificador) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                RESULT = new Llamada(izquierda, new ArrayList<Expresion>());
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun", 19, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // Llamada_Fun ::= Identificador PAP error PCIERRE
            {
                Llamada RESULT = null;
                Identificador izquierda = (Identificador) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                TokenValue p = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                parser.reportError(p.fila(), "Llamada a función incorrecta. Argumentos inválidos.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun", 19, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // Literal ::= ENTERO
            {
                Literal RESULT = null;
                Entero e = (Entero) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = e;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal", 45, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // Literal ::= FACTO
            {
                Literal RESULT = null;
                True t = (True) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = t;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal", 45, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // Literal ::= FAKE
            {
                Literal RESULT = null;
                False f = (False) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = f;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal", 45, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // Literal ::= NULO
            {
                Literal RESULT = null;
                Nulo n = (Nulo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = n;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal", 45, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // Literal ::= NUEVO Array_Literal
            {
                Literal RESULT = null;
                LiteralArray aL = (LiteralArray) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = aL;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal", 45, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // Literal ::= NUEVO Struct_Literal
            {
                Literal RESULT = null;
                LiteralStruct sL = (LiteralStruct) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = sL;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal", 45, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // Literal ::= NUEVO Tipo
            {
                Literal RESULT = null;
                Tipo t = (Tipo) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new LiteralMemoria(t);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal", 45, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // Literal ::= NUEVO error
            {
                Literal RESULT = null;
                TokenValue n = (TokenValue) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                parser.reportError(n.fila(), "Literal inválido.");
                RESULT = null;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal", 45, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // Array_Literal ::= CAP CCIERRE
            {
                LiteralArray RESULT = null;
                RESULT = new LiteralArray(new ArrayList<Expresion>());
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal", 46, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // Array_Literal ::= CAP Lista_Expresiones CCIERRE
            {
                LiteralArray RESULT = null;
                List<Expresion> lExpr = (List<Expresion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = new LiteralArray(lExpr);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal", 46, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // Struct_Literal ::= LLAP Lista_Asig_Atributos LLCIERRE
            {
                LiteralStruct RESULT = null;
                Map<String, Expresion> lAtr = (Map<String, Expresion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = new LiteralStruct(lAtr);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Struct_Literal", 47, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // Lista_Asig_Atributos ::= IDEN ASIGNACION Expresion
            {
                Map<String, Expresion> RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                Map<String, Expresion> valores = new HashMap<String, Expresion>();
                valores.put(id, expr);
                RESULT = valores;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos", 48, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // Lista_Asig_Atributos ::= Lista_Asig_Atributos COMA IDEN ASIGNACION Expresion
            {
                Map<String, Expresion> RESULT = null;
                Map<String, Expresion> lAtr = (Map<String, Expresion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 4)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                lAtr.put(id, expr);
                RESULT = lAtr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos", 48, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 141: // E10 ::= E10 CAP Expresion CCIERRE
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 3)).value;
                Expresion derecha = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = new AccesoArray(izquierda, derecha);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10", 36, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 142: // E10 ::= E10 PUNTO IDEN
            {
                Expresion RESULT = null;
                Expresion izquierda = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new AccesoStruct(izquierda, id);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10", 36, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 143: // E10 ::= PAP Expresion PCIERRE
            {
                Expresion RESULT = null;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 1)).value;
                RESULT = expr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10", 36, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 144: // E10 ::= Identificador
            {
                Expresion RESULT = null;
                Identificador id = (Identificador) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = id;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10", 36, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 145: // Lista_Expresiones ::= Expresion
            {
                List<Expresion> RESULT = null;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                List<Expresion> lExpr = new ArrayList<Expresion>();
                lExpr.add(expr);
                RESULT = lExpr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones", 37, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 146: // Lista_Expresiones ::= Lista_Expresiones COMA Expresion
            {
                List<Expresion> RESULT = null;
                List<Expresion> lExpr = (List<Expresion>) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                Expresion expr = (Expresion) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                lExpr.add(expr);
                RESULT = lExpr;
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones", 37, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 147: // Identificador ::= IDEN CUATROPUNTOS IDEN
            {
                Identificador RESULT = null;
                String lib = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top - 2)).value;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new Identificador(id, lib);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador", 49, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 148: // Identificador ::= IDEN
            {
                Identificador RESULT = null;
                String id = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
                RESULT = new Identificador(id);
                CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador", 49, RESULT);
            }
            return CUP$AnalizadorSintacticoJaja$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number " + CUP$AnalizadorSintacticoJaja$act_num + "found in internal parse table");

        }
    } /* end of method */

    /**
     * Method splitting the generated action code into several parts.
     */
    public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
            int CUP$AnalizadorSintacticoJaja$act_num,
            java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
            java.util.Stack CUP$AnalizadorSintacticoJaja$stack,
            int CUP$AnalizadorSintacticoJaja$top)
            throws java.lang.Exception {
        return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                CUP$AnalizadorSintacticoJaja$act_num,
                CUP$AnalizadorSintacticoJaja$parser,
                CUP$AnalizadorSintacticoJaja$stack,
                CUP$AnalizadorSintacticoJaja$top);
    }
}

