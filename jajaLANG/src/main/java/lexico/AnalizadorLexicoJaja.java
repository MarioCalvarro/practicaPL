// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/lexico/ALexJaja.l

package main.java.lexico;

import main.java.errors.GestionErroresJaja;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class AnalizadorLexicoJaja implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file.
     */
    public static final int YYEOF = -1;
    // Lexical states.
    public static final int YYINITIAL = 0;
    /**
     * Initial size of the lookahead buffer.
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };
    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700" +
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00" +
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500" +
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00" +
                    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300" +
                    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700" +
                    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00" +
                    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100" +
                    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900" +
                    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000" +
                    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700" +
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00" +
                    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00" +
                    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600" +
                    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00" +
                    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00" +
                    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500" +
                    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00" +
                    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00" +
                    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200" +
                    "\u0b06\u1f00\1\u2700\u02fe\u1f00";
    /**
     * Top-level table for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();
    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\10\0\2\1\1\2\2\0\1\1\22\0\1\1\1\3" +
                    "\1\0\1\4\1\0\1\5\1\6\1\0\1\7\1\10" +
                    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\11\20" +
                    "\1\21\1\22\1\23\1\24\1\25\1\0\1\26\32\27" +
                    "\1\30\1\0\1\31\1\32\1\27\1\0\1\33\1\34" +
                    "\1\35\1\36\1\37\1\40\1\41\1\27\1\42\1\43" +
                    "\1\44\1\45\1\46\1\47\1\50\1\51\1\27\1\52" +
                    "\1\53\1\54\1\55\1\56\4\27\1\57\1\60\1\61" +
                    "\54\0\1\62\12\0\1\62\4\0\1\62\5\0\27\62" +
                    "\1\0\37\62\1\0\u01ca\62\4\0\14\62\16\0\5\62" +
                    "\7\0\1\62\1\0\1\62\21\0\165\62\1\0\2\62" +
                    "\2\0\4\62\1\0\1\62\6\0\1\62\1\0\3\62" +
                    "\1\0\1\62\1\0\24\62\1\0\123\62\1\0\213\62" +
                    "\1\0\255\62\1\0\46\62\2\0\1\62\6\0\51\62" +
                    "\10\0\55\62\1\0\1\62\1\0\2\62\1\0\2\62" +
                    "\1\0\1\62\10\0\33\62\4\0\4\62\35\0\13\62" +
                    "\5\0\112\62\4\0\146\62\1\0\10\62\2\0\12\62" +
                    "\1\0\23\62\2\0\1\62\20\0\73\62\2\0\145\62" +
                    "\16\0\66\62\4\0\1\62\2\0\1\62\2\0\56\62" +
                    "\22\0\34\62\4\0\13\62\65\0\25\62\1\0\10\62" +
                    "\25\0\17\62\1\0\201\62\2\0\12\62\1\0\23\62" +
                    "\1\0\10\62\2\0\2\62\2\0\26\62\1\0\7\62" +
                    "\1\0\1\62\3\0\4\62\2\0\11\62\2\0\2\62" +
                    "\2\0\4\62\10\0\1\62\4\0\2\62\1\0\5\62" +
                    "\2\0\14\62\12\0\1\62\1\0\1\62\2\0\3\62" +
                    "\1\0\6\62\4\0\2\62\2\0\26\62\1\0\7\62" +
                    "\1\0\2\62\1\0\2\62\1\0\2\62\2\0\1\62" +
                    "\1\0\5\62\4\0\2\62\2\0\3\62\3\0\1\62" +
                    "\7\0\4\62\1\0\1\62\7\0\20\62\13\0\3\62" +
                    "\1\0\11\62\1\0\3\62\1\0\26\62\1\0\7\62" +
                    "\1\0\2\62\1\0\5\62\2\0\12\62\1\0\3\62" +
                    "\1\0\3\62\2\0\1\62\17\0\4\62\2\0\12\62" +
                    "\11\0\7\62\1\0\3\62\1\0\10\62\2\0\2\62" +
                    "\2\0\26\62\1\0\7\62\1\0\2\62\1\0\5\62" +
                    "\2\0\11\62\2\0\2\62\2\0\3\62\10\0\2\62" +
                    "\4\0\2\62\1\0\5\62\2\0\12\62\1\0\1\62" +
                    "\20\0\2\62\1\0\6\62\3\0\3\62\1\0\4\62" +
                    "\3\0\2\62\1\0\1\62\1\0\2\62\3\0\2\62" +
                    "\3\0\3\62\3\0\14\62\4\0\5\62\3\0\3\62" +
                    "\1\0\4\62\2\0\1\62\6\0\1\62\16\0\12\62" +
                    "\20\0\15\62\1\0\3\62\1\0\27\62\1\0\20\62" +
                    "\3\0\10\62\1\0\3\62\1\0\4\62\7\0\2\62" +
                    "\1\0\3\62\5\0\4\62\2\0\12\62\20\0\4\62" +
                    "\1\0\10\62\1\0\3\62\1\0\27\62\1\0\12\62" +
                    "\1\0\5\62\2\0\11\62\1\0\3\62\1\0\4\62" +
                    "\7\0\2\62\7\0\1\62\1\0\4\62\2\0\12\62" +
                    "\1\0\2\62\15\0\4\62\1\0\10\62\1\0\3\62" +
                    "\1\0\63\62\1\0\3\62\1\0\5\62\5\0\4\62" +
                    "\7\0\5\62\2\0\12\62\12\0\6\62\2\0\2\62" +
                    "\1\0\22\62\3\0\30\62\1\0\11\62\1\0\1\62" +
                    "\2\0\7\62\3\0\1\62\4\0\6\62\1\0\1\62" +
                    "\1\0\10\62\6\0\12\62\2\0\2\62\15\0\72\62" +
                    "\5\0\17\62\1\0\12\62\47\0\2\62\1\0\1\62" +
                    "\1\0\5\62\1\0\30\62\1\0\1\62\1\0\27\62" +
                    "\2\0\5\62\1\0\1\62\1\0\6\62\2\0\12\62" +
                    "\2\0\4\62\40\0\1\62\27\0\2\62\6\0\12\62" +
                    "\13\0\1\62\1\0\1\62\1\0\1\62\4\0\12\62" +
                    "\1\0\44\62\4\0\24\62\1\0\22\62\1\0\44\62" +
                    "\11\0\1\62\71\0\112\62\6\0\116\62\2\0\46\62" +
                    "\1\0\1\62\5\0\1\62\2\0\53\62\1\0\115\62" +
                    "\1\0\4\62\2\0\7\62\1\0\1\62\1\0\4\62" +
                    "\2\0\51\62\1\0\4\62\2\0\41\62\1\0\4\62" +
                    "\2\0\7\62\1\0\1\62\1\0\4\62\2\0\17\62" +
                    "\1\0\71\62\1\0\4\62\2\0\103\62\2\0\3\62" +
                    "\40\0\20\62\20\0\126\62\2\0\6\62\3\0\u016c\62" +
                    "\2\0\21\62\1\0\32\62\5\0\113\62\3\0\13\62" +
                    "\7\0\15\62\1\0\7\62\13\0\25\62\13\0\24\62" +
                    "\14\0\15\62\1\0\3\62\1\0\2\62\14\0\124\62" +
                    "\3\0\1\62\4\0\2\62\2\0\12\62\41\0\3\62" +
                    "\2\0\12\62\6\0\131\62\7\0\53\62\5\0\106\62" +
                    "\12\0\37\62\1\0\14\62\4\0\14\62\12\0\50\62" +
                    "\2\0\5\62\13\0\54\62\4\0\32\62\6\0\12\62" +
                    "\46\0\34\62\4\0\77\62\1\0\35\62\2\0\13\62" +
                    "\6\0\12\62\15\0\1\62\10\0\17\62\101\0\114\62" +
                    "\4\0\12\62\21\0\11\62\14\0\164\62\14\0\70\62" +
                    "\10\0\12\62\3\0\61\62\2\0\11\62\7\0\53\62" +
                    "\2\0\3\62\20\0\3\62\1\0\47\62\5\0\372\62" +
                    "\1\0\33\62\2\0\6\62\2\0\46\62\2\0\6\62" +
                    "\2\0\10\62\1\0\1\62\1\0\1\62\1\0\1\62" +
                    "\1\0\37\62\2\0\65\62\1\0\7\62\1\0\1\62" +
                    "\3\0\3\62\1\0\7\62\3\0\4\62\2\0\6\62" +
                    "\4\0\15\62\5\0\3\62\1\0\7\62\102\0\2\62" +
                    "\23\0\1\62\34\0\1\62\15\0\1\62\20\0\15\62" +
                    "\63\0\41\62\21\0\1\62\4\0\1\62\2\0\12\62" +
                    "\1\0\1\62\3\0\5\62\6\0\1\62\1\0\1\62" +
                    "\1\0\1\62\1\0\4\62\1\0\13\62\2\0\4\62" +
                    "\5\0\5\62\4\0\1\62\21\0\51\62\u022d\0\64\62" +
                    "\26\0\57\62\1\0\57\62\1\0\205\62\6\0\11\62" +
                    "\14\0\46\62\1\0\1\62\5\0\1\62\2\0\70\62" +
                    "\7\0\1\62\17\0\30\62\11\0\7\62\1\0\7\62" +
                    "\1\0\7\62\1\0\7\62\1\0\7\62\1\0\7\62" +
                    "\1\0\7\62\1\0\7\62\1\0\40\62\57\0\1\62" +
                    "\325\0\3\62\31\0\17\62\1\0\5\62\2\0\5\62" +
                    "\4\0\126\62\2\0\2\62\2\0\3\62\1\0\132\62" +
                    "\1\0\4\62\5\0\53\62\1\0\136\62\21\0\33\62" +
                    "\65\0\306\62\112\0\360\62\20\0\215\62\103\0\56\62" +
                    "\2\0\15\62\3\0\34\62\24\0\63\62\1\0\12\62" +
                    "\1\0\163\62\45\0\11\62\2\0\147\62\2\0\65\62" +
                    "\2\0\5\62\60\0\61\62\30\0\64\62\14\0\106\62" +
                    "\12\0\12\62\6\0\30\62\3\0\1\62\1\0\61\62" +
                    "\2\0\44\62\14\0\35\62\3\0\101\62\16\0\13\62" +
                    "\6\0\37\62\1\0\67\62\11\0\16\62\2\0\12\62" +
                    "\6\0\27\62\3\0\111\62\30\0\3\62\2\0\20\62" +
                    "\2\0\5\62\12\0\6\62\2\0\6\62\2\0\6\62" +
                    "\11\0\7\62\1\0\7\62\1\0\53\62\1\0\14\62" +
                    "\10\0\173\62\1\0\2\62\2\0\12\62\6\0\244\62" +
                    "\14\0\27\62\4\0\61\62\4\0\156\62\2\0\152\62" +
                    "\46\0\7\62\14\0\5\62\5\0\14\62\1\0\15\62" +
                    "\1\0\5\62\1\0\1\62\1\0\2\62\1\0\2\62" +
                    "\1\0\154\62\41\0\153\62\22\0\100\62\2\0\66\62" +
                    "\50\0\14\62\4\0\20\62\20\0\20\62\3\0\2\62" +
                    "\30\0\3\62\40\0\5\62\1\0\207\62\23\0\12\62" +
                    "\7\0\32\62\4\0\1\62\1\0\32\62\13\0\131\62" +
                    "\3\0\6\62\2\0\6\62\2\0\6\62\2\0\3\62" +
                    "\43\0\14\62\1\0\32\62\1\0\23\62\1\0\2\62" +
                    "\1\0\17\62\2\0\16\62\42\0\173\62\105\0\65\62" +
                    "\210\0\1\62\202\0\35\62\3\0\61\62\17\0\1\62" +
                    "\37\0\40\62\15\0\36\62\5\0\53\62\5\0\36\62" +
                    "\2\0\44\62\4\0\10\62\1\0\5\62\52\0\236\62" +
                    "\2\0\12\62\6\0\44\62\4\0\44\62\4\0\50\62" +
                    "\10\0\64\62\234\0\67\62\11\0\26\62\12\0\10\62" +
                    "\230\0\6\62\2\0\1\62\1\0\54\62\1\0\2\62" +
                    "\3\0\1\62\2\0\27\62\12\0\27\62\11\0\37\62" +
                    "\101\0\23\62\1\0\2\62\12\0\26\62\12\0\32\62" +
                    "\106\0\70\62\6\0\2\62\100\0\4\62\1\0\2\62" +
                    "\5\0\10\62\1\0\3\62\1\0\35\62\2\0\3\62" +
                    "\4\0\1\62\40\0\35\62\3\0\35\62\43\0\10\62" +
                    "\1\0\36\62\31\0\66\62\12\0\26\62\12\0\23\62" +
                    "\15\0\22\62\156\0\111\62\67\0\63\62\15\0\63\62" +
                    "\15\0\50\62\10\0\12\62\306\0\35\62\12\0\1\62" +
                    "\10\0\41\62\217\0\27\62\11\0\107\62\37\0\12\62" +
                    "\17\0\74\62\25\0\31\62\7\0\12\62\6\0\65\62" +
                    "\1\0\12\62\4\0\3\62\11\0\44\62\2\0\1\62" +
                    "\11\0\105\62\4\0\4\62\3\0\13\62\1\0\1\62" +
                    "\43\0\22\62\1\0\45\62\6\0\1\62\101\0\7\62" +
                    "\1\0\1\62\1\0\4\62\1\0\17\62\1\0\12\62" +
                    "\7\0\73\62\5\0\12\62\6\0\4\62\1\0\10\62" +
                    "\2\0\2\62\2\0\26\62\1\0\7\62\1\0\2\62" +
                    "\1\0\5\62\1\0\12\62\2\0\2\62\2\0\3\62" +
                    "\2\0\1\62\6\0\1\62\5\0\7\62\2\0\7\62" +
                    "\3\0\5\62\213\0\113\62\5\0\12\62\4\0\2\62" +
                    "\40\0\106\62\1\0\1\62\10\0\12\62\246\0\66\62" +
                    "\2\0\11\62\27\0\6\62\42\0\101\62\3\0\1\62" +
                    "\13\0\12\62\46\0\71\62\7\0\12\62\66\0\33\62" +
                    "\2\0\17\62\4\0\12\62\306\0\73\62\145\0\112\62" +
                    "\25\0\1\62\240\0\10\62\2\0\56\62\2\0\10\62" +
                    "\1\0\2\62\33\0\77\62\10\0\1\62\10\0\112\62" +
                    "\3\0\1\62\42\0\71\62\7\0\11\62\1\0\55\62" +
                    "\1\0\11\62\17\0\12\62\30\0\36\62\2\0\26\62" +
                    "\1\0\16\62\111\0\7\62\1\0\2\62\1\0\54\62" +
                    "\3\0\1\62\1\0\2\62\1\0\11\62\10\0\12\62" +
                    "\6\0\6\62\1\0\2\62\1\0\45\62\1\0\2\62" +
                    "\1\0\6\62\7\0\12\62\u0136\0\27\62\11\0\232\62" +
                    "\146\0\157\62\21\0\304\62\274\0\57\62\321\0\107\62" +
                    "\271\0\71\62\7\0\37\62\1\0\12\62\146\0\36\62" +
                    "\2\0\5\62\13\0\67\62\11\0\4\62\14\0\12\62" +
                    "\11\0\25\62\5\0\23\62\260\0\100\62\200\0\113\62" +
                    "\4\0\71\62\7\0\21\62\100\0\2\62\1\0\1\62" +
                    "\34\0\370\62\10\0\363\62\15\0\37\62\61\0\3\62" +
                    "\21\0\4\62\10\0\u018c\62\4\0\153\62\5\0\15\62" +
                    "\3\0\11\62\7\0\12\62\3\0\2\62\306\0\5\62" +
                    "\3\0\6\62\10\0\10\62\2\0\7\62\36\0\4\62" +
                    "\224\0\3\62\273\0\125\62\1\0\107\62\1\0\2\62" +
                    "\2\0\1\62\2\0\2\62\2\0\4\62\1\0\14\62" +
                    "\1\0\1\62\1\0\7\62\1\0\101\62\1\0\4\62" +
                    "\2\0\10\62\1\0\7\62\1\0\34\62\1\0\4\62" +
                    "\1\0\5\62\1\0\1\62\3\0\7\62\1\0\u0154\62" +
                    "\2\0\31\62\1\0\31\62\1\0\37\62\1\0\31\62" +
                    "\1\0\37\62\1\0\31\62\1\0\37\62\1\0\31\62" +
                    "\1\0\37\62\1\0\31\62\1\0\10\62\2\0\151\62" +
                    "\4\0\62\62\10\0\1\62\16\0\1\62\26\0\5\62" +
                    "\1\0\17\62\120\0\7\62\1\0\21\62\2\0\7\62" +
                    "\1\0\2\62\1\0\5\62\325\0\55\62\3\0\16\62" +
                    "\2\0\12\62\4\0\1\62\u0171\0\72\62\6\0\305\62" +
                    "\13\0\7\62\51\0\114\62\4\0\12\62\246\0\4\62" +
                    "\1\0\33\62\1\0\2\62\1\0\1\62\2\0\1\62" +
                    "\1\0\12\62\1\0\4\62\1\0\1\62\1\0\1\62" +
                    "\6\0\1\62\4\0\1\62\1\0\1\62\1\0\1\62" +
                    "\1\0\3\62\1\0\2\62\1\0\1\62\2\0\1\62" +
                    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\1\62" +
                    "\1\0\2\62\1\0\1\62\2\0\4\62\1\0\7\62" +
                    "\1\0\4\62\1\0\4\62\1\0\1\62\1\0\12\62" +
                    "\1\0\21\62\5\0\3\62\1\0\5\62\1\0\21\62" +
                    "\164\0\32\62\6\0\32\62\6\0\32\62\166\0\327\62" +
                    "\51\0\65\62\13\0\336\62\2\0\u0182\62\16\0\u0131\62" +
                    "\37\0\36\62\342\0";
    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6" +
                    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16" +
                    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
                    "\1\27\1\30\14\25\1\31\1\1\1\32\1\1\1\33" +
                    "\1\0\1\34\1\35\1\36\1\37\1\40\3\0\1\41" +
                    "\1\42\1\0\1\2\1\43\1\44\1\45\1\46\1\47" +
                    "\1\50\13\25\1\51\1\25\1\52\1\53\3\0\1\54" +
                    "\3\25\1\55\12\25\2\0\1\2\1\56\3\25\1\57" +
                    "\3\25\1\60\1\61\1\25\1\62\1\25\2\0\1\25" +
                    "\1\63\1\64\2\25\1\65\2\25\1\0\1\66\4\25" +
                    "\1\67\1\0\4\25\1\0\1\70\1\25\1\71\1\72" +
                    "\1\73\1\74";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\63\0\63\0\146\0\231\0\314\0\377\0\63" +
                    "\0\63\0\u0132\0\u0165\0\63\0\u0198\0\63\0\u01cb\0\u01fe" +
                    "\0\u0231\0\u0264\0\63\0\u0297\0\u02ca\0\u02fd\0\63\0\u0330" +
                    "\0\63\0\63\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462" +
                    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\63" +
                    "\0\u05fa\0\63\0\u01fe\0\63\0\u062d\0\63\0\63\0\63" +
                    "\0\63\0\63\0\u01fe\0\u0660\0\u0693\0\63\0\63\0\u06c6" +
                    "\0\u06f9\0\63\0\63\0\63\0\63\0\63\0\63\0\u072c" +
                    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4" +
                    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\63\0\63\0\u09c3\0\u09f6" +
                    "\0\u0a29\0\u0330\0\u0a5c\0\u0a8f\0\u0ac2\0\u0330\0\u0af5\0\u0b28" +
                    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0" +
                    "\0\u0cf3\0\u0d26\0\u06c6\0\u0330\0\u0d59\0\u0d8c\0\u0dbf\0\u0330" +
                    "\0\u0df2\0\u0e25\0\u0e58\0\u0330\0\u0330\0\u0e8b\0\u0330\0\u0ebe" +
                    "\0\u0ef1\0\u0f24\0\u0f57\0\u0330\0\u0330\0\u0f8a\0\u0fbd\0\u0330" +
                    "\0\u0ff0\0\u1023\0\u1056\0\63\0\u1089\0\u10bc\0\u10ef\0\u1122" +
                    "\0\u0330\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u0330" +
                    "\0\u1287\0\u0330\0\u0330\0\63\0\u0330";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                    "\1\32\1\33\1\30\1\34\1\35\1\36\1\37\1\40" +
                    "\1\30\1\41\3\30\1\42\1\43\1\30\1\44\1\45" +
                    "\1\46\2\30\1\47\1\50\1\51\1\52\1\53\107\0" +
                    "\1\54\112\0\1\55\32\0\1\56\44\0\1\57\15\0" +
                    "\1\60\62\0\1\61\62\0\1\62\52\0\1\63\1\64" +
                    "\1\65\2\63\3\0\1\66\1\67\1\0\1\63\3\0" +
                    "\24\63\3\0\1\63\11\0\1\70\4\0\1\71\5\0" +
                    "\1\72\52\0\1\63\1\64\1\65\2\63\6\0\1\63" +
                    "\3\0\24\63\3\0\1\63\14\0\1\63\1\64\1\65" +
                    "\2\21\6\0\1\63\3\0\24\63\3\0\1\63\21\0" +
                    "\1\73\65\0\1\74\62\0\1\75\62\0\1\76\52\0" +
                    "\1\63\1\64\1\65\2\30\6\0\1\30\3\0\24\30" +
                    "\3\0\1\63\24\0\1\77\52\0\1\63\1\64\1\65" +
                    "\2\30\6\0\1\30\3\0\7\30\1\100\14\30\3\0" +
                    "\1\63\14\0\1\63\1\64\1\65\2\30\6\0\1\30" +
                    "\3\0\15\30\1\101\6\30\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\4\30\1\102" +
                    "\2\30\1\103\14\30\3\0\1\63\14\0\1\63\1\64" +
                    "\1\65\2\30\6\0\1\30\3\0\14\30\1\104\7\30" +
                    "\3\0\1\63\14\0\1\63\1\64\1\65\2\30\6\0" +
                    "\1\30\3\0\1\105\23\30\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\14\30\1\106" +
                    "\7\30\3\0\1\63\14\0\1\63\1\64\1\65\2\30" +
                    "\6\0\1\30\3\0\7\30\1\107\14\30\3\0\1\63" +
                    "\14\0\1\63\1\64\1\65\2\30\6\0\1\30\3\0" +
                    "\22\30\1\110\1\30\3\0\1\63\14\0\1\63\1\64" +
                    "\1\65\2\30\6\0\1\30\3\0\1\111\23\30\3\0" +
                    "\1\63\14\0\1\63\1\64\1\65\2\30\6\0\1\30" +
                    "\3\0\4\30\1\112\17\30\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\7\30\1\113" +
                    "\14\30\3\0\1\63\14\0\1\63\1\64\1\65\2\30" +
                    "\6\0\1\30\3\0\4\30\1\114\17\30\3\0\1\63" +
                    "\24\0\1\115\33\0\1\116\54\0\1\117\53\0\1\120" +
                    "\33\0\1\63\2\0\2\63\6\0\1\63\3\0\24\63" +
                    "\3\0\1\63\11\70\1\121\51\70\2\71\1\0\60\71" +
                    "\14\0\1\63\1\64\1\65\2\30\6\0\1\30\3\0" +
                    "\14\30\1\122\7\30\3\0\1\63\14\0\1\63\1\64" +
                    "\1\65\2\30\6\0\1\30\3\0\13\30\1\123\10\30" +
                    "\3\0\1\63\14\0\1\63\1\64\1\65\2\30\6\0" +
                    "\1\30\3\0\23\30\1\124\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\23\30\1\125" +
                    "\3\0\1\63\14\0\1\63\1\64\1\65\2\30\6\0" +
                    "\1\30\3\0\21\30\1\126\2\30\3\0\1\63\14\0" +
                    "\1\63\1\64\1\65\2\30\6\0\1\30\3\0\2\30" +
                    "\1\127\6\30\1\130\12\30\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\2\30\1\131" +
                    "\21\30\3\0\1\63\14\0\1\63\1\64\1\65\2\30" +
                    "\6\0\1\30\3\0\4\30\1\132\17\30\3\0\1\63" +
                    "\14\0\1\63\1\64\1\65\2\30\6\0\1\30\3\0" +
                    "\4\30\1\133\5\30\1\134\11\30\3\0\1\63\14\0" +
                    "\1\63\1\64\1\65\2\30\6\0\1\30\3\0\17\30" +
                    "\1\135\4\30\3\0\1\63\14\0\1\63\1\64\1\65" +
                    "\2\30\6\0\1\30\3\0\6\30\1\136\15\30\3\0" +
                    "\1\63\14\0\1\63\1\64\1\65\2\30\6\0\1\30" +
                    "\3\0\14\30\1\137\7\30\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\2\30\1\140" +
                    "\21\30\3\0\1\63\33\0\1\141\62\0\1\142\27\0" +
                    "\11\70\1\121\4\70\1\143\44\70\14\0\1\63\1\64" +
                    "\1\65\2\30\6\0\1\30\3\0\15\30\1\144\6\30" +
                    "\3\0\1\63\14\0\1\63\1\64\1\65\2\30\6\0" +
                    "\1\30\3\0\22\30\1\145\1\30\3\0\1\63\14\0" +
                    "\1\63\1\64\1\65\2\30\6\0\1\30\3\0\4\30" +
                    "\1\146\17\30\3\0\1\63\14\0\1\63\1\64\1\65" +
                    "\2\30\6\0\1\30\3\0\21\30\1\147\2\30\3\0" +
                    "\1\63\14\0\1\63\1\64\1\65\2\30\6\0\1\30" +
                    "\3\0\4\30\1\150\17\30\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\15\30\1\151" +
                    "\6\30\3\0\1\63\14\0\1\63\1\64\1\65\2\30" +
                    "\6\0\1\30\3\0\14\30\1\152\7\30\3\0\1\63" +
                    "\14\0\1\63\1\64\1\65\2\30\6\0\1\30\3\0" +
                    "\23\30\1\153\3\0\1\63\14\0\1\63\1\64\1\65" +
                    "\2\30\6\0\1\30\3\0\15\30\1\154\6\30\3\0" +
                    "\1\63\14\0\1\63\1\64\1\65\2\30\6\0\1\30" +
                    "\3\0\1\155\23\30\3\0\1\63\14\0\1\63\1\64" +
                    "\1\65\2\30\6\0\1\30\3\0\7\30\1\156\14\30" +
                    "\3\0\1\63\14\0\1\63\1\64\1\65\2\30\6\0" +
                    "\1\30\3\0\15\30\1\157\6\30\3\0\1\63\14\0" +
                    "\1\63\1\64\1\65\2\30\6\0\1\30\3\0\21\30" +
                    "\1\160\2\30\3\0\1\63\40\0\1\161\65\0\1\162" +
                    "\33\0\1\63\1\64\1\65\2\30\6\0\1\30\3\0" +
                    "\4\30\1\163\17\30\3\0\1\63\14\0\1\63\1\64" +
                    "\1\65\2\30\6\0\1\30\3\0\17\30\1\164\4\30" +
                    "\3\0\1\63\14\0\1\63\1\64\1\65\2\30\6\0" +
                    "\1\30\3\0\15\30\1\165\6\30\3\0\1\63\14\0" +
                    "\1\63\1\64\1\65\2\30\6\0\1\30\3\0\6\30" +
                    "\1\166\15\30\3\0\1\63\14\0\1\63\1\64\1\65" +
                    "\2\30\6\0\1\30\3\0\21\30\1\167\2\30\3\0" +
                    "\1\63\14\0\1\63\1\64\1\65\2\30\6\0\1\30" +
                    "\3\0\15\30\1\170\6\30\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\20\30\1\171" +
                    "\3\30\3\0\1\63\14\0\1\63\1\64\1\65\2\30" +
                    "\6\0\1\30\3\0\15\30\1\172\6\30\3\0\1\63" +
                    "\42\0\1\173\53\0\1\174\43\0\1\63\1\64\1\65" +
                    "\2\30\6\0\1\30\3\0\12\30\1\175\11\30\3\0" +
                    "\1\63\14\0\1\63\1\64\1\65\2\30\6\0\1\30" +
                    "\3\0\14\30\1\176\7\30\3\0\1\63\14\0\1\63" +
                    "\1\64\1\65\2\30\6\0\1\30\3\0\17\30\1\177" +
                    "\4\30\3\0\1\63\14\0\1\63\1\64\1\65\2\30" +
                    "\6\0\1\30\3\0\21\30\1\200\2\30\3\0\1\63" +
                    "\14\0\1\63\1\64\1\65\2\30\6\0\1\30\3\0" +
                    "\17\30\1\201\4\30\3\0\1\63\35\0\1\202\41\0" +
                    "\1\63\1\64\1\65\2\30\6\0\1\30\3\0\23\30" +
                    "\1\203\3\0\1\63\14\0\1\63\1\64\1\65\2\30" +
                    "\6\0\1\30\3\0\7\30\1\204\14\30\3\0\1\63" +
                    "\14\0\1\63\1\64\1\65\2\30\6\0\1\30\3\0" +
                    "\1\205\23\30\3\0\1\63\14\0\1\63\1\64\1\65" +
                    "\2\30\6\0\1\30\3\0\17\30\1\206\4\30\3\0" +
                    "\1\63\33\0\1\207\43\0\1\63\1\64\1\65\2\30" +
                    "\6\0\1\30\3\0\4\30\1\210\17\30\3\0\1\63" +
                    "\14\0\1\63\1\64\1\65\2\30\6\0\1\30\3\0" +
                    "\21\30\1\211\2\30\3\0\1\63\14\0\1\63\1\64" +
                    "\1\65\2\30\6\0\1\30\3\0\20\30\1\212\3\30" +
                    "\3\0\1\63\14\0\1\63\1\64\1\65\2\30\6\0" +
                    "\1\30\3\0\15\30\1\213\6\30\3\0\1\63\52\0" +
                    "\1\214\24\0\1\63\1\64\1\65\2\30\6\0\1\30" +
                    "\3\0\15\30\1\215\6\30\3\0\1\63";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    /**
     * Error code for "Unknown internal scanner error".
     */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /**
     * Error code for "could not match input".
     */
    private static final int ZZ_NO_MATCH = 1;
    /**
     * Error code for "pushback value was too large".
     */
    private static final int ZZ_PUSHBACK_2BIG = 2;
    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\2\11\4\1\2\11\2\1\1\11\1\1\1\11" +
                    "\4\1\1\11\3\1\1\11\1\1\2\11\15\1\1\11" +
                    "\1\1\1\11\1\1\1\11\1\0\5\11\3\0\2\11" +
                    "\1\0\1\1\6\11\15\1\2\11\3\0\17\1\2\0" +
                    "\16\1\2\0\10\1\1\0\1\11\5\1\1\0\4\1" +
                    "\1\0\4\1\1\11\1\1";
    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();
    /**
     * Input device.
     */
    private java.io.Reader zzReader;
    /**
     * Current state of the DFA.
     */
    private int zzState;
    /**
     * Current lexical state.
     */
    private int zzLexicalState = YYINITIAL;
    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
    /**
     * Text position at the last accepting state.
     */
    private int zzMarkedPos;
    /**
     * Current text position in the buffer.
     */
    private int zzCurrentPos;
    /**
     * Marks the beginning of the {@link #yytext()} string in the buffer.
     */
    private int zzStartRead;
    /**
     * Marks the last character in the buffer, that has been read from input.
     */
    private int zzEndRead;
    /**
     * Whether the scanner is at the end of file.
     *
     * @see #yyatEOF
     */
    private boolean zzAtEOF;
    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;
    /**
     * Number of newlines encountered up to the start of the matched text.
     */
    private int yyline;
    /**
     * Number of characters from the last newline up to the start of the matched text.
     */
    private int yycolumn;
    /**
     * Number of characters up to the start of the matched text.
     */
    @SuppressWarnings("unused")
    private long yychar;
    /**
     * Whether the scanner is currently at the beginning of a line.
     */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;
    /**
     * Whether the user-EOF-code has already been executed.
     */
    private boolean zzEOFDone;
    /* user code: */
    private ALexOperaciones ops;
    private GestionErroresJaja errores;

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public AnalizadorLexicoJaja(java.io.Reader in) {
        ops = new ALexOperaciones(this);
        this.zzReader = in;
    }

    private static int[] zzUnpackcmap_top() {
        int[] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackcmap_blocks() {
        int[] result = new int[29440];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAction() {
        int[] result = new int[141];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[141];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[4794];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[141];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    public void fijaGestionErrores(GestionErroresJaja errores) {
        this.errores = errores;
    }

    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL = true;
        zzAtEOF = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }

    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }

    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     * @return the character at {@code position}.
     */
    public final char yycharat(int position) {
        return zzBuffer[zzStartRead + position];
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *               {@link #yylength()}.
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @throws java.io.IOException if any I/O-Error occurs.
     */
    @Override
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return ops.unidadEof();
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        errores.errorLexico(fila(), columna(), lexema());
                    }
                    // fall through
                    case 61:
                        break;
                    case 2: {
                    }
                    // fall through
                    case 62:
                        break;
                    case 3: {
                        return ops.unidadNeg();
                    }
                    // fall through
                    case 63:
                        break;
                    case 4: {
                        return ops.unidadMod();
                    }
                    // fall through
                    case 64:
                        break;
                    case 5: {
                        return ops.unidadDireccion();
                    }
                    // fall through
                    case 65:
                        break;
                    case 6: {
                        return ops.unidadPAp();
                    }
                    // fall through
                    case 66:
                        break;
                    case 7: {
                        return ops.unidadPCierre();
                    }
                    // fall through
                    case 67:
                        break;
                    case 8: {
                        return ops.unidadMul();
                    }
                    // fall through
                    case 68:
                        break;
                    case 9: {
                        return ops.unidadSuma();
                    }
                    // fall through
                    case 69:
                        break;
                    case 10: {
                        return ops.unidadComa();
                    }
                    // fall through
                    case 70:
                        break;
                    case 11: {
                        return ops.unidadResta();
                    }
                    // fall through
                    case 71:
                        break;
                    case 12: {
                        return ops.unidadPunto();
                    }
                    // fall through
                    case 72:
                        break;
                    case 13: {
                        return ops.unidadDiv();
                    }
                    // fall through
                    case 73:
                        break;
                    case 14: {
                        return ops.unidadEntero();
                    }
                    // fall through
                    case 74:
                        break;
                    case 15: {
                        return ops.unidadDosPuntos();
                    }
                    // fall through
                    case 75:
                        break;
                    case 16: {
                        return ops.unidadPuntoComa();
                    }
                    // fall through
                    case 76:
                        break;
                    case 17: {
                        return ops.unidadMenor();
                    }
                    // fall through
                    case 77:
                        break;
                    case 18: {
                        return ops.unidadAsignacion();
                    }
                    // fall through
                    case 78:
                        break;
                    case 19: {
                        return ops.unidadMayor();
                    }
                    // fall through
                    case 79:
                        break;
                    case 20: {
                        return ops.unidadPuntero();
                    }
                    // fall through
                    case 80:
                        break;
                    case 21: {
                        return ops.unidadId();
                    }
                    // fall through
                    case 81:
                        break;
                    case 22: {
                        return ops.unidadCAp();
                    }
                    // fall through
                    case 82:
                        break;
                    case 23: {
                        return ops.unidadCCierre();
                    }
                    // fall through
                    case 83:
                        break;
                    case 24: {
                        return ops.unidadPot();
                    }
                    // fall through
                    case 84:
                        break;
                    case 25: {
                        return ops.unidadLlAp();
                    }
                    // fall through
                    case 85:
                        break;
                    case 26: {
                        return ops.unidadLlCierre();
                    }
                    // fall through
                    case 86:
                        break;
                    case 27: {
                        return ops.unidadDesigual();
                    }
                    // fall through
                    case 87:
                        break;
                    case 28: {
                        return ops.unidadModAsig();
                    }
                    // fall through
                    case 88:
                        break;
                    case 29: {
                        return ops.unidadConj();
                    }
                    // fall through
                    case 89:
                        break;
                    case 30: {
                        return ops.unidadConjAsig();
                    }
                    // fall through
                    case 90:
                        break;
                    case 31: {
                        return ops.unidadMulAsig();
                    }
                    // fall through
                    case 91:
                        break;
                    case 32: {
                        return ops.unidadSumaAsig();
                    }
                    // fall through
                    case 92:
                        break;
                    case 33: {
                        return ops.unidadRestaAsig();
                    }
                    // fall through
                    case 93:
                        break;
                    case 34: {
                        return ops.unidadFlecha();
                    }
                    // fall through
                    case 94:
                        break;
                    case 35: {
                        return ops.unidadDivAsig();
                    }
                    // fall through
                    case 95:
                        break;
                    case 36: {
                        return ops.unidadCuatroPuntos();
                    }
                    // fall through
                    case 96:
                        break;
                    case 37: {
                        return ops.unidadMenorIgual();
                    }
                    // fall through
                    case 97:
                        break;
                    case 38: {
                        return ops.unidadIgual();
                    }
                    // fall through
                    case 98:
                        break;
                    case 39: {
                        return ops.unidadMayorIgual();
                    }
                    // fall through
                    case 99:
                        break;
                    case 40: {
                        return ops.unidadPotAsig();
                    }
                    // fall through
                    case 100:
                        break;
                    case 41: {
                        return ops.unidadSi();
                    }
                    // fall through
                    case 101:
                        break;
                    case 42: {
                        return ops.unidadDisyAsig();
                    }
                    // fall through
                    case 102:
                        break;
                    case 43: {
                        return ops.unidadDisy();
                    }
                    // fall through
                    case 103:
                        break;
                    case 44: {
                        return ops.unidadBin();
                    }
                    // fall through
                    case 104:
                        break;
                    case 45: {
                        return ops.unidadEnt();
                    }
                    // fall through
                    case 105:
                        break;
                    case 46: {
                        return ops.unidadComo();
                    }
                    // fall through
                    case 106:
                        break;
                    case 47: {
                        return ops.unidadFake();
                    }
                    // fall through
                    case 107:
                        break;
                    case 48: {
                        return ops.unidadNulo();
                    }
                    // fall through
                    case 108:
                        break;
                    case 49: {
                        return ops.unidadPara();
                    }
                    // fall through
                    case 109:
                        break;
                    case 50: {
                        return ops.unidadSino();
                    }
                    // fall through
                    case 110:
                        break;
                    case 51: {
                        return ops.unidadDiver();
                    }
                    // fall through
                    case 111:
                        break;
                    case 52: {
                        return ops.unidadFacto();
                    }
                    // fall through
                    case 112:
                        break;
                    case 53: {
                        return ops.unidadNuevo();
                    }
                    // fall through
                    case 113:
                        break;
                    case 54: {
                        return ops.unidadRuta();
                    }
                    // fall through
                    case 114:
                        break;
                    case 55: {
                        return ops.unidadVector();
                    }
                    // fall through
                    case 115:
                        break;
                    case 56: {
                        return ops.unidadDevuelve();
                    }
                    // fall through
                    case 116:
                        break;
                    case 57: {
                        return ops.unidadMientras();
                    }
                    // fall through
                    case 117:
                        break;
                    case 58: {
                        return ops.unidadRegistro();
                    }
                    // fall through
                    case 118:
                        break;
                    case 59: {
                        return ops.unidadTraficar();
                    }
                    // fall through
                    case 119:
                        break;
                    case 60: {
                        return ops.unidadIncognito();
                    }
                    // fall through
                    case 120:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char) c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;

            yyclose();
        }
    }

    public int fila() {
        return yyline + 1;
    }

    public int columna() {
        return yycolumn + 1;
    }

    public String lexema() {
        return yytext();
    }

    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


}
