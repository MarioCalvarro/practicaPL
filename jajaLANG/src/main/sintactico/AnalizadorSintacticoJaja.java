
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Mar 21 17:53:06 CET 2024
//----------------------------------------------------

package main.sintactico;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.*;
import main.lexico.AnalizadorLexicoJaja;
import main.lexico.UnidadLexica;
import main.errors.GestionErroresJaja;
import main.ast.Programa;
import main.ast.Import;
import main.ast.declaraciones.*;
import main.ast.expresiones.*;
import main.ast.instrucciones.*;
import main.ast.literales.*;
import main.ast.tipos.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Mar 21 17:53:06 CET 2024
  */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJaja() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\002\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\002\000\002\005\006\000" +
    "\002\010\004\000\002\007\003\000\002\007\005\000\002" +
    "\006\003\000\002\006\005\000\002\011\010\000\002\011" +
    "\012\000\002\012\002\000\002\012\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\005\000\002\014\006\000" +
    "\002\015\005\000\002\016\003\000\002\016\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\020\005" +
    "\000\002\021\006\000\002\024\002\000\002\024\004\000" +
    "\002\024\006\000\002\022\005\000\002\022\011\000\002" +
    "\023\004\000\002\026\004\000\002\026\010\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\006\000\002\031\003\000" +
    "\002\031\004\000\002\031\004\000\002\031\005\000\002" +
    "\032\004\000\002\032\005\000\002\033\005\000\002\034" +
    "\005\000\002\034\003\000\002\035\005\000\002\035\003" +
    "\000\002\036\005\000\002\036\003\000\002\050\003\000" +
    "\002\050\003\000\002\037\005\000\002\037\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\040\005\000\002\040\003\000\002\052\003" +
    "\000\002\052\003\000\002\041\005\000\002\041\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\042\005\000\002\042\003\000\002\043\004\000\002\043" +
    "\003\000\002\054\003\000\002\054\003\000\002\044\004" +
    "\000\002\044\003\000\002\055\003\000\002\055\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\025\006\000\002\025\005\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\004" +
    "\000\002\056\004\000\002\056\004\000\002\056\005\000" +
    "\002\060\005\000\002\061\005\000\002\061\007\000\002" +
    "\046\006\000\002\046\005\000\002\046\005\000\002\046" +
    "\003\000\002\047\003\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\024\002\ufffe\004\ufffe\005\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\017\ufffe\064\ufffe\001\002\000\004" +
    "\002\302\001\002\000\024\002\ufffa\004\ufffa\005\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\017\006\064\ufffa\001\002" +
    "\000\004\064\277\001\002\000\022\002\001\004\016\005" +
    "\021\012\013\013\023\014\014\015\022\064\020\001\002" +
    "\000\022\002\ufffb\004\ufffb\005\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\064\ufffb\001\002\000\064\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\042\uffd4" +
    "\043\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\053\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\064\uffd4\001\002\000\006\042\152" +
    "\064\032\001\002\000\004\064\203\001\002\000\004\054" +
    "\176\001\002\000\004\046\175\001\002\000\064\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7" +
    "\042\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\053" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\064\uffd7\001\002\000\064" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8" +
    "\040\uffd8\042\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8\064\uffd8\001\002" +
    "\000\064\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\037\uffd5\040\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\053\uffd5\055\uffd5\056\uffd5\057\uffd5\064\uffd5" +
    "\001\002\000\064\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\053\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\064\uffd6\001\002\000\004\064\172\001\002\000\004\056" +
    "\026\001\002\000\004\046\025\001\002\000\022\002\ufffd" +
    "\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\064" +
    "\ufffd\001\002\000\004\064\032\001\002\000\010\045\ufff7" +
    "\046\ufff7\047\ufff7\001\002\000\006\045\166\047\167\001" +
    "\002\000\004\064\032\001\002\000\012\043\037\045\ufff5" +
    "\046\ufff5\047\ufff5\001\002\000\006\045\036\057\uffd2\001" +
    "\002\000\004\057\035\001\002\000\064\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\042\uffd3" +
    "\043\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\053\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\064\uffd3\001\002\000\006\057\uffd1" +
    "\064\uffce\001\002\000\032\021\060\036\042\041\041\042" +
    "\061\051\040\052\057\054\062\060\071\061\067\062\055" +
    "\063\065\064\046\001\002\000\026\021\uffab\036\uffab\051" +
    "\uffab\052\uffab\054\uffab\060\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\001\002\000\032\021\uffb0\036\uffb0\041\uffb0\042" +
    "\uffb0\051\uffb0\052\uffb0\054\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\001\002\000\026\021\uffac\036\uffac\051" +
    "\uffac\052\uffac\054\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\001\002\000\060\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\037\uffad\040\uffad\043\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\053\uffad\055\uffad\056\uffad\057\uffad" +
    "\001\002\000\060\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\037\uffb1\040\uffb1\043\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002" +
    "\000\060\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\037\uffb3\040\uffb3\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3\001\002\000\066" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97\037\uff97" +
    "\040\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\052\uff97\053\uff97\054\160\055\uff97\056\uff97\057\uff97" +
    "\001\002\000\012\040\077\045\ufff4\046\ufff4\047\ufff4\001" +
    "\002\000\060\022\127\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\037\uffb8\040\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\001\002\000" +
    "\056\023\123\024\124\025\122\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037\uffbc\040" +
    "\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\053\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\001\002\000\050\026\120\027" +
    "\117\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\037\uffc2\040\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\053\uffc2\055\uffc2\056\uffc2\057\uffc2\001\002\000\044" +
    "\030\uffc6\031\uffc6\032\114\033\113\034\110\035\111\037" +
    "\uffc6\040\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\053\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002\000\034\030" +
    "\106\031\105\037\uffc8\040\uffc8\043\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\053\uffc8\055\uffc8\056\uffc8\057\uffc8\001" +
    "\002\000\060\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\037\uffa3\040\uffa3\043\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000" +
    "\030\037\102\040\uffca\043\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\053\uffca\055\uffca\056\uffca\057\uffca\001\002\000" +
    "\032\021\060\036\042\041\041\042\061\051\040\052\057" +
    "\054\062\060\071\061\067\062\055\063\065\064\046\001" +
    "\002\000\016\004\016\005\021\013\023\014\014\056\140" +
    "\064\020\001\002\000\032\021\uffaf\036\uffaf\041\uffaf\042" +
    "\uffaf\051\uffaf\052\uffaf\054\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\001\002\000\032\021\060\036\042\041" +
    "\041\042\061\051\040\052\057\054\062\060\071\061\067" +
    "\062\055\063\065\064\046\001\002\000\026\021\060\036" +
    "\042\051\040\052\057\054\062\060\071\061\067\062\055" +
    "\063\065\064\046\001\002\000\032\021\060\036\042\041" +
    "\041\042\061\051\040\052\057\054\062\060\071\061\067" +
    "\062\055\063\065\064\046\001\002\000\060\022\uffa2\023" +
    "\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\037\uffa2\040\uffa2\043" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\053\uffa2\055\uffa2" +
    "\056\uffa2\057\uffa2\001\002\000\064\022\uffa8\023\uffa8\024" +
    "\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\043\uffa8\044" +
    "\074\045\uffa8\046\uffa8\047\uffa8\050\uffa8\052\073\053\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\001\002\000\060\022\uffa4\023" +
    "\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\035\uffa4\037\uffa4\040\uffa4\043" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\053\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\001\002\000\060\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\043\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\053\uffa9\055\uffa9\056\uffa9" +
    "\057\uffa9\001\002\000\060\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\037\uffa5\040\uffa5\043\uffa5\045\uffa5\046" +
    "\uffa5\047\uffa5\050\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\001\002\000\060\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\037\uffaa\040\uffaa\043\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\053\uffaa\055\uffaa\056\uffaa\057\uffaa\001\002" +
    "\000\032\021\060\036\042\041\041\042\061\051\040\052" +
    "\057\054\062\060\071\061\067\062\055\063\065\064\046" +
    "\001\002\000\004\064\075\001\002\000\064\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\037\uff99\040\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\052\uff99" +
    "\053\uff99\055\uff99\056\uff99\057\uff99\001\002\000\006\040" +
    "\077\053\100\001\002\000\032\021\060\036\042\041\041" +
    "\042\061\051\040\052\057\054\062\060\071\061\067\062" +
    "\055\063\065\064\046\001\002\000\064\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\040\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\052\uff9a\053" +
    "\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002\000\030\037\102" +
    "\040\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\053" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000\032\021\060" +
    "\036\042\041\041\042\061\051\040\052\057\054\062\060" +
    "\071\061\067\062\055\063\065\064\046\001\002\000\034" +
    "\030\106\031\105\037\uffc9\040\uffc9\043\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\001\002\000\032\021\060\036\042\041\041\042\061\051" +
    "\040\052\057\054\062\060\071\061\067\062\055\063\065" +
    "\064\046\001\002\000\032\021\uffc5\036\uffc5\041\uffc5\042" +
    "\uffc5\051\uffc5\052\uffc5\054\uffc5\060\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\064\uffc5\001\002\000\032\021\uffc4\036\uffc4\041" +
    "\uffc4\042\uffc4\051\uffc4\052\uffc4\054\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\001\002\000\044\030\uffc7\031" +
    "\uffc7\032\114\033\113\034\110\035\111\037\uffc7\040\uffc7" +
    "\043\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\053\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\001\002\000\032\021\uffbf\036\uffbf" +
    "\041\uffbf\042\uffbf\051\uffbf\052\uffbf\054\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\001\002\000\032\021\uffbe" +
    "\036\uffbe\041\uffbe\042\uffbe\051\uffbe\052\uffbe\054\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\001\002\000\032" +
    "\021\060\036\042\041\041\042\061\051\040\052\057\054" +
    "\062\060\071\061\067\062\055\063\065\064\046\001\002" +
    "\000\032\021\uffc0\036\uffc0\041\uffc0\042\uffc0\051\uffc0\052" +
    "\uffc0\054\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\001\002\000\032\021\uffc1\036\uffc1\041\uffc1\042\uffc1\051" +
    "\uffc1\052\uffc1\054\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\001\002\000\050\026\120\027\117\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3" +
    "\043\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\053\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\001\002\000\032\021\060\036\042" +
    "\041\041\042\061\051\040\052\057\054\062\060\071\061" +
    "\067\062\055\063\065\064\046\001\002\000\032\021\uffba" +
    "\036\uffba\041\uffba\042\uffba\051\uffba\052\uffba\054\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\uffba\064\uffba\001\002\000\032" +
    "\021\uffbb\036\uffbb\041\uffbb\042\uffbb\051\uffbb\052\uffbb\054" +
    "\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\001\002" +
    "\000\056\023\123\024\124\025\122\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd" +
    "\040\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\053" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\001\002\000\032\021\uffb5" +
    "\036\uffb5\041\uffb5\042\uffb5\051\uffb5\052\uffb5\054\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\001\002\000\032" +
    "\021\uffb7\036\uffb7\041\uffb7\042\uffb7\051\uffb7\052\uffb7\054" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\001\002" +
    "\000\032\021\uffb6\036\uffb6\041\uffb6\042\uffb6\051\uffb6\052" +
    "\uffb6\054\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\001\002\000\032\021\060\036\042\041\041\042\061\051" +
    "\040\052\057\054\062\060\071\061\067\062\055\063\065" +
    "\064\046\001\002\000\060\022\127\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\037\uffb9\040\uffb9\043\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\001\002\000\032\021\060\036\042\041\041\042\061\051" +
    "\040\052\057\054\062\060\071\061\067\062\055\063\065" +
    "\064\046\001\002\000\060\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\037\uffb4\040\uffb4\043\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4" +
    "\001\002\000\060\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\037\uffb2\040\uffb2\043\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002" +
    "\000\060\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\037\uffae\040\uffae\043\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\053\uffae\055\uffae\056\uffae\057\uffae\001\002\000\006" +
    "\040\077\055\134\001\002\000\064\022\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\037\uff98\040\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\052\uff98\053\uff98" +
    "\055\uff98\056\uff98\057\uff98\001\002\000\062\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\037\uff9f\040\uff9f\042" +
    "\152\043\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\053\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\001\002\000\060\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\037\uffa1\040\uffa1\043" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\053\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\001\002\000\060\022\uffa0\023\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\037\uffa0\040\uffa0\043\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\053\uffa0\055\uffa0\056\uffa0" +
    "\057\uffa0\001\002\000\004\064\142\001\002\000\006\045" +
    "\145\057\146\001\002\000\004\043\143\001\002\000\032" +
    "\021\060\036\042\041\041\042\061\051\040\052\057\054" +
    "\062\060\071\061\067\062\055\063\065\064\046\001\002" +
    "\000\010\040\077\045\uff9c\057\uff9c\001\002\000\004\064" +
    "\147\001\002\000\060\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\037\uff9d\040\uff9d\043\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d\001" +
    "\002\000\004\043\150\001\002\000\032\021\060\036\042" +
    "\041\041\042\061\051\040\052\057\054\062\060\071\061" +
    "\067\062\055\063\065\064\046\001\002\000\010\040\077" +
    "\045\uff9b\057\uff9b\001\002\000\064\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\037\uffda\040\uffda\042\uffda\043" +
    "\uffda\045\uffda\046\uffda\047\uffda\050\uffda\053\uffda\055\uffda" +
    "\056\uffda\057\uffda\064\uffda\001\002\000\012\040\077\045" +
    "\uff96\053\uff96\055\uff96\001\002\000\006\045\155\053\156" +
    "\001\002\000\032\021\060\036\042\041\041\042\061\051" +
    "\040\052\057\054\062\060\071\061\067\062\055\063\065" +
    "\064\046\001\002\000\060\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\037\uff9e\040\uff9e\043\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\053\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\001\002\000\012\040\077\045\uff95\053\uff95\055\uff95\001" +
    "\002\000\034\021\060\036\042\041\041\042\061\051\040" +
    "\052\057\054\062\055\161\060\071\061\067\062\055\063" +
    "\065\064\046\001\002\000\060\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\043\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\053\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\001\002\000\006\045\155\055\163\001\002\000\060" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7" +
    "\040\uffa7\043\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\053" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002\000\006\045\165" +
    "\057\uffd0\001\002\000\006\057\uffcf\064\uffcd\001\002\000" +
    "\004\064\032\001\002\000\014\004\016\005\021\013\023" +
    "\014\014\064\020\001\002\000\010\042\152\045\uffcc\057" +
    "\uffcc\001\002\000\010\045\ufff6\046\ufff6\047\ufff6\001\002" +
    "\000\004\043\173\001\002\000\014\004\016\005\021\013" +
    "\023\014\014\064\020\001\002\000\006\042\152\046\ufff9" +
    "\001\002\000\022\002\ufffc\004\ufffc\005\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\064\ufffc\001\002\000\014\004\016" +
    "\005\021\013\023\014\014\064\020\001\002\000\006\042" +
    "\152\045\200\001\002\000\004\060\201\001\002\000\004" +
    "\055\202\001\002\000\064\022\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\064\uffd9\001\002\000\004\054\204\001\002\000" +
    "\010\041\205\055\ufff1\064\211\001\002\000\004\064\273" +
    "\001\002\000\006\050\271\055\ufff0\001\002\000\004\055" +
    "\214\001\002\000\006\050\uffef\055\uffef\001\002\000\004" +
    "\047\212\001\002\000\014\004\016\005\021\013\023\014" +
    "\014\064\020\001\002\000\010\042\152\050\uffed\055\uffed" +
    "\001\002\000\006\050\215\056\216\001\002\000\014\004" +
    "\016\005\021\013\023\014\014\064\020\001\002\000\052" +
    "\004\016\005\021\006\220\010\227\011\234\013\023\014" +
    "\014\016\226\021\060\036\042\041\041\042\061\051\040" +
    "\052\057\054\062\060\071\061\067\062\055\063\065\064" +
    "\233\001\002\000\022\002\ufff3\004\ufff3\005\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\064\ufff3\001\002\000\032\021" +
    "\060\036\042\041\041\042\061\051\040\052\057\054\062" +
    "\060\071\061\067\062\055\063\065\064\046\001\002\000" +
    "\054\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\021\uffe4\036\uffe4\041\uffe4\042\uffe4\051" +
    "\uffe4\052\uffe4\054\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\uffe4\064\uffe4\001\002\000\004\046\256\001\002\000" +
    "\042\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\037" +
    "\uffa9\040\uffa9\043\uffa9\046\255\001\002\000\004\046\254" +
    "\001\002\000\054\004\016\005\021\006\220\010\227\011" +
    "\234\013\023\014\014\016\226\021\060\036\042\041\041" +
    "\042\061\051\040\052\057\054\062\057\252\060\071\061" +
    "\067\062\055\063\065\064\233\001\002\000\032\021\060" +
    "\036\042\041\041\042\061\051\040\052\057\054\062\060" +
    "\071\061\067\062\055\063\065\064\046\001\002\000\032" +
    "\021\060\036\042\041\041\042\061\051\040\052\057\054" +
    "\062\060\071\061\067\062\055\063\065\064\046\001\002" +
    "\000\004\046\246\001\002\000\054\004\uffea\005\uffea\006" +
    "\uffea\010\uffea\011\uffea\013\uffea\014\uffea\016\uffea\021\uffea" +
    "\036\uffea\041\uffea\042\uffea\051\uffea\052\uffea\054\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\001\002" +
    "\000\054\004\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5\013" +
    "\uffe5\014\uffe5\016\uffe5\021\uffe5\036\uffe5\041\uffe5\042\uffe5" +
    "\051\uffe5\052\uffe5\054\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\001\002\000\052\022\uff97\023\uff97" +
    "\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\035\uff97\037\uff97\040\uff97\042\uffd5" +
    "\043\uff97\044\uff97\052\uff97\054\160\064\uffd5\001\002\000" +
    "\004\064\240\001\002\000\006\040\077\043\236\001\002" +
    "\000\032\021\060\036\042\041\041\042\061\051\040\052" +
    "\057\054\062\060\071\061\067\062\055\063\065\064\046" +
    "\001\002\000\006\040\077\046\uffe2\001\002\000\004\043" +
    "\241\001\002\000\032\021\060\036\042\041\041\042\061" +
    "\051\040\052\057\054\062\060\071\061\067\062\055\063" +
    "\065\064\046\001\002\000\006\040\077\050\243\001\002" +
    "\000\032\021\060\036\042\041\041\042\061\051\040\052" +
    "\057\054\062\060\071\061\067\062\055\063\065\064\046" +
    "\001\002\000\006\040\077\056\216\001\002\000\054\004" +
    "\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc" +
    "\016\uffdc\021\uffdc\036\uffdc\041\uffdc\042\uffdc\051\uffdc\052" +
    "\uffdc\054\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\001\002\000\054\004\uffe3\005\uffe3\006\uffe3\010" +
    "\uffe3\011\uffe3\013\uffe3\014\uffe3\016\uffe3\021\uffe3\036\uffe3" +
    "\041\uffe3\042\uffe3\051\uffe3\052\uffe3\054\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\001\002\000\006" +
    "\040\077\056\216\001\002\000\054\004\uffdd\005\uffdd\006" +
    "\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\016\uffdd\021\uffdd" +
    "\036\uffdd\041\uffdd\042\uffdd\051\uffdd\052\uffdd\054\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\001\002" +
    "\000\006\040\077\046\uffdb\001\002\000\064\002\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\036\uffeb\041" +
    "\uffeb\042\uffeb\051\uffeb\052\uffeb\054\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\001\002\000\054\004" +
    "\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9" +
    "\016\uffe9\021\uffe9\036\uffe9\041\uffe9\042\uffe9\051\uffe9\052" +
    "\uffe9\054\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\001\002\000\054\004\uffe8\005\uffe8\006\uffe8\010" +
    "\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\021\uffe8\036\uffe8" +
    "\041\uffe8\042\uffe8\051\uffe8\052\uffe8\054\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\001\002\000\054" +
    "\004\uffe6\005\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6\014" +
    "\uffe6\016\uffe6\021\uffe6\036\uffe6\041\uffe6\042\uffe6\051\uffe6" +
    "\052\uffe6\054\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\001\002\000\054\004\uffe7\005\uffe7\006\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\014\uffe7\016\uffe7\021\uffe7\036" +
    "\uffe7\041\uffe7\042\uffe7\051\uffe7\052\uffe7\054\uffe7\057\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\001\002\000" +
    "\006\040\077\056\216\001\002\000\056\004\uffe0\005\uffe0" +
    "\006\uffe0\007\261\010\uffe0\011\uffe0\013\uffe0\014\uffe0\016" +
    "\uffe0\021\uffe0\036\uffe0\041\uffe0\042\uffe0\051\uffe0\052\uffe0" +
    "\054\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\001\002\000\034\021\060\036\042\041\041\042\061" +
    "\051\040\052\057\054\062\056\216\060\071\061\067\062" +
    "\055\063\065\064\046\001\002\000\054\004\uffe1\005\uffe1" +
    "\006\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\016\uffe1\021" +
    "\uffe1\036\uffe1\041\uffe1\042\uffe1\051\uffe1\052\uffe1\054\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\001" +
    "\002\000\054\004\uffdf\005\uffdf\006\uffdf\010\uffdf\011\uffdf" +
    "\013\uffdf\014\uffdf\016\uffdf\021\uffdf\036\uffdf\041\uffdf\042" +
    "\uffdf\051\uffdf\052\uffdf\054\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\001\002\000\006\040\077\056" +
    "\216\001\002\000\056\004\uffe0\005\uffe0\006\uffe0\007\261" +
    "\010\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0\021\uffe0\036" +
    "\uffe0\041\uffe0\042\uffe0\051\uffe0\052\uffe0\054\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\001\002\000" +
    "\054\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde\013\uffde" +
    "\014\uffde\016\uffde\021\uffde\036\uffde\041\uffde\042\uffde\051" +
    "\uffde\052\uffde\054\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\001\002\000\006\042\152\056\216\001" +
    "\002\000\022\002\ufff2\004\ufff2\005\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\064\ufff2\001\002\000\006\041\205\064" +
    "\211\001\002\000\006\050\uffee\055\uffee\001\002\000\004" +
    "\047\274\001\002\000\014\004\016\005\021\013\023\014" +
    "\014\064\020\001\002\000\010\042\152\050\uffec\055\uffec" +
    "\001\002\000\006\045\166\046\ufff8\001\002\000\004\020" +
    "\300\001\002\000\004\064\301\001\002\000\024\002\uffff" +
    "\004\uffff\005\uffff\012\uffff\013\uffff\014\uffff\015\uffff\017" +
    "\uffff\064\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\016" +
    "\005\023\010\014\011\007\026\011\027\016\030\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\026" +
    "\007\275\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\026" +
    "\007\027\031\033\032\030\033\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\026\007\027\033\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\025\067" +
    "\034\046\035\055\036\053\037\052\040\051\041\050\042" +
    "\047\043\044\044\043\045\042\046\065\054\063\055\062" +
    "\056\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\124\001\001\000\004\052\115\001\001" +
    "\000\004\051\111\001\001\000\004\050\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\025\067\034\152" +
    "\035\055\036\053\037\052\040\051\041\050\042\047\043" +
    "\044\044\043\045\042\046\065\047\153\054\063\055\062" +
    "\056\071\001\001\000\014\026\134\027\016\030\010\057" +
    "\135\060\136\001\001\000\002\001\001\000\040\025\067" +
    "\034\132\035\055\036\053\037\052\040\051\041\050\042" +
    "\047\043\044\044\043\045\042\046\065\054\063\055\062" +
    "\056\071\001\001\000\016\025\067\044\131\045\042\046" +
    "\065\055\062\056\071\001\001\000\022\025\067\043\130" +
    "\044\043\045\042\046\065\054\063\055\062\056\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\025\067\034\075\035\055\036\053\037\052\040\051" +
    "\041\050\042\047\043\044\044\043\045\042\046\065\054" +
    "\063\055\062\056\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\025\067\035\100\036" +
    "\053\037\052\040\051\041\050\042\047\043\044\044\043" +
    "\045\042\046\065\054\063\055\062\056\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\025\067\036\102" +
    "\037\052\040\051\041\050\042\047\043\044\044\043\045" +
    "\042\046\065\054\063\055\062\056\071\001\001\000\004" +
    "\050\103\001\001\000\032\025\067\037\106\040\051\041" +
    "\050\042\047\043\044\044\043\045\042\046\065\054\063" +
    "\055\062\056\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\025\067\040\114\041\050\042\047\043" +
    "\044\044\043\045\042\046\065\054\063\055\062\056\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\115\001\001\000\026\025\067\041\120\042\047\043\044" +
    "\044\043\045\042\046\065\054\063\055\062\056\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\025\067\042\125\043\044\044\043\045\042" +
    "\046\065\054\063\055\062\056\071\001\001\000\002\001" +
    "\001\000\022\025\067\043\127\044\043\045\042\046\065" +
    "\054\063\055\062\056\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\025\067\034\143\035\055\036\053\037" +
    "\052\040\051\041\050\042\047\043\044\044\043\045\042" +
    "\046\065\054\063\055\062\056\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\025\067\034\150\035\055\036\053\037\052\040" +
    "\051\041\050\042\047\043\044\044\043\045\042\046\065" +
    "\054\063\055\062\056\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\025\067\034\156\035\055\036\053\037\052\040\051\041" +
    "\050\042\047\043\044\044\043\045\042\046\065\054\063" +
    "\055\062\056\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\025\067\034\152\035\055\036\053\037\052" +
    "\040\051\041\050\042\047\043\044\044\043\045\042\046" +
    "\065\047\161\054\063\055\062\056\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\170\001\001\000\010" +
    "\026\167\027\016\030\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\173\027\016" +
    "\030\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\176\027\016\030\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\206\013\205\014\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\212\027\016" +
    "\030\010\001\001\000\002\001\001\000\004\015\216\001" +
    "\001\000\010\026\266\027\016\030\010\001\001\000\064" +
    "\010\223\016\224\017\230\020\221\021\231\022\220\023" +
    "\227\025\222\026\011\027\016\030\010\034\234\035\055" +
    "\036\053\037\052\040\051\041\050\042\047\043\044\044" +
    "\043\045\042\046\065\054\063\055\062\056\071\001\001" +
    "\000\002\001\001\000\040\025\067\034\256\035\055\036" +
    "\053\037\052\040\051\041\050\042\047\043\044\044\043" +
    "\045\042\046\065\054\063\055\062\056\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\010\223\017\252\020\221\021\231\022" +
    "\220\023\227\025\222\026\011\027\016\030\010\034\234" +
    "\035\055\036\053\037\052\040\051\041\050\042\047\043" +
    "\044\044\043\045\042\046\065\054\063\055\062\056\071" +
    "\001\001\000\040\025\067\034\250\035\055\036\053\037" +
    "\052\040\051\041\050\042\047\043\044\044\043\045\042" +
    "\046\065\054\063\055\062\056\071\001\001\000\040\025" +
    "\067\034\246\035\055\036\053\037\052\040\051\041\050" +
    "\042\047\043\044\044\043\045\042\046\065\054\063\055" +
    "\062\056\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\025\067\034\236\035\055\036\053" +
    "\037\052\040\051\041\050\042\047\043\044\044\043\045" +
    "\042\046\065\054\063\055\062\056\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\025\067\034\241\035" +
    "\055\036\053\037\052\040\051\041\050\042\047\043\044" +
    "\044\043\045\042\046\065\054\063\055\062\056\071\001" +
    "\001\000\002\001\001\000\040\025\067\034\243\035\055" +
    "\036\053\037\052\040\051\041\050\042\047\043\044\044" +
    "\043\045\042\046\065\054\063\055\062\056\071\001\001" +
    "\000\004\015\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\257" +
    "\001\001\000\004\024\261\001\001\000\042\015\262\025" +
    "\067\034\263\035\055\036\053\037\052\040\051\041\050" +
    "\042\047\043\044\044\043\045\042\046\065\054\063\055" +
    "\062\056\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\264\001\001\000\004\024\265\001\001\000" +
    "\002\001\001\000\004\015\267\001\001\000\002\001\001" +
    "\000\004\014\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\274\027\016\030\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJaja$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJaja$actions {
  private final AnalizadorSintacticoJaja parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJaja$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_Imports Lista_Declaraciones 
            {
              Programa RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Programa(lImp, lDecl); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJaja$parser.done_parsing();
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_Imports ::= Lista_Imports TRAFICAR IDEN COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lImp.add(new Import(ruta, id)); RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_Imports ::= 
            {
              List<Import> RESULT =null;
		 RESULT = new ArrayList<Import>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion_Alias PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionAlias dAlias = (DeclaracionAlias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dAlias); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Variables PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables dGen = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Funcion 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionFun dGen = (DeclaracionFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Declaraciones ::= 
            {
              ListaDeclaraciones RESULT =null;
		 RESULT = new ListaDeclaraciones(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionAlias(id, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl_Variables ::= Tipo Lista_Decl_Asignaciones 
            {
              DeclaracionVariables RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Decl_Asignaciones ::= Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionVar> lista_var = new ArrayList<DeclaracionVar>();
                        lista_var.add(var); RESULT = lista_var; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		List<DeclaracionVar> lDecl = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(var); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl_Asig ::= IDEN 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl_Asig ::= IDEN ASIGNACION Expresion 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-6)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Parametros ::= 
            {
              List<DeclaracionPar> RESULT =null;
		 RESULT = new ArrayList<DeclaracionPar>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Parametros ::= Lista_Parametros2 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Parametros2 ::= Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionPar> lista_par = new ArrayList<DeclaracionPar>();
                  lista_par.add(par); RESULT = lista_par; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Parametros2 ::= Lista_Parametros2 FLECHA Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lPar.add(par); RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Parametro ::= IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Parametro ::= DIRECCION IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bloque_Anidado ::= LLAP Lista_Instrucciones LLCIERRE 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> LIns = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = LIns; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bloque_Anidado",11, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_Instrucciones ::= Instruccion 
            {
              List<Instruccion> RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
                    lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= Decl_Variables PUNTOCOMA 
            {
              Instruccion RESULT =null;
		DeclaracionVariables decl = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = decl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruccion ::= Asignacion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = as; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= Llamada_Fun PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruccion ::= Condicional 
            {
              Instruccion RESULT =null;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruccion ::= Bucle 
            {
              Instruccion RESULT =null;
		Instruccion buc = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = buc; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= Inst_Return PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion iRet = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = iRet; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= Expresion ASIGNACION Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, expr2);  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condicional ::= SI Expresion Bloque_Anidado Cond_Else 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional",15, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Cond_Else ::= 
            {
              InsCond RESULT =null;
		 RESULT = new InsCond(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Cond_Else ::= SINO Bloque_Anidado 
            {
              InsCond RESULT =null;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Cond_Else ::= SINO Expresion Bloque_Anidado Cond_Else 
            {
              InsCond RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bucle ::= MIENTRAS Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleWhile(expr, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bucle ::= PARA IDEN ASIGNACION Expresion FLECHA Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-5)).value;
		Expresion exprIni = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion exprFin = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleFor(id, exprIni, exprFin, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst_Return ::= DEVUELVE Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsReturn(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return",17, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo ::= Tipo PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoPuntero(tipo); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo ::= VECTOR PAP Tipo COMA ENTERO PCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoArray(tipo, ent); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo ::= T 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = TipoEntero.instancia();  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T ::= BIN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBinario.instancia(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // T ::= IDEN 
            {
              Tipo RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new TipoAlias(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // T ::= Tipo_Reg 
            {
              Tipo RESULT =null;
		Tipo t_reg = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t_reg; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_Reg ::= REGISTRO LLAP Matriz_Atributos LLCIERRE 
            {
              Tipo RESULT =null;
		ListaDeclaraciones mAtrib = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoRegistro(mAtrib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg",22, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matriz_Atributos ::= Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matriz_Atributos ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matriz_Atributos2 ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                  mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matriz_Atributos2 ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS Tipo 
            {
              DeclaracionVariables RESULT =null;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos",25, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= Expresion DISY E1 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.DISY, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= E1 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e1; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E1 CONJ E2 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.CONJ, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e2; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op2 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op2, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e3; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP2 ::= DESIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DESIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP2 ::= IGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.IGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E3 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op3 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op3, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e4; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP3 ::= MAYOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP3 ::= MENOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP3 ::= MAYORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP3 ::= MENORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E4 ::= E4 OP4 E5 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op4 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op4, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion e5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e5; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP4 ::= SUMA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP4 ::= RESTA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E5 ::= E5 OP5 E6 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op5 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op5, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion e6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e6; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP5 ::= MUL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP5 ::= DIV 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP5 ::= MOD 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E6 POT E7 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.POT, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion e7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e7; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= OP7 E7 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op7 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op7, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion e8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e8; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP7 ::= DIRECCION 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.DIRECCION; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP7 ::= PUNTERO 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.PUNTERO; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E8 ::= OP8 E8 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op8 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op8, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E8 ::= E9 
            {
              Expresion RESULT =null;
		Expresion e9 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e9; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP8 ::= NEG 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.NEG; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP8 ::= MENOS 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.MENOS; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E9 ::= Literal 
            {
              Expresion RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E9 ::= Llamada_Fun 
            {
              Expresion RESULT =null;
		Llamada ll = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = ll; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E9 ::= E10 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Llamada_Fun ::= IDEN PAP Lista_Expresiones PCIERRE 
            {
              Llamada RESULT =null;
		String izquierda = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new Llamada(izquierda, lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Llamada_Fun ::= IDEN PAP PCIERRE 
            {
              Llamada RESULT =null;
		String izquierda = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 RESULT = new Llamada(izquierda, new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		Entero e = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Literal ::= FACTO 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Literal ::= FAKE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Literal ::= NULO 
            {
              Literal RESULT =null;
		Nulo n = (Nulo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Literal ::= NUEVO Array_Literal 
            {
              Literal RESULT =null;
		LiteralArray aL = (LiteralArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = aL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Literal ::= NUEVO Struct_Literal 
            {
              Literal RESULT =null;
		LiteralStruct sL = (LiteralStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = sL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Literal ::= NUEVO Tipo 
            {
              Literal RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DirDinamica(t); }
        ;

Array_Literal ::= CAP CCIERRE
              {: RESULT = new LiteralArray(new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Literal ::= CAP Lista_Expresiones CCIERRE 
            {
              Literal RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralArray(lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Struct_Literal ::= LLAP Lista_Asig_Atributos LLCIERRE 
            {
              LiteralStruct RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralStruct(lAtr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Struct_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Lista_Asig_Atributos ::= IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 Map<String, Expresion> valores = new HashMap<String, Expresion>();
                     valores.put(id, expr); RESULT = valores; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Lista_Asig_Atributos ::= Lista_Asig_Atributos COMA IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lAtr.put(id, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E10 ::= E10 CAP Expresion CCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new AccesoArray(izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E10 ::= E10 PUNTO IDEN 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new AccesoStruct(izquierda, id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E10 ::= PAP Expresion PCIERRE 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E10 ::= IDEN 
            {
              Expresion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Lista_Expresiones ::= Expresion 
            {
              List<Expresion> RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Expresion> lExpr = new ArrayList<Expresion>();
                   lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Lista_Expresiones ::= Lista_Expresiones COMA Expresion 
            {
              List<Expresion> RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoJaja$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                               CUP$AnalizadorSintacticoJaja$act_num,
                               CUP$AnalizadorSintacticoJaja$parser,
                               CUP$AnalizadorSintacticoJaja$stack,
                               CUP$AnalizadorSintacticoJaja$top);
    }
}

