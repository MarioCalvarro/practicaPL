
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 01 01:39:09 CEST 2024
//----------------------------------------------------

package main.sintactico;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.*;
import main.lexico.AnalizadorLexicoJaja;
import main.lexico.UnidadLexica;
import main.errors.GestionErroresJaja;
import main.ast.Programa;
import main.ast.Import;
import main.ast.declaraciones.*;
import main.ast.expresiones.*;
import main.ast.instrucciones.*;
import main.ast.literales.*;
import main.ast.tipos.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 01 01:39:09 CEST 2024
  */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJaja() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\002\000\002\003\007\000\002\003\007" +
    "\000\002\003\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\004\000\002\004\002\000\002\005\006\000\002" +
    "\005\006\000\002\010\004\000\002\007\003\000\002\007" +
    "\005\000\002\006\003\000\002\006\005\000\002\011\010" +
    "\000\002\011\012\000\002\012\002\000\002\012\003\000" +
    "\002\013\003\000\002\013\005\000\002\014\005\000\002" +
    "\014\006\000\002\015\005\000\002\016\003\000\002\016" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\003\000\002\020\005\000\002\020\005\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\021\006\000\002\024\002\000" +
    "\002\024\004\000\002\024\006\000\002\022\005\000\002" +
    "\022\011\000\002\023\004\000\002\026\004\000\002\026" +
    "\010\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\006\000" +
    "\002\031\003\000\002\031\004\000\002\031\004\000\002" +
    "\031\005\000\002\032\004\000\002\032\005\000\002\033" +
    "\005\000\002\034\005\000\002\034\003\000\002\035\005" +
    "\000\002\035\003\000\002\036\005\000\002\036\003\000" +
    "\002\051\003\000\002\051\003\000\002\037\005\000\002" +
    "\037\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\040\005\000\002\040\003" +
    "\000\002\053\003\000\002\053\003\000\002\041\005\000" +
    "\002\041\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\042\005\000\002\042\003\000\002\043" +
    "\004\000\002\043\003\000\002\055\003\000\002\055\003" +
    "\000\002\044\004\000\002\044\003\000\002\056\003\000" +
    "\002\056\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\025\006\000\002\025\005\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\004\000\002\057\004\000\002\057\004\000" +
    "\002\060\004\000\002\060\005\000\002\061\005\000\002" +
    "\062\005\000\002\062\007\000\002\046\006\000\002\046" +
    "\005\000\002\046\005\000\002\046\003\000\002\047\003" +
    "\000\002\047\005\000\002\063\005\000\002\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\026\002\ufffe\003\ufffe\004\ufffe\005\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\075\ufffe\001\002" +
    "\000\004\002\331\001\002\000\026\002\ufff7\003\006\004" +
    "\ufff7\005\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\017\007" +
    "\075\ufff7\001\002\000\026\002\ufffb\003\ufffb\004\ufffb\005" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\075\ufffb" +
    "\001\002\000\006\003\323\076\322\001\002\000\022\002" +
    "\001\004\016\005\022\012\015\013\025\014\014\015\024" +
    "\075\020\001\002\000\022\002\ufff8\004\ufff8\005\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\075\ufff8\001\002\000\104" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6" +
    "\060\uffc6\061\uffc6\064\uffc6\066\uffc6\067\uffc6\070\uffc6\075" +
    "\uffc6\001\002\000\006\052\164\075\033\001\002\000\004" +
    "\065\314\001\002\000\004\075\206\001\002\000\104\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\047\uffc9\050\uffc9\052\uffc9\053\uffc9\055\uffc9\056\uffc9\060" +
    "\uffc9\061\uffc9\064\uffc9\066\uffc9\067\uffc9\070\uffc9\075\uffc9" +
    "\001\002\000\004\056\205\001\002\000\114\022\uff84\023" +
    "\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84" +
    "\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\047\uff84" +
    "\050\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057" +
    "\203\060\uff84\061\uff84\063\uff84\064\uff84\065\uff84\066\uff84" +
    "\067\uff84\070\uff84\075\uff84\001\002\000\104\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\047\uffca" +
    "\050\uffca\052\uffca\053\uffca\055\uffca\056\uffca\060\uffca\061" +
    "\uffca\064\uffca\066\uffca\067\uffca\070\uffca\075\uffca\001\002" +
    "\000\104\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\047\uffc8\050\uffc8\052\uffc8\053\uffc8\055\uffc8" +
    "\056\uffc8\060\uffc8\061\uffc8\064\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\075\uffc8\001\002\000\104\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\052" +
    "\uffc7\053\uffc7\055\uffc7\056\uffc7\060\uffc7\061\uffc7\064\uffc7" +
    "\066\uffc7\067\uffc7\070\uffc7\075\uffc7\001\002\000\006\003" +
    "\175\075\176\001\002\000\004\067\030\001\002\000\004" +
    "\056\027\001\002\000\022\002\ufffa\004\ufffa\005\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\075\ufffa\001\002\000\004" +
    "\075\033\001\002\000\010\055\ufff3\056\ufff3\060\ufff3\001" +
    "\002\000\006\055\171\060\172\001\002\000\012\053\043" +
    "\055\ufff1\056\ufff1\060\ufff1\001\002\000\004\075\033\001" +
    "\002\000\006\055\040\070\uffc4\001\002\000\004\070\037" +
    "\001\002\000\104\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\052\uffc5\053\uffc5" +
    "\055\uffc5\056\uffc5\060\uffc5\061\uffc5\064\uffc5\066\uffc5\067" +
    "\uffc5\070\uffc5\075\uffc5\001\002\000\006\070\uffc3\075\uffc0" +
    "\001\002\000\006\055\042\070\uffc2\001\002\000\006\070" +
    "\uffc1\075\uffbf\001\002\000\030\021\063\046\046\051\045" +
    "\052\065\062\044\065\064\071\074\072\072\073\061\074" +
    "\071\075\020\001\002\000\024\021\uff9d\046\uff9d\062\uff9d" +
    "\065\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\001" +
    "\002\000\030\021\uffa2\046\uffa2\051\uffa2\052\uffa2\062\uffa2" +
    "\065\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\001" +
    "\002\000\024\021\uff9e\046\uff9e\062\uff9e\065\uff9e\071\uff9e" +
    "\072\uff9e\073\uff9e\074\uff9e\075\uff9e\001\002\000\100\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f" +
    "\047\uff9f\050\uff9f\053\uff9f\055\uff9f\056\uff9f\060\uff9f\061" +
    "\uff9f\064\uff9f\066\uff9f\067\uff9f\070\uff9f\001\002\000\100" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\047\uffa3\050\uffa3\053\uffa3\055\uffa3\056\uffa3\060\uffa3" +
    "\061\uffa3\064\uffa3\066\uffa3\067\uffa3\070\uffa3\001\002\000" +
    "\100\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\047\uffa5\050\uffa5\053\uffa5\055\uffa5\056\uffa5\060" +
    "\uffa5\061\uffa5\064\uffa5\066\uffa5\067\uffa5\070\uffa5\001\002" +
    "\000\012\050\102\055\ufff0\056\ufff0\060\ufff0\001\002\000" +
    "\106\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036" +
    "\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\047\uff88\050\uff88\053\uff88\054\uff88\055\uff88\056" +
    "\uff88\060\uff88\061\uff88\063\uff88\064\uff88\065\165\066\uff88" +
    "\067\uff88\070\uff88\001\002\000\100\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\132" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa" +
    "\053\uffaa\055\uffaa\056\uffaa\060\uffaa\061\uffaa\064\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\001\002\000\076\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033" +
    "\126\034\127\035\125\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\047\uffae\050\uffae\053" +
    "\uffae\055\uffae\056\uffae\060\uffae\061\uffae\064\uffae\066\uffae" +
    "\067\uffae\070\uffae\001\002\000\070\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\036\123" +
    "\037\122\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\047\uffb4\050\uffb4\053\uffb4\055\uffb4\056\uffb4\060\uffb4" +
    "\061\uffb4\064\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002\000" +
    "\064\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\040\uffb8\041\uffb8\042\117\043\116\044" +
    "\113\045\114\047\uffb8\050\uffb8\053\uffb8\055\uffb8\056\uffb8" +
    "\060\uffb8\061\uffb8\064\uffb8\066\uffb8\067\uffb8\070\uffb8\001" +
    "\002\000\054\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\040\111\041\110\047\uffba\050" +
    "\uffba\053\uffba\055\uffba\056\uffba\060\uffba\061\uffba\064\uffba" +
    "\066\uffba\067\uffba\070\uffba\001\002\000\100\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\047\uff95" +
    "\050\uff95\053\uff95\055\uff95\056\uff95\060\uff95\061\uff95\064" +
    "\uff95\066\uff95\067\uff95\070\uff95\001\002\000\050\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\047\105\050\uffbc\053\uffbc\055\uffbc\056\uffbc\060\uffbc" +
    "\061\uffbc\064\uffbc\066\uffbc\067\uffbc\070\uffbc\001\002\000" +
    "\020\004\016\005\022\013\025\014\014\063\142\067\144" +
    "\075\020\001\002\000\030\021\063\046\046\051\045\052" +
    "\065\062\044\065\064\071\074\072\072\073\061\074\071" +
    "\075\020\001\002\000\030\021\uffa1\046\uffa1\051\uffa1\052" +
    "\uffa1\062\uffa1\065\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\001\002\000\024\021\063\046\046\062\044\065" +
    "\064\071\074\072\072\073\061\074\071\075\020\001\002" +
    "\000\030\021\063\046\046\051\045\052\065\062\044\065" +
    "\064\071\074\072\072\073\061\074\071\075\020\001\002" +
    "\000\104\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\047\uff9a\050\uff9a\053\uff9a\054\077\055\uff9a" +
    "\056\uff9a\060\uff9a\061\uff9a\063\076\064\uff9a\066\uff9a\067" +
    "\uff9a\070\uff9a\001\002\000\100\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\047\uff94\050\uff94\053" +
    "\uff94\055\uff94\056\uff94\060\uff94\061\uff94\064\uff94\066\uff94" +
    "\067\uff94\070\uff94\001\002\000\100\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\047\uff96\050\uff96" +
    "\053\uff96\055\uff96\056\uff96\060\uff96\061\uff96\064\uff96\066" +
    "\uff96\067\uff96\070\uff96\001\002\000\100\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b\050" +
    "\uff9b\053\uff9b\055\uff9b\056\uff9b\060\uff9b\061\uff9b\064\uff9b" +
    "\066\uff9b\067\uff9b\070\uff9b\001\002\000\100\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040" +
    "\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\047\uff97" +
    "\050\uff97\053\uff97\055\uff97\056\uff97\060\uff97\061\uff97\064" +
    "\uff97\066\uff97\067\uff97\070\uff97\001\002\000\100\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\047" +
    "\uff9c\050\uff9c\053\uff9c\055\uff9c\056\uff9c\060\uff9c\061\uff9c" +
    "\064\uff9c\066\uff9c\067\uff9c\070\uff9c\001\002\000\030\021" +
    "\063\046\046\051\045\052\065\062\044\065\064\071\074" +
    "\072\072\073\061\074\071\075\020\001\002\000\004\075" +
    "\100\001\002\000\104\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a" +
    "\043\uff8a\044\uff8a\045\uff8a\047\uff8a\050\uff8a\053\uff8a\054" +
    "\uff8a\055\uff8a\056\uff8a\060\uff8a\061\uff8a\063\uff8a\064\uff8a" +
    "\066\uff8a\067\uff8a\070\uff8a\001\002\000\006\050\102\064" +
    "\103\001\002\000\030\021\063\046\046\051\045\052\065" +
    "\062\044\065\064\071\074\072\072\073\061\074\071\075" +
    "\020\001\002\000\104\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\047\uff8b\050\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\060\uff8b\061\uff8b\063\uff8b\064\uff8b" +
    "\066\uff8b\067\uff8b\070\uff8b\001\002\000\050\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\047\105\050\uffbd\053\uffbd\055\uffbd\056\uffbd\060\uffbd\061" +
    "\uffbd\064\uffbd\066\uffbd\067\uffbd\070\uffbd\001\002\000\030" +
    "\021\063\046\046\051\045\052\065\062\044\065\064\071" +
    "\074\072\072\073\061\074\071\075\020\001\002\000\054" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\040\111\041\110\047\uffbb\050\uffbb\053\uffbb" +
    "\055\uffbb\056\uffbb\060\uffbb\061\uffbb\064\uffbb\066\uffbb\067" +
    "\uffbb\070\uffbb\001\002\000\030\021\063\046\046\051\045" +
    "\052\065\062\044\065\064\071\074\072\072\073\061\074" +
    "\071\075\020\001\002\000\030\021\uffb7\046\uffb7\051\uffb7" +
    "\052\uffb7\062\uffb7\065\uffb7\071\uffb7\072\uffb7\073\uffb7\074" +
    "\uffb7\075\uffb7\001\002\000\030\021\uffb6\046\uffb6\051\uffb6" +
    "\052\uffb6\062\uffb6\065\uffb6\071\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\001\002\000\064\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\040\uffb9\041" +
    "\uffb9\042\117\043\116\044\113\045\114\047\uffb9\050\uffb9" +
    "\053\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9\064\uffb9\066" +
    "\uffb9\067\uffb9\070\uffb9\001\002\000\030\021\uffb1\046\uffb1" +
    "\051\uffb1\052\uffb1\062\uffb1\065\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\001\002\000\030\021\uffb0\046\uffb0" +
    "\051\uffb0\052\uffb0\062\uffb0\065\uffb0\071\uffb0\072\uffb0\073" +
    "\uffb0\074\uffb0\075\uffb0\001\002\000\030\021\063\046\046" +
    "\051\045\052\065\062\044\065\064\071\074\072\072\073" +
    "\061\074\071\075\020\001\002\000\030\021\uffb2\046\uffb2" +
    "\051\uffb2\052\uffb2\062\uffb2\065\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\001\002\000\030\021\uffb3\046\uffb3" +
    "\051\uffb3\052\uffb3\062\uffb3\065\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\001\002\000\070\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\036" +
    "\123\037\122\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\047\uffb5\050\uffb5\053\uffb5\055\uffb5\056\uffb5\060" +
    "\uffb5\061\uffb5\064\uffb5\066\uffb5\067\uffb5\070\uffb5\001\002" +
    "\000\030\021\063\046\046\051\045\052\065\062\044\065" +
    "\064\071\074\072\072\073\061\074\071\075\020\001\002" +
    "\000\030\021\uffac\046\uffac\051\uffac\052\uffac\062\uffac\065" +
    "\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\001\002" +
    "\000\030\021\uffad\046\uffad\051\uffad\052\uffad\062\uffad\065" +
    "\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\001\002" +
    "\000\076\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\033\126\034\127\035\125\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\047\uffaf\050\uffaf\053\uffaf\055\uffaf\056\uffaf\060\uffaf" +
    "\061\uffaf\064\uffaf\066\uffaf\067\uffaf\070\uffaf\001\002\000" +
    "\030\021\uffa7\046\uffa7\051\uffa7\052\uffa7\062\uffa7\065\uffa7" +
    "\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\001\002\000" +
    "\030\021\uffa9\046\uffa9\051\uffa9\052\uffa9\062\uffa9\065\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\001\002\000" +
    "\030\021\uffa8\046\uffa8\051\uffa8\052\uffa8\062\uffa8\065\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\001\002\000" +
    "\030\021\063\046\046\051\045\052\065\062\044\065\064" +
    "\071\074\072\072\073\061\074\071\075\020\001\002\000" +
    "\100\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\132\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\047\uffab\050\uffab\053\uffab\055\uffab\056\uffab\060" +
    "\uffab\061\uffab\064\uffab\066\uffab\067\uffab\070\uffab\001\002" +
    "\000\030\021\063\046\046\051\045\052\065\062\044\065" +
    "\064\071\074\072\072\073\061\074\071\075\020\001\002" +
    "\000\100\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\047\uffa6\050\uffa6\053\uffa6\055\uffa6\056\uffa6" +
    "\060\uffa6\061\uffa6\064\uffa6\066\uffa6\067\uffa6\070\uffa6\001" +
    "\002\000\100\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\047\uffa4\050\uffa4\053\uffa4\055\uffa4\056" +
    "\uffa4\060\uffa4\061\uffa4\064\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\001\002\000\100\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0\053\uffa0\055\uffa0" +
    "\056\uffa0\060\uffa0\061\uffa0\064\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\001\002\000\006\050\102\066\137\001\002\000\104" +
    "\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030" +
    "\uff89\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89" +
    "\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045" +
    "\uff89\047\uff89\050\uff89\053\uff89\054\uff89\055\uff89\056\uff89" +
    "\060\uff89\061\uff89\063\uff89\064\uff89\066\uff89\067\uff89\070" +
    "\uff89\001\002\000\102\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\045\uff91\047\uff91\050\uff91\052\164\053" +
    "\uff91\055\uff91\056\uff91\060\uff91\061\uff91\064\uff91\066\uff91" +
    "\067\uff91\070\uff91\001\002\000\100\022\uff93\023\uff93\024" +
    "\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\047\uff93\050\uff93" +
    "\053\uff93\055\uff93\056\uff93\060\uff93\061\uff93\064\uff93\066" +
    "\uff93\067\uff93\070\uff93\001\002\000\032\021\063\046\046" +
    "\051\045\052\065\062\044\064\156\065\064\071\074\072" +
    "\072\073\061\074\071\075\020\001\002\000\100\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\047" +
    "\uff92\050\uff92\053\uff92\055\uff92\056\uff92\060\uff92\061\uff92" +
    "\064\uff92\066\uff92\067\uff92\070\uff92\001\002\000\004\075" +
    "\146\001\002\000\006\055\151\070\152\001\002\000\004" +
    "\053\147\001\002\000\030\021\063\046\046\051\045\052" +
    "\065\062\044\065\064\071\074\072\072\073\061\074\071" +
    "\075\020\001\002\000\010\050\102\055\uff8d\070\uff8d\001" +
    "\002\000\004\075\153\001\002\000\100\022\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\047\uff8e\050" +
    "\uff8e\053\uff8e\055\uff8e\056\uff8e\060\uff8e\061\uff8e\064\uff8e" +
    "\066\uff8e\067\uff8e\070\uff8e\001\002\000\004\053\154\001" +
    "\002\000\030\021\063\046\046\051\045\052\065\062\044" +
    "\065\064\071\074\072\072\073\061\074\071\075\020\001" +
    "\002\000\010\050\102\055\uff8c\070\uff8c\001\002\000\100" +
    "\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\047\uff90\050\uff90\053\uff90\055\uff90\056\uff90\060\uff90" +
    "\061\uff90\064\uff90\066\uff90\067\uff90\070\uff90\001\002\000" +
    "\012\050\102\055\uff87\064\uff87\066\uff87\001\002\000\006" +
    "\055\161\064\162\001\002\000\030\021\063\046\046\051" +
    "\045\052\065\062\044\065\064\071\074\072\072\073\061" +
    "\074\071\075\020\001\002\000\100\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f\050\uff8f" +
    "\053\uff8f\055\uff8f\056\uff8f\060\uff8f\061\uff8f\064\uff8f\066" +
    "\uff8f\067\uff8f\070\uff8f\001\002\000\012\050\102\055\uff86" +
    "\064\uff86\066\uff86\001\002\000\104\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc" +
    "\052\uffcc\053\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc\064" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\075\uffcc\001\002\000\032" +
    "\021\063\046\046\051\045\052\065\062\044\065\064\066" +
    "\166\071\074\072\072\073\061\074\071\075\020\001\002" +
    "\000\100\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\047\uff98\050\uff98\053\uff98\055\uff98\056\uff98" +
    "\060\uff98\061\uff98\064\uff98\066\uff98\067\uff98\070\uff98\001" +
    "\002\000\006\055\161\066\170\001\002\000\100\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\047" +
    "\uff99\050\uff99\053\uff99\055\uff99\056\uff99\060\uff99\061\uff99" +
    "\064\uff99\066\uff99\067\uff99\070\uff99\001\002\000\004\075" +
    "\033\001\002\000\014\004\016\005\022\013\025\014\014" +
    "\075\020\001\002\000\010\052\164\055\uffbe\070\uffbe\001" +
    "\002\000\010\055\ufff2\056\ufff2\060\ufff2\001\002\000\004" +
    "\053\201\001\002\000\004\053\177\001\002\000\014\004" +
    "\016\005\022\013\025\014\014\075\020\001\002\000\006" +
    "\052\164\056\ufff6\001\002\000\014\004\016\005\022\013" +
    "\025\014\014\075\020\001\002\000\006\052\164\056\ufff5" +
    "\001\002\000\004\075\204\001\002\000\112\022\uff85\023" +
    "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85" +
    "\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\047\uff85" +
    "\050\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\060" +
    "\uff85\061\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85" +
    "\070\uff85\075\uff85\001\002\000\022\002\ufff9\004\ufff9\005" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\075\ufff9\001\002" +
    "\000\004\065\207\001\002\000\010\051\210\066\uffed\075" +
    "\214\001\002\000\004\075\311\001\002\000\006\061\307" +
    "\066\uffec\001\002\000\004\066\217\001\002\000\006\061" +
    "\uffeb\066\uffeb\001\002\000\004\060\215\001\002\000\014" +
    "\004\016\005\022\013\025\014\014\075\020\001\002\000" +
    "\010\052\164\061\uffe9\066\uffe9\001\002\000\006\061\220" +
    "\067\221\001\002\000\014\004\016\005\022\013\025\014" +
    "\014\075\020\001\002\000\052\003\235\004\016\005\022" +
    "\006\223\010\232\011\240\013\025\014\014\016\231\021" +
    "\063\046\046\051\045\052\065\062\044\065\064\071\074" +
    "\072\072\073\061\074\071\075\020\001\002\000\022\002" +
    "\uffef\004\uffef\005\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\075\uffef\001\002\000\030\021\063\046\046\051\045\052" +
    "\065\062\044\065\064\071\074\072\072\073\061\074\071" +
    "\075\020\001\002\000\054\003\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0\021\uffe0" +
    "\046\uffe0\051\uffe0\052\uffe0\062\uffe0\065\uffe0\070\uffe0\071" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\001\002\000\004" +
    "\056\274\001\002\000\062\022\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\047\uff9b\050\uff9b\053\uff9b" +
    "\056\273\001\002\000\004\056\272\001\002\000\054\003" +
    "\235\004\016\005\022\006\223\010\232\011\240\013\025" +
    "\014\014\016\231\021\063\046\046\051\045\052\065\062" +
    "\044\065\064\070\270\071\074\072\072\073\061\074\071" +
    "\075\020\001\002\000\030\021\063\046\046\051\045\052" +
    "\065\062\044\065\064\071\074\072\072\073\061\074\071" +
    "\075\020\001\002\000\030\021\063\046\046\051\045\052" +
    "\065\062\044\065\064\071\074\072\072\073\061\074\071" +
    "\075\020\001\002\000\004\056\264\001\002\000\054\003" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6" +
    "\014\uffe6\016\uffe6\021\uffe6\046\uffe6\051\uffe6\052\uffe6\062" +
    "\uffe6\065\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6" +
    "\075\uffe6\001\002\000\054\003\uffde\004\uffde\005\uffde\006" +
    "\uffde\010\uffde\011\uffde\013\uffde\014\uffde\016\uffde\021\uffde" +
    "\046\uffde\051\uffde\052\uffde\062\uffde\065\uffde\070\uffde\071" +
    "\uffde\072\uffde\073\uffde\074\uffde\075\uffde\001\002\000\054" +
    "\003\uffe1\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\013" +
    "\uffe1\014\uffe1\016\uffe1\021\uffe1\046\uffe1\051\uffe1\052\uffe1" +
    "\062\uffe1\065\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\075\uffe1\001\002\000\072\022\uff88\023\uff88\024\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033" +
    "\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88" +
    "\042\uff88\043\uff88\044\uff88\045\uff88\047\uff88\050\uff88\052" +
    "\uffc7\053\uff88\054\uff88\063\uff88\065\165\075\uffc7\001\002" +
    "\000\004\075\256\001\002\000\026\022\252\023\245\024" +
    "\242\025\243\026\247\027\250\030\253\031\244\050\102" +
    "\053\246\001\002\000\030\021\uffd9\046\uffd9\051\uffd9\052" +
    "\uffd9\062\uffd9\065\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\075\uffd9\001\002\000\030\021\uffd8\046\uffd8\051\uffd8\052" +
    "\uffd8\062\uffd8\065\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8" +
    "\075\uffd8\001\002\000\030\021\uffd4\046\uffd4\051\uffd4\052" +
    "\uffd4\062\uffd4\065\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\075\uffd4\001\002\000\030\021\uffda\046\uffda\051\uffda\052" +
    "\uffda\062\uffda\065\uffda\071\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\001\002\000\030\021\063\046\046\051\045\052" +
    "\065\062\044\065\064\071\074\072\072\073\061\074\071" +
    "\075\020\001\002\000\030\021\uffd7\046\uffd7\051\uffd7\052" +
    "\uffd7\062\uffd7\065\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\001\002\000\030\021\uffd6\046\uffd6\051\uffd6\052" +
    "\uffd6\062\uffd6\065\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6" +
    "\075\uffd6\001\002\000\030\021\063\046\046\051\045\052" +
    "\065\062\044\065\064\071\074\072\072\073\061\074\071" +
    "\075\020\001\002\000\030\021\uffdb\046\uffdb\051\uffdb\052" +
    "\uffdb\062\uffdb\065\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\001\002\000\030\021\uffd5\046\uffd5\051\uffd5\052" +
    "\uffd5\062\uffd5\065\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\001\002\000\006\050\102\056\uffdc\001\002\000" +
    "\006\050\102\056\uffdd\001\002\000\004\053\257\001\002" +
    "\000\030\021\063\046\046\051\045\052\065\062\044\065" +
    "\064\071\074\072\072\073\061\074\071\075\020\001\002" +
    "\000\006\050\102\061\261\001\002\000\030\021\063\046" +
    "\046\051\045\052\065\062\044\065\064\071\074\072\072" +
    "\073\061\074\071\075\020\001\002\000\006\050\102\067" +
    "\221\001\002\000\054\003\uffce\004\uffce\005\uffce\006\uffce" +
    "\010\uffce\011\uffce\013\uffce\014\uffce\016\uffce\021\uffce\046" +
    "\uffce\051\uffce\052\uffce\062\uffce\065\uffce\070\uffce\071\uffce" +
    "\072\uffce\073\uffce\074\uffce\075\uffce\001\002\000\054\003" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\011\uffdf\013\uffdf" +
    "\014\uffdf\016\uffdf\021\uffdf\046\uffdf\051\uffdf\052\uffdf\062" +
    "\uffdf\065\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf" +
    "\075\uffdf\001\002\000\006\050\102\067\221\001\002\000" +
    "\054\003\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\011\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\021\uffcf\046\uffcf\051\uffcf\052" +
    "\uffcf\062\uffcf\065\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\074\uffcf\075\uffcf\001\002\000\006\050\102\056\uffcd\001" +
    "\002\000\064\002\uffe7\003\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\021\uffe7\046\uffe7\051\uffe7\052\uffe7\062\uffe7" +
    "\065\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075" +
    "\uffe7\001\002\000\054\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\014\uffe5\016\uffe5\021\uffe5\046" +
    "\uffe5\051\uffe5\052\uffe5\062\uffe5\065\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\001\002\000\054\003" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\016\uffe4\021\uffe4\046\uffe4\051\uffe4\052\uffe4\062" +
    "\uffe4\065\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\001\002\000\054\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\010\uffe2\011\uffe2\013\uffe2\014\uffe2\016\uffe2\021\uffe2" +
    "\046\uffe2\051\uffe2\052\uffe2\062\uffe2\065\uffe2\070\uffe2\071" +
    "\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\001\002\000\054" +
    "\003\uffe3\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3\013" +
    "\uffe3\014\uffe3\016\uffe3\021\uffe3\046\uffe3\051\uffe3\052\uffe3" +
    "\062\uffe3\065\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\075\uffe3\001\002\000\006\050\102\067\221\001\002" +
    "\000\056\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\300\010" +
    "\uffd2\011\uffd2\013\uffd2\014\uffd2\016\uffd2\021\uffd2\046\uffd2" +
    "\051\uffd2\052\uffd2\062\uffd2\065\uffd2\070\uffd2\071\uffd2\072" +
    "\uffd2\073\uffd2\074\uffd2\075\uffd2\001\002\000\054\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\010\uffd3\011\uffd3\013\uffd3\014" +
    "\uffd3\016\uffd3\021\uffd3\046\uffd3\051\uffd3\052\uffd3\062\uffd3" +
    "\065\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\001\002\000\032\021\063\046\046\051\045\052\065" +
    "\062\044\065\064\067\221\071\074\072\072\073\061\074" +
    "\071\075\020\001\002\000\054\003\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1\016\uffd1\021" +
    "\uffd1\046\uffd1\051\uffd1\052\uffd1\062\uffd1\065\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\001\002\000" +
    "\006\050\102\067\221\001\002\000\056\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\300\010\uffd2\011\uffd2\013\uffd2\014" +
    "\uffd2\016\uffd2\021\uffd2\046\uffd2\051\uffd2\052\uffd2\062\uffd2" +
    "\065\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075" +
    "\uffd2\001\002\000\054\003\uffd0\004\uffd0\005\uffd0\006\uffd0" +
    "\010\uffd0\011\uffd0\013\uffd0\014\uffd0\016\uffd0\021\uffd0\046" +
    "\uffd0\051\uffd0\052\uffd0\062\uffd0\065\uffd0\070\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\075\uffd0\001\002\000\006\052" +
    "\164\067\221\001\002\000\022\002\uffee\004\uffee\005\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\075\uffee\001\002\000" +
    "\006\051\210\075\214\001\002\000\006\061\uffea\066\uffea" +
    "\001\002\000\004\060\312\001\002\000\014\004\016\005" +
    "\022\013\025\014\014\075\020\001\002\000\010\052\164" +
    "\061\uffe8\066\uffe8\001\002\000\014\004\016\005\022\013" +
    "\025\014\014\075\020\001\002\000\006\052\164\055\316" +
    "\001\002\000\004\071\317\001\002\000\004\066\320\001" +
    "\002\000\104\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\047\uffcb\050\uffcb\052\uffcb\053\uffcb\055" +
    "\uffcb\056\uffcb\060\uffcb\061\uffcb\064\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\075\uffcb\001\002\000\006\055\171\056\ufff4\001" +
    "\002\000\004\020\326\001\002\000\004\020\324\001\002" +
    "\000\004\075\325\001\002\000\026\002\ufffd\003\ufffd\004" +
    "\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\017\ufffd" +
    "\075\ufffd\001\002\000\006\003\327\075\330\001\002\000" +
    "\026\002\ufffc\003\ufffc\004\ufffc\005\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\017\ufffc\075\ufffc\001\002\000\026\002" +
    "\uffff\003\uffff\004\uffff\005\uffff\012\uffff\013\uffff\014\uffff" +
    "\015\uffff\017\uffff\075\uffff\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\005\025\010\016\011\010\026\012\027" +
    "\020\030\011\063\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\030\007\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\030\007\031\031" +
    "\035\032\033\033\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\030\007\031\033" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\025\072\034\051\035\061\036\057\037\056" +
    "\040\055\041\054\042\053\043\050\044\047\045\046\046" +
    "\067\055\066\056\065\057\074\063\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\127\001" +
    "\001\000\004\053\120\001\001\000\004\052\114\001\001" +
    "\000\004\051\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\026\137\027\020\030\011\060\140\061\142" +
    "\063\022\001\001\000\042\025\072\034\135\035\061\036" +
    "\057\037\056\040\055\041\054\042\053\043\050\044\047" +
    "\045\046\046\067\055\066\056\065\057\074\063\052\001" +
    "\001\000\002\001\001\000\020\025\072\044\134\045\046" +
    "\046\067\056\065\057\074\063\052\001\001\000\024\025" +
    "\072\043\133\044\047\045\046\046\067\055\066\056\065" +
    "\057\074\063\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\025\072\034\100\035\061\036" +
    "\057\037\056\040\055\041\054\042\053\043\050\044\047" +
    "\045\046\046\067\055\066\056\065\057\074\063\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\025\072\035\103\036\057\037\056\040\055\041" +
    "\054\042\053\043\050\044\047\045\046\046\067\055\066" +
    "\056\065\057\074\063\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\025\072\036\105\037\056\040\055" +
    "\041\054\042\053\043\050\044\047\045\046\046\067\055" +
    "\066\056\065\057\074\063\052\001\001\000\004\051\106" +
    "\001\001\000\034\025\072\037\111\040\055\041\054\042" +
    "\053\043\050\044\047\045\046\046\067\055\066\056\065" +
    "\057\074\063\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\025\072\040\117\041\054\042\053\043" +
    "\050\044\047\045\046\046\067\055\066\056\065\057\074" +
    "\063\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\120\001\001\000\030\025\072\041\123\042\053" +
    "\043\050\044\047\045\046\046\067\055\066\056\065\057" +
    "\074\063\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\025\072\042\130\043\050" +
    "\044\047\045\046\046\067\055\066\056\065\057\074\063" +
    "\052\001\001\000\002\001\001\000\024\025\072\043\132" +
    "\044\047\045\046\046\067\055\066\056\065\057\074\063" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\025\072\034\156\035\061" +
    "\036\057\037\056\040\055\041\054\042\053\043\050\044" +
    "\047\045\046\046\067\047\157\055\066\056\065\057\074" +
    "\063\052\001\001\000\002\001\001\000\004\062\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\025\072" +
    "\034\147\035\061\036\057\037\056\040\055\041\054\042" +
    "\053\043\050\044\047\045\046\046\067\055\066\056\065" +
    "\057\074\063\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\025\072" +
    "\034\154\035\061\036\057\037\056\040\055\041\054\042" +
    "\053\043\050\044\047\045\046\046\067\055\066\056\065" +
    "\057\074\063\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\025\072" +
    "\034\162\035\061\036\057\037\056\040\055\041\054\042" +
    "\053\043\050\044\047\045\046\046\067\055\066\056\065" +
    "\057\074\063\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\025\072\034\156\035\061" +
    "\036\057\037\056\040\055\041\054\042\053\043\050\044" +
    "\047\045\046\046\067\047\166\055\066\056\065\057\074" +
    "\063\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\173\001\001\000\012\026\172" +
    "\027\020\030\011\063\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\177\027\020\030\011\063\022\001\001\000\002\001" +
    "\001\000\012\026\201\027\020\030\011\063\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\211\013\210" +
    "\014\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\215\027\020\030\011\063\022\001\001\000\002\001" +
    "\001\000\004\015\221\001\001\000\012\026\304\027\020" +
    "\030\011\063\022\001\001\000\066\010\226\016\227\017" +
    "\233\020\224\021\235\022\223\023\232\025\225\026\012" +
    "\027\020\030\011\034\240\035\061\036\057\037\056\040" +
    "\055\041\054\042\053\043\050\044\047\045\046\046\067" +
    "\055\066\056\065\057\074\063\236\001\001\000\002\001" +
    "\001\000\042\025\072\034\274\035\061\036\057\037\056" +
    "\040\055\041\054\042\053\043\050\044\047\045\046\046" +
    "\067\055\066\056\065\057\074\063\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\010\226\017\270\020\224\021\235\022\223" +
    "\023\232\025\225\026\012\027\020\030\011\034\240\035" +
    "\061\036\057\037\056\040\055\041\054\042\053\043\050" +
    "\044\047\045\046\046\067\055\066\056\065\057\074\063" +
    "\236\001\001\000\042\025\072\034\266\035\061\036\057" +
    "\037\056\040\055\041\054\042\053\043\050\044\047\045" +
    "\046\046\067\055\066\056\065\057\074\063\052\001\001" +
    "\000\042\025\072\034\264\035\061\036\057\037\056\040" +
    "\055\041\054\042\053\043\050\044\047\045\046\046\067" +
    "\055\066\056\065\057\074\063\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\025\072\034\254\035\061\036" +
    "\057\037\056\040\055\041\054\042\053\043\050\044\047" +
    "\045\046\046\067\055\066\056\065\057\074\063\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\025\072" +
    "\034\253\035\061\036\057\037\056\040\055\041\054\042" +
    "\053\043\050\044\047\045\046\046\067\055\066\056\065" +
    "\057\074\063\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\025\072\034\257\035\061\036\057\037\056\040" +
    "\055\041\054\042\053\043\050\044\047\045\046\046\067" +
    "\055\066\056\065\057\074\063\052\001\001\000\002\001" +
    "\001\000\042\025\072\034\261\035\061\036\057\037\056" +
    "\040\055\041\054\042\053\043\050\044\047\045\046\046" +
    "\067\055\066\056\065\057\074\063\052\001\001\000\004" +
    "\015\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\275\001\001" +
    "\000\004\024\276\001\001\000\002\001\001\000\044\015" +
    "\300\025\072\034\301\035\061\036\057\037\056\040\055" +
    "\041\054\042\053\043\050\044\047\045\046\046\067\055" +
    "\066\056\065\057\074\063\052\001\001\000\002\001\001" +
    "\000\004\015\302\001\001\000\004\024\303\001\001\000" +
    "\002\001\001\000\004\015\305\001\001\000\002\001\001" +
    "\000\004\014\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\312\027\020\030\011\063\022\001\001" +
    "\000\002\001\001\000\012\026\314\027\020\030\011\063" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJaja$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

    public Symbol iniciarParseo() throws Exception {
    	Symbol res = this.parse();
        if (errores.hayErrores()) {
            System.err.println("El programa contiene errores sintácticos. Abortando...");
            System.exit(1);
        }
        return res;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJaja$actions {
  private final AnalizadorSintacticoJaja parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJaja$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_Imports Lista_Declaraciones 
            {
              Programa RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Programa(lImp, lDecl); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJaja$parser.done_parsing();
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_Imports ::= Lista_Imports TRAFICAR RUTA COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lImp.add(new Import(ruta, id)); RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_Imports ::= 
            {
              List<Import> RESULT =null;
		 RESULT = new ArrayList<Import>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_Imports ::= Lista_Imports TRAFICAR error COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 System.err.println("Error al importar un archivo, ruta incorrecta. Usa \"ruta/relativa/a/fichero.jaja\".");
                 RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Imports ::= Lista_Imports TRAFICAR RUTA COMO error 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 System.err.println("Error al importar un archivo, identificador incorrecto.");
                 RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Imports ::= Lista_Imports error 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 System.err.println("Sintaxis de importación incorrecta. Utiliza \"#traficar ruta/relativa/a/fichero.jaja como identificador\".");
                 RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion_Alias PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionAlias dAlias = (DeclaracionAlias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dAlias); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Variables PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables dGen = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Funcion 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionFun dGen = (DeclaracionFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Declaraciones ::= 
            {
              ListaDeclaraciones RESULT =null;
		 RESULT = new ListaDeclaraciones(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionAlias(id, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declaracion_Alias ::= INCOGNITO error ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 System.err.println("Declaración de alias incorrecta. Identificador no válido.");
                     RESULT = null; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl_Variables ::= Tipo Lista_Decl_Asignaciones 
            {
              DeclaracionVariables RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Lista_Decl_Asignaciones ::= Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionVar> lista_var = new ArrayList<DeclaracionVar>();
                        lista_var.add(var); RESULT = lista_var; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		List<DeclaracionVar> lDecl = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(var); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Decl_Asig ::= IDEN 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Decl_Asig ::= IDEN ASIGNACION Expresion 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-6)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Lista_Parametros ::= 
            {
              List<DeclaracionPar> RESULT =null;
		 RESULT = new ArrayList<DeclaracionPar>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Lista_Parametros ::= Lista_Parametros2 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Lista_Parametros2 ::= Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionPar> lista_par = new ArrayList<DeclaracionPar>();
                  lista_par.add(par); RESULT = lista_par; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_Parametros2 ::= Lista_Parametros2 FLECHA Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lPar.add(par); RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Parametro ::= IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Parametro ::= DIRECCION IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bloque_Anidado ::= LLAP Lista_Instrucciones LLCIERRE 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> LIns = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = LIns; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bloque_Anidado",11, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lista_Instrucciones ::= Instruccion 
            {
              List<Instruccion> RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
                    lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruccion ::= Decl_Variables PUNTOCOMA 
            {
              Instruccion RESULT =null;
		DeclaracionVariables decl = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = decl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= Asignacion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = as; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instruccion ::= Llamada_Fun PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Instruccion ::= Condicional 
            {
              Instruccion RESULT =null;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= Bucle 
            {
              Instruccion RESULT =null;
		Instruccion buc = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = buc; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= Inst_Return PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion iRet = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = iRet; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Asignacion ::= Expresion ASIGNACION Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, expr2); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Asignacion ::= Expresion OpBin Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, new OperadorBin(op, expr1, expr2)); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OpBin ::= POTASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.POT; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OpBin ::= MULASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OpBin ::= DIVASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OpBin ::= MODASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OpBin ::= SUMAASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OpBin ::= RESTAASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OpBin ::= CONJASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.CONJ; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OpBin ::= DISYASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DISY; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Condicional ::= SI Expresion Bloque_Anidado Cond_Else 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional",15, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Cond_Else ::= 
            {
              InsCond RESULT =null;
		 RESULT = new InsCond(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Cond_Else ::= SINO Bloque_Anidado 
            {
              InsCond RESULT =null;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Cond_Else ::= SINO Expresion Bloque_Anidado Cond_Else 
            {
              InsCond RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bucle ::= MIENTRAS Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleWhile(expr, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bucle ::= PARA IDEN ASIGNACION Expresion FLECHA Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-5)).value;
		Expresion exprIni = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion exprFin = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleFor(id, exprIni, exprFin, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Inst_Return ::= DEVUELVE Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsReturn(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return",17, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo ::= Tipo PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoPuntero(tipo); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo ::= VECTOR PAP Tipo COMA ENTERO PCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoArray(tipo, ent); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo ::= T 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // T ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = TipoEntero.instancia();  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // T ::= BIN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBinario.instancia(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // T ::= Identificador 
            {
              Tipo RESULT =null;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new TipoAlias(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // T ::= Tipo_Reg 
            {
              Tipo RESULT =null;
		Tipo t_reg = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t_reg; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_Reg ::= REGISTRO LLAP Matriz_Atributos LLCIERRE 
            {
              Tipo RESULT =null;
		ListaDeclaraciones mAtrib = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoRegistro(mAtrib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg",22, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matriz_Atributos ::= Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Matriz_Atributos ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Matriz_Atributos2 ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                  mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matriz_Atributos2 ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS Tipo 
            {
              DeclaracionVariables RESULT =null;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos",25, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion ::= Expresion DISY E1 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.DISY, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion ::= E1 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e1; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E1 ::= E1 CONJ E2 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.CONJ, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e2; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op2 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op2, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e3; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP2 ::= DESIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DESIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2 ::= IGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.IGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E3 ::= E3 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op3 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op3, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e4; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP3 ::= MAYOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP3 ::= MENOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP3 ::= MAYORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP3 ::= MENORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= E4 OP4 E5 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op4 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op4, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion e5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e5; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP4 ::= SUMA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP4 ::= RESTA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E5 ::= E5 OP5 E6 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op5 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op5, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion e6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e6; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP5 ::= MUL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP5 ::= DIV 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP5 ::= MOD 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E6 ::= E6 POT E7 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.POT, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion e7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e7; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E7 ::= OP7 E7 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op7 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op7, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion e8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e8; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP7 ::= DIRECCION 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.DIRECCION; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP7 ::= PUNTERO 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.PUNTERO; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E8 ::= OP8 E8 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op8 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op8, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E8 ::= E9 
            {
              Expresion RESULT =null;
		Expresion e9 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e9; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP8 ::= NEG 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.NEG; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP8 ::= MENOS 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.MENOS; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E9 ::= Literal 
            {
              Expresion RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E9 ::= Llamada_Fun 
            {
              Expresion RESULT =null;
		Llamada ll = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = ll; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E9 ::= E10 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Llamada_Fun ::= Identificador PAP Lista_Expresiones PCIERRE 
            {
              Llamada RESULT =null;
		Identificador izquierda = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new Llamada(izquierda, lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Llamada_Fun ::= Identificador PAP PCIERRE 
            {
              Llamada RESULT =null;
		Identificador izquierda = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 RESULT = new Llamada(izquierda, new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		Entero e = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Literal ::= FACTO 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Literal ::= FAKE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Literal ::= NULO 
            {
              Literal RESULT =null;
		Nulo n = (Nulo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Literal ::= NUEVO Array_Literal 
            {
              Literal RESULT =null;
		LiteralArray aL = (LiteralArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = aL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Literal ::= NUEVO Struct_Literal 
            {
              Literal RESULT =null;
		LiteralStruct sL = (LiteralStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = sL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Literal ::= NUEVO Tipo 
            {
              Literal RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DirDinamica(t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Array_Literal ::= CAP CCIERRE 
            {
              LiteralArray RESULT =null;
		 RESULT = new LiteralArray(new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Array_Literal ::= CAP Lista_Expresiones CCIERRE 
            {
              LiteralArray RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralArray(lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Struct_Literal ::= LLAP Lista_Asig_Atributos LLCIERRE 
            {
              LiteralStruct RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralStruct(lAtr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Struct_Literal",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Lista_Asig_Atributos ::= IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 Map<String, Expresion> valores = new HashMap<String, Expresion>();
                     valores.put(id, expr); RESULT = valores; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",48, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Lista_Asig_Atributos ::= Lista_Asig_Atributos COMA IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lAtr.put(id, expr); RESULT = lAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",48, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E10 ::= E10 CAP Expresion CCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new AccesoArray(izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E10 ::= E10 PUNTO IDEN 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new AccesoStruct(izquierda, id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E10 ::= PAP Expresion PCIERRE 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E10 ::= Identificador 
            {
              Expresion RESULT =null;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Lista_Expresiones ::= Expresion 
            {
              List<Expresion> RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Expresion> lExpr = new ArrayList<Expresion>();
                   lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Lista_Expresiones ::= Lista_Expresiones COMA Expresion 
            {
              List<Expresion> RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Identificador ::= IDEN CUATROPUNTOS IDEN 
            {
              Identificador RESULT =null;
		String lib = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id, lib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador",49, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Identificador ::= IDEN 
            {
              Identificador RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador",49, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoJaja$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                               CUP$AnalizadorSintacticoJaja$act_num,
                               CUP$AnalizadorSintacticoJaja$parser,
                               CUP$AnalizadorSintacticoJaja$stack,
                               CUP$AnalizadorSintacticoJaja$top);
    }
}

