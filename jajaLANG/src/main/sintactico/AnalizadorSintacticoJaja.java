
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Mar 20 10:19:05 CET 2024
//----------------------------------------------------

package main.sintactico;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.*;
import main.lexico.AnalizadorLexicoJaja;
import main.lexico.UnidadLexica;
import main.errors.GestionErroresJaja;
import main.ast.Nodo;
import main.ast.Identificador;
import main.ast.Programa;
import main.ast.declaraciones.*;
import main.ast.expresiones.*;
import main.ast.instrucciones.*;
import main.ast.literales.*;
import main.ast.tipos.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Mar 20 10:19:05 CET 2024
  */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJaja() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\002\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\006\000" +
    "\002\010\004\000\002\007\003\000\002\007\005\000\002" +
    "\006\003\000\002\006\005\000\002\011\010\000\002\011" +
    "\012\000\002\012\002\000\002\012\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\005\000\002\014\006\000" +
    "\002\015\005\000\002\016\003\000\002\016\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\020\005" +
    "\000\002\021\006\000\002\022\002\000\002\022\004\000" +
    "\002\022\006\000\002\023\005\000\002\023\010\000\002" +
    "\024\004\000\002\025\004\000\002\025\006\000\002\025" +
    "\003\000\002\030\003\000\002\030\005\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\006\000\002\031\003\000\002\031\004\000\002" +
    "\031\004\000\002\031\005\000\002\032\004\000\002\032" +
    "\005\000\002\033\005\000\002\034\005\000\002\034\003" +
    "\000\002\035\005\000\002\035\003\000\002\036\005\000" +
    "\002\036\003\000\002\050\003\000\002\050\003\000\002" +
    "\037\005\000\002\037\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\040\005" +
    "\000\002\040\003\000\002\052\003\000\002\052\003\000" +
    "\002\041\005\000\002\041\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\042\005\000\002\042" +
    "\003\000\002\043\004\000\002\043\003\000\002\054\003" +
    "\000\002\054\003\000\002\044\004\000\002\044\003\000" +
    "\002\055\003\000\002\055\003\000\002\045\003\000\002" +
    "\045\005\000\002\045\006\000\002\045\005\000\002\045" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\004\000\002\056\004\000" +
    "\002\057\004\000\002\057\005\000\002\060\005\000\002" +
    "\061\005\000\002\061\007\000\002\046\006\000\002\046" +
    "\005\000\002\046\003\000\002\047\003\000\002\047\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\022\002\ufffe\004\ufffe\005\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\016\ufffe\062\ufffe\001\002\000\004\002\300" +
    "\001\002\000\022\002\ufffa\004\ufffa\005\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\016\006\062\ufffa\001\002\000\004\062\275" +
    "\001\002\000\020\002\001\004\014\005\020\012\013\013" +
    "\022\014\021\062\016\001\002\000\020\002\ufffb\004\ufffb" +
    "\005\ufffb\012\ufffb\013\ufffb\014\ufffb\062\ufffb\001\002\000" +
    "\034\002\uffd2\004\uffd2\005\uffd2\012\uffd2\013\uffd2\014\uffd2" +
    "\040\uffd2\043\uffd2\046\uffd2\053\uffd2\054\uffd2\055\uffd2\062" +
    "\uffd2\001\002\000\010\040\166\054\165\062\027\001\002" +
    "\000\004\062\200\001\002\000\034\002\uffd5\004\uffd5\005" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\040\uffd5\043\uffd5\046\uffd5" +
    "\053\uffd5\054\uffd5\055\uffd5\062\uffd5\001\002\000\020\002" +
    "\ufffc\004\ufffc\005\ufffc\012\ufffc\013\ufffc\014\ufffc\062\ufffc" +
    "\001\002\000\034\002\uffd3\004\uffd3\005\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\040\uffd3\043\uffd3\046\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\062\uffd3\001\002\000\034\002\uffd8\004\uffd8\005" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\040\uffd8\043\uffd8\046\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\062\uffd8\001\002\000\034\002" +
    "\uffd4\004\uffd4\005\uffd4\012\uffd4\013\uffd4\014\uffd4\040\uffd4" +
    "\043\uffd4\046\uffd4\053\uffd4\054\uffd4\055\uffd4\062\uffd4\001" +
    "\002\000\004\062\175\001\002\000\004\054\024\001\002" +
    "\000\020\002\ufffd\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\062\ufffd\001\002\000\004\062\027\001\002\000\026" +
    "\002\ufff7\004\ufff7\005\ufff7\012\ufff7\013\ufff7\014\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\062\ufff7\001\002\000\006\043\162" +
    "\045\163\001\002\000\030\002\ufff5\004\ufff5\005\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\041\037\043\ufff5\044\ufff5\045\ufff5" +
    "\062\ufff5\001\002\000\004\062\027\001\002\000\006\043" +
    "\034\055\uffd0\001\002\000\004\055\033\001\002\000\034" +
    "\002\uffd1\004\uffd1\005\uffd1\012\uffd1\013\uffd1\014\uffd1\040" +
    "\uffd1\043\uffd1\046\uffd1\053\uffd1\054\uffd1\055\uffd1\062\uffd1" +
    "\001\002\000\006\055\uffcf\062\uffcc\001\002\000\006\043" +
    "\036\055\uffce\001\002\000\006\055\uffcd\062\uffcb\001\002" +
    "\000\030\015\040\034\043\037\042\040\061\047\041\052" +
    "\060\056\067\057\066\060\057\061\065\062\047\001\002" +
    "\000\006\050\143\054\142\001\002\000\024\015\uffa9\034" +
    "\uffa9\047\uffa9\052\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\001\002\000\030\015\uffae\034\uffae\037\uffae\040" +
    "\uffae\047\uffae\052\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\062\uffae\001\002\000\024\015\uffaa\034\uffaa\047\uffaa\052" +
    "\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\001\002" +
    "\000\074\002\uffab\004\uffab\005\uffab\012\uffab\013\uffab\014" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\035" +
    "\uffab\036\uffab\043\uffab\044\uffab\045\uffab\046\uffab\051\uffab" +
    "\053\uffab\054\uffab\055\uffab\062\uffab\001\002\000\074\002" +
    "\uffaf\004\uffaf\005\uffaf\012\uffaf\013\uffaf\014\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\051\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\062\uffaf\001\002\000\074\002\uffb1\004\uffb1" +
    "\005\uffb1\012\uffb1\013\uffb1\014\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\051\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\062\uffb1\001\002\000\102\002\uff96\004\uff96\005\uff96\012" +
    "\uff96\013\uff96\014\uff96\020\uff96\021\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\035\uff96\036\uff96\042\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\062\uff96\001\002\000\030\002\ufff4\004\ufff4" +
    "\005\ufff4\012\ufff4\013\ufff4\014\ufff4\036\102\043\ufff4\044" +
    "\ufff4\045\ufff4\062\ufff4\001\002\000\074\002\uffb6\004\uffb6" +
    "\005\uffb6\012\uffb6\013\uffb6\014\uffb6\020\131\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\062\uffb6\001\002\000\072\002\uffba\004\uffba\005\uffba\012" +
    "\uffba\013\uffba\014\uffba\021\125\022\126\023\124\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\035\uffba\036\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\051\uffba\053\uffba\054\uffba\055\uffba\062\uffba\001\002\000" +
    "\064\002\uffc0\004\uffc0\005\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\024\122\025\121\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\035\uffc0\036\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\062\uffc0\001" +
    "\002\000\060\002\uffc4\004\uffc4\005\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\026\uffc4\027\uffc4\030\116\031\115\032\113\033" +
    "\112\035\uffc4\036\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\051\uffc4\053\uffc4\054\uffc4\055\uffc4\062\uffc4\001\002\000" +
    "\050\002\uffc6\004\uffc6\005\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\026\110\027\107\035\uffc6\036\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\051\uffc6\053\uffc6\054\uffc6\055\uffc6\062\uffc6" +
    "\001\002\000\044\002\uffc8\004\uffc8\005\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\035\104\036\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\051\uffc8\053\uffc8\054\uffc8\055\uffc8\062\uffc8\001" +
    "\002\000\074\002\uffa1\004\uffa1\005\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\035\uffa1\036\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\051" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\062\uffa1\001\002\000\030" +
    "\015\040\034\043\037\042\040\061\047\041\052\060\056" +
    "\067\057\066\060\057\061\065\062\047\001\002\000\030" +
    "\015\uffad\034\uffad\037\uffad\040\uffad\047\uffad\052\uffad\056" +
    "\uffad\057\uffad\060\uffad\061\uffad\062\uffad\001\002\000\024" +
    "\015\040\034\043\047\041\052\060\056\067\057\066\060" +
    "\057\061\065\062\047\001\002\000\030\015\040\034\043" +
    "\037\042\040\061\047\041\052\060\056\067\057\066\060" +
    "\057\061\065\062\047\001\002\000\102\002\uffa4\004\uffa4" +
    "\005\uffa4\012\uffa4\013\uffa4\014\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\035\uffa4\036\uffa4\042\072\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\050\071\051\uffa4\052\073" +
    "\053\uffa4\054\uffa4\055\uffa4\062\uffa4\001\002\000\074\002" +
    "\uffa0\004\uffa0\005\uffa0\012\uffa0\013\uffa0\014\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0\036\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\051\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\062\uffa0\001\002\000\074\002\uffa2\004\uffa2" +
    "\005\uffa2\012\uffa2\013\uffa2\014\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\035\uffa2\036\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\051\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\062\uffa2\001\002\000\074\002\uffa3\004\uffa3\005\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\035\uffa3\036\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\051\uffa3\053\uffa3\054\uffa3\055\uffa3\062\uffa3\001" +
    "\002\000\074\002\uffa8\004\uffa8\005\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\035\uffa8\036\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\051" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\062\uffa8\001\002\000\030" +
    "\015\040\034\043\037\042\040\061\047\041\052\060\056" +
    "\067\057\066\060\057\061\065\062\047\001\002\000\004" +
    "\062\133\001\002\000\032\015\040\034\043\037\042\040" +
    "\061\047\041\052\060\053\074\056\067\057\066\060\057" +
    "\061\065\062\047\001\002\000\074\002\uffa5\004\uffa5\005" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\035\uffa5\036\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\051\uffa5\053\uffa5\054\uffa5\055\uffa5\062" +
    "\uffa5\001\002\000\012\036\102\043\uff95\051\uff95\053\uff95" +
    "\001\002\000\006\043\077\053\100\001\002\000\030\015" +
    "\040\034\043\037\042\040\061\047\041\052\060\056\067" +
    "\057\066\060\057\061\065\062\047\001\002\000\074\002" +
    "\uffa6\004\uffa6\005\uffa6\012\uffa6\013\uffa6\014\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\035\uffa6\036\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\051\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\062\uffa6\001\002\000\012\036\102\043\uff94" +
    "\051\uff94\053\uff94\001\002\000\030\015\040\034\043\037" +
    "\042\040\061\047\041\052\060\056\067\057\066\060\057" +
    "\061\065\062\047\001\002\000\044\002\uffc9\004\uffc9\005" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\035\104\036\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\051\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\062\uffc9\001\002\000\030\015\040\034\043\037\042" +
    "\040\061\047\041\052\060\056\067\057\066\060\057\061" +
    "\065\062\047\001\002\000\050\002\uffc7\004\uffc7\005\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\026\110\027\107\035\uffc7\036" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\051\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\062\uffc7\001\002\000\030\015\040\034" +
    "\043\037\042\040\061\047\041\052\060\056\067\057\066" +
    "\060\057\061\065\062\047\001\002\000\030\015\uffc3\034" +
    "\uffc3\037\uffc3\040\uffc3\047\uffc3\052\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\001\002\000\030\015\uffc2\034" +
    "\uffc2\037\uffc2\040\uffc2\047\uffc2\052\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\001\002\000\060\002\uffc5\004" +
    "\uffc5\005\uffc5\012\uffc5\013\uffc5\014\uffc5\026\uffc5\027\uffc5" +
    "\030\116\031\115\032\113\033\112\035\uffc5\036\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\051\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\062\uffc5\001\002\000\030\015\uffbc\034\uffbc\037" +
    "\uffbc\040\uffbc\047\uffbc\052\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\001\002\000\030\015\uffbd\034\uffbd\037" +
    "\uffbd\040\uffbd\047\uffbd\052\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\001\002\000\030\015\040\034\043\037" +
    "\042\040\061\047\041\052\060\056\067\057\066\060\057" +
    "\061\065\062\047\001\002\000\030\015\uffbe\034\uffbe\037" +
    "\uffbe\040\uffbe\047\uffbe\052\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\001\002\000\030\015\uffbf\034\uffbf\037" +
    "\uffbf\040\uffbf\047\uffbf\052\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\001\002\000\064\002\uffc1\004\uffc1\005" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\024\122\025\121\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\051\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\062\uffc1\001\002\000\030\015\040\034" +
    "\043\037\042\040\061\047\041\052\060\056\067\057\066" +
    "\060\057\061\065\062\047\001\002\000\030\015\uffb8\034" +
    "\uffb8\037\uffb8\040\uffb8\047\uffb8\052\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\001\002\000\030\015\uffb9\034" +
    "\uffb9\037\uffb9\040\uffb9\047\uffb9\052\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\001\002\000\072\002\uffbb\004" +
    "\uffbb\005\uffbb\012\uffbb\013\uffbb\014\uffbb\021\125\022\126" +
    "\023\124\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\051\uffbb\053\uffbb\054\uffbb\055\uffbb\062" +
    "\uffbb\001\002\000\030\015\uffb3\034\uffb3\037\uffb3\040\uffb3" +
    "\047\uffb3\052\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\001\002\000\030\015\uffb5\034\uffb5\037\uffb5\040\uffb5" +
    "\047\uffb5\052\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\001\002\000\030\015\uffb4\034\uffb4\037\uffb4\040\uffb4" +
    "\047\uffb4\052\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\001\002\000\030\015\040\034\043\037\042\040\061" +
    "\047\041\052\060\056\067\057\066\060\057\061\065\062" +
    "\047\001\002\000\074\002\uffb7\004\uffb7\005\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\020\131\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\035\uffb7\036\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\062\uffb7\001\002" +
    "\000\030\015\040\034\043\037\042\040\061\047\041\052" +
    "\060\056\067\057\066\060\057\061\065\062\047\001\002" +
    "\000\074\002\uffb2\004\uffb2\005\uffb2\012\uffb2\013\uffb2\014" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\035" +
    "\uffb2\036\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\051\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\062\uffb2\001\002\000\104\002" +
    "\uff97\004\uff97\005\uff97\012\uff97\013\uff97\014\uff97\020\uff97" +
    "\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\035\uff97\036\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050" +
    "\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\062\uff97" +
    "\001\002\000\006\036\102\051\135\001\002\000\104\002" +
    "\uff98\004\uff98\005\uff98\012\uff98\013\uff98\014\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\030\uff98\031\uff98\032\uff98\033\uff98\035\uff98\036\uff98" +
    "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\062\uff98" +
    "\001\002\000\074\002\uffb0\004\uffb0\005\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\035\uffb0\036\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\051\uffb0\053\uffb0\054\uffb0\055\uffb0\062\uffb0\001\002\000" +
    "\074\002\uffac\004\uffac\005\uffac\012\uffac\013\uffac\014\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\035\uffac" +
    "\036\uffac\043\uffac\044\uffac\045\uffac\046\uffac\051\uffac\053" +
    "\uffac\054\uffac\055\uffac\062\uffac\001\002\000\006\036\102" +
    "\053\141\001\002\000\074\002\uffa7\004\uffa7\005\uffa7\012" +
    "\uffa7\013\uffa7\014\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\035\uffa7\036\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\051\uffa7\053\uffa7\054\uffa7\055\uffa7\062\uffa7\001" +
    "\002\000\004\062\152\001\002\000\032\015\040\034\043" +
    "\037\042\040\061\047\041\051\146\052\060\056\067\057" +
    "\066\060\057\061\065\062\047\001\002\000\074\002\uff9e" +
    "\004\uff9e\005\uff9e\012\uff9e\013\uff9e\014\uff9e\020\uff9e\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\035\uff9e\036\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\051\uff9e\053\uff9e\054\uff9e" +
    "\055\uff9e\062\uff9e\001\002\000\074\002\uff9f\004\uff9f\005" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\051\uff9f\053\uff9f\054\uff9f\055\uff9f\062" +
    "\uff9f\001\002\000\074\002\uff9d\004\uff9d\005\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\035\uff9d\036\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\051\uff9d\053\uff9d\054\uff9d\055\uff9d\062\uff9d\001\002" +
    "\000\006\043\077\051\150\001\002\000\074\002\uff9c\004" +
    "\uff9c\005\uff9c\012\uff9c\013\uff9c\014\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\035\uff9c\036\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\051\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\062\uff9c\001\002\000\006\043\155\055\156\001\002" +
    "\000\004\041\153\001\002\000\030\015\040\034\043\037" +
    "\042\040\061\047\041\052\060\056\067\057\066\060\057" +
    "\061\065\062\047\001\002\000\010\036\102\043\uff9a\055" +
    "\uff9a\001\002\000\004\062\157\001\002\000\074\002\uff9b" +
    "\004\uff9b\005\uff9b\012\uff9b\013\uff9b\014\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b" +
    "\030\uff9b\031\uff9b\032\uff9b\033\uff9b\035\uff9b\036\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\051\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\062\uff9b\001\002\000\004\041\160\001\002\000" +
    "\030\015\040\034\043\037\042\040\061\047\041\052\060" +
    "\056\067\057\066\060\057\061\065\062\047\001\002\000" +
    "\010\036\102\043\uff99\055\uff99\001\002\000\004\062\027" +
    "\001\002\000\012\004\014\005\020\013\022\062\016\001" +
    "\002\000\012\040\166\043\uffca\054\165\055\uffca\001\002" +
    "\000\004\056\170\001\002\000\034\002\uffda\004\uffda\005" +
    "\uffda\012\uffda\013\uffda\014\uffda\040\uffda\043\uffda\046\uffda" +
    "\053\uffda\054\uffda\055\uffda\062\uffda\001\002\000\006\043" +
    "\171\055\172\001\002\000\006\043\uffd7\055\uffd7\001\002" +
    "\000\004\056\173\001\002\000\034\002\uffd9\004\uffd9\005" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\040\uffd9\043\uffd9\046\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\062\uffd9\001\002\000\006\043" +
    "\uffd6\055\uffd6\001\002\000\026\002\ufff6\004\ufff6\005\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\043\ufff6\044\ufff6\045\ufff6\062" +
    "\ufff6\001\002\000\004\041\176\001\002\000\012\004\014" +
    "\005\020\013\022\062\016\001\002\000\024\002\ufff9\004" +
    "\ufff9\005\ufff9\012\ufff9\013\ufff9\014\ufff9\040\166\054\165" +
    "\062\ufff9\001\002\000\004\052\201\001\002\000\010\037" +
    "\202\053\ufff1\062\206\001\002\000\004\062\271\001\002" +
    "\000\006\046\267\053\ufff0\001\002\000\004\053\211\001" +
    "\002\000\006\046\uffef\053\uffef\001\002\000\004\045\207" +
    "\001\002\000\012\004\014\005\020\013\022\062\016\001" +
    "\002\000\012\040\166\046\uffed\053\uffed\054\165\001\002" +
    "\000\006\046\212\054\213\001\002\000\012\004\014\005" +
    "\020\013\022\062\016\001\002\000\044\004\014\005\020" +
    "\006\215\010\223\011\231\013\022\015\222\034\043\037" +
    "\042\040\061\047\041\052\060\056\067\057\066\060\057" +
    "\061\065\062\230\001\002\000\020\002\ufff3\004\ufff3\005" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\062\ufff3\001\002\000\030" +
    "\015\040\034\043\037\042\040\061\047\041\052\060\056" +
    "\067\057\066\060\057\061\065\062\047\001\002\000\046" +
    "\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\013\uffe4\015" +
    "\uffe4\034\uffe4\037\uffe4\040\uffe4\047\uffe4\052\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000" +
    "\004\044\252\001\002\000\004\044\251\001\002\000\046" +
    "\004\014\005\020\006\215\010\223\011\231\013\022\015" +
    "\222\034\043\037\042\040\061\047\041\052\060\055\247" +
    "\056\067\057\066\060\057\061\065\062\230\001\002\000" +
    "\034\015\040\034\043\037\042\040\061\047\041\050\143" +
    "\052\060\054\142\056\067\057\066\060\057\061\065\062" +
    "\047\001\002\000\030\015\040\034\043\037\042\040\061" +
    "\047\041\052\060\056\067\057\066\060\057\061\065\062" +
    "\047\001\002\000\004\044\243\001\002\000\046\004\uffea" +
    "\005\uffea\006\uffea\010\uffea\011\uffea\013\uffea\015\uffea\034" +
    "\uffea\037\uffea\040\uffea\047\uffea\052\uffea\055\uffea\056\uffea" +
    "\057\uffea\060\uffea\061\uffea\062\uffea\001\002\000\050\020" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\035\uffa4\036" +
    "\uffa4\041\241\042\072\044\uffa4\050\071\052\073\001\002" +
    "\000\046\004\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5\013" +
    "\uffe5\015\uffe5\034\uffe5\037\uffe5\040\uffe5\047\uffe5\052\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\001" +
    "\002\000\056\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033" +
    "\uff96\035\uff96\036\uff96\040\uffd3\041\uff96\042\uff96\044\uff96" +
    "\050\uff96\052\uff96\054\uffd3\062\uffd3\001\002\000\004\062" +
    "\234\001\002\000\006\036\102\044\233\001\002\000\046" +
    "\004\uffe6\005\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6\015" +
    "\uffe6\034\uffe6\037\uffe6\040\uffe6\047\uffe6\052\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\001\002\000" +
    "\030\015\040\034\043\037\042\040\061\047\041\052\060" +
    "\056\067\057\066\060\057\061\065\062\047\001\002\000" +
    "\006\036\102\046\236\001\002\000\030\015\040\034\043" +
    "\037\042\040\061\047\041\052\060\056\067\057\066\060" +
    "\057\061\065\062\047\001\002\000\006\036\102\054\213" +
    "\001\002\000\046\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011" +
    "\uffdc\013\uffdc\015\uffdc\034\uffdc\037\uffdc\040\uffdc\047\uffdc" +
    "\052\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\001\002\000\030\015\040\034\043\037\042\040\061" +
    "\047\041\052\060\056\067\057\066\060\057\061\065\062" +
    "\047\001\002\000\006\036\102\044\uffe2\001\002\000\046" +
    "\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3\013\uffe3\015" +
    "\uffe3\034\uffe3\037\uffe3\040\uffe3\047\uffe3\052\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\001\002\000" +
    "\006\036\102\054\213\001\002\000\046\004\uffdd\005\uffdd" +
    "\006\uffdd\010\uffdd\011\uffdd\013\uffdd\015\uffdd\034\uffdd\037" +
    "\uffdd\040\uffdd\047\uffdd\052\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\001\002\000\006\036\102\044" +
    "\uffdb\001\002\000\056\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\034\uffeb\037\uffeb\040\uffeb\047\uffeb\052\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000" +
    "\046\004\uffe9\005\uffe9\006\uffe9\010\uffe9\011\uffe9\013\uffe9" +
    "\015\uffe9\034\uffe9\037\uffe9\040\uffe9\047\uffe9\052\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\001\002" +
    "\000\046\004\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\013" +
    "\uffe8\015\uffe8\034\uffe8\037\uffe8\040\uffe8\047\uffe8\052\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\001" +
    "\002\000\046\004\uffe7\005\uffe7\006\uffe7\010\uffe7\011\uffe7" +
    "\013\uffe7\015\uffe7\034\uffe7\037\uffe7\040\uffe7\047\uffe7\052" +
    "\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\001\002\000\006\036\102\054\213\001\002\000\050\004" +
    "\uffe0\005\uffe0\006\uffe0\007\255\010\uffe0\011\uffe0\013\uffe0" +
    "\015\uffe0\034\uffe0\037\uffe0\040\uffe0\047\uffe0\052\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\001\002" +
    "\000\032\015\040\034\043\037\042\040\061\047\041\052" +
    "\060\054\213\056\067\057\066\060\057\061\065\062\047" +
    "\001\002\000\046\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011" +
    "\uffe1\013\uffe1\015\uffe1\034\uffe1\037\uffe1\040\uffe1\047\uffe1" +
    "\052\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\001\002\000\046\004\uffdf\005\uffdf\006\uffdf\010\uffdf" +
    "\011\uffdf\013\uffdf\015\uffdf\034\uffdf\037\uffdf\040\uffdf\047" +
    "\uffdf\052\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\001\002\000\006\036\102\054\213\001\002\000" +
    "\050\004\uffe0\005\uffe0\006\uffe0\007\255\010\uffe0\011\uffe0" +
    "\013\uffe0\015\uffe0\034\uffe0\037\uffe0\040\uffe0\047\uffe0\052" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\001\002\000\046\004\uffde\005\uffde\006\uffde\010\uffde\011" +
    "\uffde\013\uffde\015\uffde\034\uffde\037\uffde\040\uffde\047\uffde" +
    "\052\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\001\002\000\006\040\166\054\264\001\002\000\044" +
    "\004\014\005\020\006\215\010\223\011\231\013\022\015" +
    "\222\034\043\037\042\040\061\047\041\052\060\056\266" +
    "\057\066\060\057\061\065\062\230\001\002\000\020\002" +
    "\ufff2\004\ufff2\005\ufff2\012\ufff2\013\ufff2\014\ufff2\062\ufff2" +
    "\001\002\000\044\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\035\uffa3\036\uffa3\043\uffd7\044\uffa3\055\uffd7\001" +
    "\002\000\006\037\202\062\206\001\002\000\006\046\uffee" +
    "\053\uffee\001\002\000\004\045\272\001\002\000\012\004" +
    "\014\005\020\013\022\062\016\001\002\000\012\040\166" +
    "\046\uffec\053\uffec\054\165\001\002\000\024\002\ufff8\004" +
    "\ufff8\005\ufff8\012\ufff8\013\ufff8\014\ufff8\043\162\044\ufff8" +
    "\062\ufff8\001\002\000\004\017\276\001\002\000\004\062" +
    "\277\001\002\000\022\002\uffff\004\uffff\005\uffff\012\uffff" +
    "\013\uffff\014\uffff\016\uffff\062\uffff\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\016" +
    "\005\022\010\014\011\007\025\011\026\016\027\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\024" +
    "\007\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\024\007\025\031\031\032\027\033\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\024\007\025\033\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\034\047" +
    "\035\055\036\054\037\053\040\052\041\051\042\050\043" +
    "\045\044\044\045\043\046\063\054\062\055\061\056\067" +
    "\001\001\000\006\057\144\060\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\126\001\001" +
    "\000\004\052\117\001\001\000\004\051\113\001\001\000" +
    "\004\050\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\034\137\035\055\036\054\037\053\040\052\041" +
    "\051\042\050\043\045\044\044\045\043\046\063\054\062" +
    "\055\061\056\067\001\001\000\002\001\001\000\014\044" +
    "\136\045\043\046\063\055\061\056\067\001\001\000\020" +
    "\043\135\044\044\045\043\046\063\054\062\055\061\056" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\034" +
    "\133\035\055\036\054\037\053\040\052\041\051\042\050" +
    "\043\045\044\044\045\043\046\063\054\062\055\061\056" +
    "\067\001\001\000\002\001\001\000\040\034\074\035\055" +
    "\036\054\037\053\040\052\041\051\042\050\043\045\044" +
    "\044\045\043\046\063\047\075\054\062\055\061\056\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\034\100\035\055\036\054\037\053\040\052" +
    "\041\051\042\050\043\045\044\044\045\043\046\063\054" +
    "\062\055\061\056\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\035\102\036\054\037\053\040\052\041" +
    "\051\042\050\043\045\044\044\045\043\046\063\054\062" +
    "\055\061\056\067\001\001\000\002\001\001\000\032\036" +
    "\104\037\053\040\052\041\051\042\050\043\045\044\044" +
    "\045\043\046\063\054\062\055\061\056\067\001\001\000" +
    "\004\050\105\001\001\000\030\037\110\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\063\054\062\055" +
    "\061\056\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\040\116\041\051\042\050\043\045\044\044" +
    "\045\043\046\063\054\062\055\061\056\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\117\001\001" +
    "\000\024\041\122\042\050\043\045\044\044\045\043\046" +
    "\063\054\062\055\061\056\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\042\127" +
    "\043\045\044\044\045\043\046\063\054\062\055\061\056" +
    "\067\001\001\000\002\001\001\000\020\043\131\044\044" +
    "\045\043\046\063\054\062\055\061\056\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\150\001\001\000\040" +
    "\034\074\035\055\036\054\037\053\040\052\041\051\042" +
    "\050\043\045\044\044\045\043\046\063\047\146\054\062" +
    "\055\061\056\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\034\153\035" +
    "\055\036\054\037\053\040\052\041\051\042\050\043\045" +
    "\044\044\045\043\046\063\054\062\055\061\056\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\034\160\035\055\036\054\037" +
    "\053\040\052\041\051\042\050\043\045\044\044\045\043" +
    "\046\063\054\062\055\061\056\067\001\001\000\002\001" +
    "\001\000\004\006\173\001\001\000\010\025\163\026\016" +
    "\027\010\001\001\000\002\001\001\000\004\030\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\176\026\016" +
    "\027\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\203\013\202\014\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\207\026\016\027\010\001\001" +
    "\000\002\001\001\000\004\015\213\001\001\000\010\025" +
    "\262\026\016\027\010\001\001\000\062\010\217\016\220" +
    "\017\224\020\216\021\226\023\215\024\223\025\011\026" +
    "\016\027\010\034\231\035\055\036\054\037\053\040\052" +
    "\041\051\042\050\043\045\044\044\045\043\046\225\054" +
    "\062\055\061\056\067\001\001\000\002\001\001\000\036" +
    "\034\252\035\055\036\054\037\053\040\052\041\051\042" +
    "\050\043\045\044\044\045\043\046\063\054\062\055\061" +
    "\056\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\010\217\017\247\020\216\021\226" +
    "\023\215\024\223\025\011\026\016\027\010\034\231\035" +
    "\055\036\054\037\053\040\052\041\051\042\050\043\045" +
    "\044\044\045\043\046\225\054\062\055\061\056\067\001" +
    "\001\000\042\034\245\035\055\036\054\037\053\040\052" +
    "\041\051\042\050\043\045\044\044\045\043\046\063\054" +
    "\062\055\061\056\067\057\144\060\143\001\001\000\036" +
    "\034\243\035\055\036\054\037\053\040\052\041\051\042" +
    "\050\043\045\044\044\045\043\046\063\054\062\055\061" +
    "\056\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\034" +
    "\234\035\055\036\054\037\053\040\052\041\051\042\050" +
    "\043\045\044\044\045\043\046\063\054\062\055\061\056" +
    "\067\001\001\000\002\001\001\000\036\034\236\035\055" +
    "\036\054\037\053\040\052\041\051\042\050\043\045\044" +
    "\044\045\043\046\063\054\062\055\061\056\067\001\001" +
    "\000\004\015\237\001\001\000\002\001\001\000\036\034" +
    "\241\035\055\036\054\037\053\040\052\041\051\042\050" +
    "\043\045\044\044\045\043\046\063\054\062\055\061\056" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\253\001\001\000\004\022\255\001" +
    "\001\000\040\015\256\034\257\035\055\036\054\037\053" +
    "\040\052\041\051\042\050\043\045\044\044\045\043\046" +
    "\063\054\062\055\061\056\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\260\001\001\000\004\022" +
    "\261\001\001\000\002\001\001\000\004\015\264\001\001" +
    "\000\064\010\217\016\220\017\224\020\216\021\226\023" +
    "\215\024\223\025\011\026\016\027\010\030\166\034\231" +
    "\035\055\036\054\037\053\040\052\041\051\042\050\043" +
    "\045\044\044\045\043\046\225\054\062\055\061\056\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\272\026\016\027\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJaja$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJaja$actions {
  private final AnalizadorSintacticoJaja parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJaja$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_Imports Lista_Declaraciones 
            {
              Programa RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Programa(lImp, lDecl); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJaja$parser.done_parsing();
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_Imports ::= Lista_Imports TRAFICAR IDEN COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lImp.add(new Import(ruta)); RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_Imports ::= 
            {
              List<Import> RESULT =null;
		 RESULT = new ArrayList<Import>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion_Alias 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionAlias dAlias = (DeclaracionAlias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dAlias); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Variables 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables dGen = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Funcion 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionFun dGen = (DeclaracionFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Declaraciones ::= 
            {
              ListaDeclaraciones RESULT =null;
		 RESULT = new ListaDeclaraciones(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionAlias(id, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl_Variables ::= Tipo Lista_Decl_Asignaciones 
            {
              DeclaracionVariables RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Decl_Asignaciones ::= Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionVar> lista_var = new ArrayList<DeclaracionVar>();
                        lista_var.add(var); RESULT = lista_var; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		List<DeclaracionVar> lDecl = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(var); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl_Asig ::= IDEN 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl_Asig ::= IDEN ASIGNACION Expresion 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 Result = new DeclaracionVar(var, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-6)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Parametros ::= 
            {
              List<DeclaracionPar> RESULT =null;
		 RESULT = new ArrayList<DeclaracionPar>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Parametros ::= Lista_Parametros2 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Parametros2 ::= Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionPar> lista_par = new ArrayList<DeclaracionPar>();
                  lista_par.add(par); RESULT = lista_par; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Parametros2 ::= Lista_Parametros2 FLECHA Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lPar.add(par); RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Parametro ::= IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Parametro ::= DIRECCION IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bloque_Anidado ::= LLAP Lista_Instrucciones LLCIERRE 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> LIns = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = LIns; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bloque_Anidado",11, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_Instrucciones ::= Instruccion 
            {
              List<Instruccion> RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
                    lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= Decl_Variables PUNTOCOMA 
            {
              Instruccion RESULT =null;
		DeclaracionVariables decl = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = decl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruccion ::= Asignacion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = as; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= Expresion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruccion ::= Condicional 
            {
              Instruccion RESULT =null;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruccion ::= Bucle 
            {
              Instruccion RESULT =null;
		Instruccion buc = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = buc; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= Inst_Return PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion iRet = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = iRet; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= E10 ASIGNACION Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, expr2);  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condicional ::= SI Expresion Bloque_Anidado Cond_Else 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion cond_else = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional",15, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Cond_Else ::= 
            {
              Instruccion RESULT =null;
		 RESULT = new InsCond(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Cond_Else ::= SINO Bloque_Anidado 
            {
              Instruccion RESULT =null;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Cond_Else ::= SINO Expresion Bloque_Anidado Cond_Else 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion cond_else = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bucle ::= MIENTRAS Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleWhile(expr, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",17, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bucle ::= PARA IDEN Expresion FLECHA Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Expresion exprIni = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion exprFin = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleFor(id, exprIni, exprFin, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",17, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst_Return ::= DEVUELVE Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsReturn(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo ::= Tipo PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoPuntero(tipo); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo ::= Tipo LLAP Lista_Enteros LLCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		List<Integer> lEnt = (List<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoArray(tipo, lEnt); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo ::= T 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Lista_Enteros ::= ENTERO 
            {
              List<Integer> RESULT =null;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = (new ArrayList<Integer>()).add(ent); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Enteros",22, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Lista_Enteros ::= Lista_Enteros COMA ENTERO 
            {
              List<Integer> RESULT =null;
		List<Integer> lEnt = (List<Integer>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lEnt.add(ent); RESULT = lEnt; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Enteros",22, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // T ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = TipoEntero.instancia();  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // T ::= BIN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBinario.instancia(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // T ::= IDEN 
            {
              Tipo RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new TipoAlias(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // T ::= Tipo_Reg 
            {
              Tipo RESULT =null;
		Tipo t_reg = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t_reg; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_Reg ::= REGISTRO LLAP Matriz_Atributos LLCIERRE 
            {
              Tipo RESULT =null;
		ListaDeclaraciones mAtrib = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoRegistro(mAtrib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matriz_Atributos ::= Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matriz_Atributos ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Matriz_Atributos2 ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                  mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matriz_Atributos2 ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS Tipo 
            {
              DeclaracionVariables RESULT =null;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos",25, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= Expresion DISY E1 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.DISY, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= E1 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e1; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E1 ::= E1 CONJ E2 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.CONJ, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e2; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op2 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op2, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e3; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP2 ::= DESIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DESIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP2 ::= IGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.IGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E3 ::= E3 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op3 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op3, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e4; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP3 ::= MAYOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP3 ::= MENOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP3 ::= MAYORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP3 ::= MENORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E4 ::= E4 OP4 E5 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op4 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op4, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion e5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e5; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP4 ::= SUMA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP4 ::= RESTA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= E5 OP5 E6 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op5 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op5, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion e6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e6; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP5 ::= MUL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP5 ::= DIV 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP5 ::= MOD 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E6 ::= E6 POT E7 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.POT, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion e7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e7; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= OP7 E7 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op7 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op7, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion e8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e8; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP7 ::= DIRECCION 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIRECCION; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP7 ::= PUNTERO 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.PUNTERO; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E8 ::= OP8 E8 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op8 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op8, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E8 ::= E9 
            {
              Expresion RESULT =null;
		Expresion e9 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e9; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP8 ::= NEG 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.NEG; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP8 ::= MENOS 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.MENOS; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E9 ::= Literal 
            {
              Expresion RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E9 ::= PAP Expresion PCIERRE 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E9 ::= E10 PAP Lista_Expresiones PCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new Llamada(izquierda, lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E9 ::= E10 PAP PCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 RESULT = new Llamada(izquierda, new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E9 ::= E10 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		Entero e = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Literal ::= FACTO 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Literal ::= FAKE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Literal ::= NULO 
            {
              Literal RESULT =null;
		Nulo n = (Nulo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Literal ::= DEVUELVE Array_Literal 
            {
              Literal RESULT =null;
		LiteralArray aL = (LiteralArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = aL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Literal ::= DEVUELVE Struct_Literal 
            {
              Literal RESULT =null;
		LiteralStruct sL = (LiteralStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = sL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Array_Literal ::= CAP CCIERRE 
            {
              LiteralArray RESULT =null;
		 RESULT = new LiteralArray(new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Array_Literal ::= CAP Lista_Expresiones CCIERRE 
            {
              LiteralArray RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralArray(lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Struct_Literal ::= LLAP Lista_Asig_Atributos LLCIERRE 
            {
              LiteralStruct RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralStruct(lAtr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Struct_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Lista_Asig_Atributos ::= IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 Map<String, Expresion> valores = new HashMap<String, Expresion>();
                     valores.put(id, expr); RESULT = valores; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Lista_Asig_Atributos ::= Lista_Asig_Atributos COMA IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 valores.put(id, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E10 ::= E10 CAP Expresion CCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new AccesoArray(izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E10 ::= E10 PUNTO IDEN 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new AccesoStruct(izquierda, id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E10 ::= IDEN 
            {
              Expresion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Lista_Expresiones ::= Expresion 
            {
              List<Expresion> RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = (new ArrayList<Expresion>()).add(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Lista_Expresiones ::= Lista_Expresiones COMA Expresion 
            {
              List<Expresion> RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = lExpr.add(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoJaja$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                               CUP$AnalizadorSintacticoJaja$act_num,
                               CUP$AnalizadorSintacticoJaja$parser,
                               CUP$AnalizadorSintacticoJaja$stack,
                               CUP$AnalizadorSintacticoJaja$top);
    }
}

