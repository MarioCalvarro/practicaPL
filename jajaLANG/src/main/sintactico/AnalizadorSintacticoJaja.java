
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Mar 20 22:56:19 CET 2024
//----------------------------------------------------

package main.sintactico;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.*;
import main.lexico.AnalizadorLexicoJaja;
import main.lexico.UnidadLexica;
import main.errors.GestionErroresJaja;
import main.ast.Programa;
import main.ast.Import;
import main.ast.declaraciones.*;
import main.ast.expresiones.*;
import main.ast.instrucciones.*;
import main.ast.literales.*;
import main.ast.tipos.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Mar 20 22:56:19 CET 2024
  */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJaja() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\002\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\006\000" +
    "\002\010\004\000\002\007\003\000\002\007\005\000\002" +
    "\006\003\000\002\006\005\000\002\011\010\000\002\011" +
    "\012\000\002\012\002\000\002\012\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\005\000\002\014\006\000" +
    "\002\015\005\000\002\016\003\000\002\016\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\020\005" +
    "\000\002\021\006\000\002\024\002\000\002\024\004\000" +
    "\002\024\006\000\002\022\005\000\002\022\010\000\002" +
    "\023\004\000\002\026\004\000\002\026\007\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\006\000\002\031\003\000" +
    "\002\031\004\000\002\031\004\000\002\031\005\000\002" +
    "\032\004\000\002\032\005\000\002\033\005\000\002\034" +
    "\005\000\002\034\003\000\002\035\005\000\002\035\003" +
    "\000\002\036\005\000\002\036\003\000\002\050\003\000" +
    "\002\050\003\000\002\037\005\000\002\037\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\040\005\000\002\040\003\000\002\052\003" +
    "\000\002\052\003\000\002\041\005\000\002\041\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\042\005\000\002\042\003\000\002\043\004\000\002\043" +
    "\003\000\002\054\003\000\002\054\003\000\002\044\004" +
    "\000\002\044\003\000\002\055\003\000\002\055\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\025\006\000\002\025\005\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\004" +
    "\000\002\056\004\000\002\057\004\000\002\057\005\000" +
    "\002\060\005\000\002\061\005\000\002\061\007\000\002" +
    "\046\006\000\002\046\005\000\002\046\005\000\002\046" +
    "\003\000\002\047\003\000\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\024\002\ufffe\004\ufffe\005\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\017\ufffe\063\ufffe\001\002\000\004" +
    "\002\276\001\002\000\024\002\ufffa\004\ufffa\005\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\017\006\063\ufffa\001\002" +
    "\000\004\063\273\001\002\000\022\002\001\004\016\005" +
    "\021\012\013\013\023\014\014\015\022\063\020\001\002" +
    "\000\022\002\ufffb\004\ufffb\005\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\063\ufffb\001\002\000\040\002\uffd4\004\uffd4" +
    "\005\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\041\uffd4\044" +
    "\uffd4\047\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\063\uffd4" +
    "\001\002\000\006\041\167\063\031\001\002\000\004\063" +
    "\200\001\002\000\004\053\174\001\002\000\022\002\ufffc" +
    "\004\ufffc\005\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\063" +
    "\ufffc\001\002\000\040\002\uffd7\004\uffd7\005\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\041\uffd7\044\uffd7\047\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\063\uffd7\001\002\000\040" +
    "\002\uffd8\004\uffd8\005\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\041\uffd8\044\uffd8\047\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\063\uffd8\001\002\000\040\002\uffd5\004\uffd5\005" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\041\uffd5\044\uffd5" +
    "\047\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\063\uffd5\001" +
    "\002\000\040\002\uffd6\004\uffd6\005\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\041\uffd6\044\uffd6\047\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\063\uffd6\001\002\000\004\063\171" +
    "\001\002\000\004\055\025\001\002\000\022\002\ufffd\004" +
    "\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\063\ufffd" +
    "\001\002\000\004\063\031\001\002\000\030\002\ufff7\004" +
    "\ufff7\005\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\063\ufff7\001\002\000\006\044\164\046" +
    "\165\001\002\000\004\063\031\001\002\000\032\002\ufff5" +
    "\004\ufff5\005\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\042" +
    "\036\044\ufff5\045\ufff5\046\ufff5\063\ufff5\001\002\000\006" +
    "\044\035\056\uffd2\001\002\000\004\056\034\001\002\000" +
    "\040\002\uffd3\004\uffd3\005\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\041\uffd3\044\uffd3\047\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\063\uffd3\001\002\000\006\056\uffd1\063\uffce" +
    "\001\002\000\030\016\037\035\042\040\041\041\057\050" +
    "\040\053\060\057\067\060\065\061\055\062\063\063\046" +
    "\001\002\000\006\051\143\055\142\001\002\000\024\016" +
    "\uffab\035\uffab\050\uffab\053\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\001\002\000\030\016\uffb0\035\uffb0\040" +
    "\uffb0\041\uffb0\050\uffb0\053\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\001\002\000\024\016\uffac\035\uffac\050" +
    "\uffac\053\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\001\002\000\076\002\uffad\004\uffad\005\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\036\uffad\037\uffad\044\uffad\045\uffad\046\uffad" +
    "\047\uffad\052\uffad\054\uffad\055\uffad\056\uffad\063\uffad\001" +
    "\002\000\076\002\uffb1\004\uffb1\005\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\036\uffb1\037\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\052\uffb1\054\uffb1\055\uffb1\056\uffb1\063\uffb1\001\002" +
    "\000\076\002\uffb3\004\uffb3\005\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\036\uffb3\037\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\052\uffb3\054\uffb3\055\uffb3\056\uffb3\063\uffb3\001\002\000" +
    "\104\002\uff97\004\uff97\005\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\036\uff97\037\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\051\uff97\052\uff97\053\133\054\uff97\055\uff97\056\uff97" +
    "\063\uff97\001\002\000\032\002\ufff4\004\ufff4\005\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\037\075\044\ufff4\045\ufff4" +
    "\046\ufff4\063\ufff4\001\002\000\076\002\uffb8\004\uffb8\005" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\021\125\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\036\uffb8\037\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\052\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\063\uffb8\001\002\000\074\002\uffbc\004\uffbc\005\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\022\121\023\122\024" +
    "\120\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\036\uffbc\037\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\063\uffbc" +
    "\001\002\000\066\002\uffc2\004\uffc2\005\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\025\116\026\115\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2\037\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\052\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\063\uffc2\001\002\000\062\002\uffc6\004\uffc6\005" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\027\uffc6\030\uffc6" +
    "\031\112\032\111\033\106\034\107\036\uffc6\037\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\052\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\063\uffc6\001\002\000\052\002\uffc8\004\uffc8\005" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\027\104\030\103" +
    "\036\uffc8\037\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\052" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\063\uffc8\001\002\000\076" +
    "\002\uffa3\004\uffa3\005\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\036" +
    "\uffa3\037\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\052\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\063\uffa3\001\002\000\046\002" +
    "\uffca\004\uffca\005\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\036\100\037\uffca\044\uffca\045\uffca\046\uffca\047\uffca\052" +
    "\uffca\054\uffca\055\uffca\056\uffca\063\uffca\001\002\000\030" +
    "\016\uffaf\035\uffaf\040\uffaf\041\uffaf\050\uffaf\053\uffaf\057" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002\000\030" +
    "\016\037\035\042\040\041\041\057\050\040\053\060\057" +
    "\067\060\065\061\055\062\063\063\046\001\002\000\024" +
    "\016\037\035\042\050\040\053\060\057\067\060\065\061" +
    "\055\062\063\063\046\001\002\000\030\016\037\035\042" +
    "\040\041\041\057\050\040\053\060\057\067\060\065\061" +
    "\055\062\063\063\046\001\002\000\076\002\uffa2\004\uffa2" +
    "\005\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\033\uffa2\034\uffa2\036\uffa2\037\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\052\uffa2\054\uffa2\055\uffa2" +
    "\056\uffa2\063\uffa2\001\002\000\102\002\uffa8\004\uffa8\005" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\043\072" +
    "\044\uffa8\045\uffa8\046\uffa8\047\uffa8\051\071\052\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\063\uffa8\001\002\000\076\002\uffa4" +
    "\004\uffa4\005\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4\037" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\052\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\063\uffa4\001\002\000\076\002\uffa9\004" +
    "\uffa9\005\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9" +
    "\044\uffa9\045\uffa9\046\uffa9\047\uffa9\052\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\063\uffa9\001\002\000\076\002\uffa5\004\uffa5" +
    "\005\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\036\uffa5\037\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\052\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\063\uffa5\001\002\000\076\002\uffaa\004\uffaa\005" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\052\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\063\uffaa\001\002\000\030\016\037\035\042\040\041" +
    "\041\057\050\040\053\060\057\067\060\065\061\055\062" +
    "\063\063\046\001\002\000\004\063\073\001\002\000\104" +
    "\002\uff99\004\uff99\005\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\036" +
    "\uff99\037\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\051\uff99\052\uff99\054\uff99\055\uff99\056\uff99\063" +
    "\uff99\001\002\000\006\037\075\052\076\001\002\000\030" +
    "\016\037\035\042\040\041\041\057\050\040\053\060\057" +
    "\067\060\065\061\055\062\063\063\046\001\002\000\104" +
    "\002\uff9a\004\uff9a\005\uff9a\012\uff9a\013\uff9a\014\uff9a\015" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\036" +
    "\uff9a\037\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\051\uff9a\052\uff9a\054\uff9a\055\uff9a\056\uff9a\063" +
    "\uff9a\001\002\000\046\002\uffcb\004\uffcb\005\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\036\100\037\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\052\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\063\uffcb\001\002\000\030\016\037\035\042\040\041\041" +
    "\057\050\040\053\060\057\067\060\065\061\055\062\063" +
    "\063\046\001\002\000\052\002\uffc9\004\uffc9\005\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\027\104\030\103\036\uffc9" +
    "\037\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\052\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\063\uffc9\001\002\000\030\016\037" +
    "\035\042\040\041\041\057\050\040\053\060\057\067\060" +
    "\065\061\055\062\063\063\046\001\002\000\030\016\uffc5" +
    "\035\uffc5\040\uffc5\041\uffc5\050\uffc5\053\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\063\uffc5\001\002\000\030\016\uffc4" +
    "\035\uffc4\040\uffc4\041\uffc4\050\uffc4\053\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000\062\002\uffc7" +
    "\004\uffc7\005\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\027" +
    "\uffc7\030\uffc7\031\112\032\111\033\106\034\107\036\uffc7" +
    "\037\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\052\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\063\uffc7\001\002\000\030\016\uffbf" +
    "\035\uffbf\040\uffbf\041\uffbf\050\uffbf\053\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\063\uffbf\001\002\000\030\016\uffbe" +
    "\035\uffbe\040\uffbe\041\uffbe\050\uffbe\053\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\001\002\000\030\016\037" +
    "\035\042\040\041\041\057\050\040\053\060\057\067\060" +
    "\065\061\055\062\063\063\046\001\002\000\030\016\uffc0" +
    "\035\uffc0\040\uffc0\041\uffc0\050\uffc0\053\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\001\002\000\030\016\uffc1" +
    "\035\uffc1\040\uffc1\041\uffc1\050\uffc1\053\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002\000\066\002\uffc3" +
    "\004\uffc3\005\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\025" +
    "\116\026\115\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\036\uffc3\037\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3\063\uffc3\001\002" +
    "\000\030\016\037\035\042\040\041\041\057\050\040\053" +
    "\060\057\067\060\065\061\055\062\063\063\046\001\002" +
    "\000\030\016\uffba\035\uffba\040\uffba\041\uffba\050\uffba\053" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\001\002" +
    "\000\030\016\uffbb\035\uffbb\040\uffbb\041\uffbb\050\uffbb\053" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\001\002" +
    "\000\074\002\uffbd\004\uffbd\005\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\022\121\023\122\024\120\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\036" +
    "\uffbd\037\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\052\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\063\uffbd\001\002\000\030\016" +
    "\uffb5\035\uffb5\040\uffb5\041\uffb5\050\uffb5\053\uffb5\057\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\030\016" +
    "\uffb7\035\uffb7\040\uffb7\041\uffb7\050\uffb7\053\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002\000\030\016" +
    "\uffb6\035\uffb6\040\uffb6\041\uffb6\050\uffb6\053\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\001\002\000\030\016" +
    "\037\035\042\040\041\041\057\050\040\053\060\057\067" +
    "\060\065\061\055\062\063\063\046\001\002\000\076\002" +
    "\uffb9\004\uffb9\005\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\021\125\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9" +
    "\037\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\052\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\063\uffb9\001\002\000\030\016\037" +
    "\035\042\040\041\041\057\050\040\053\060\057\067\060" +
    "\065\061\055\062\063\063\046\001\002\000\076\002\uffb4" +
    "\004\uffb4\005\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\037" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\052\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\063\uffb4\001\002\000\076\002\uffb2\004" +
    "\uffb2\005\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\047\uffb2\052\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\063\uffb2\001\002\000\076\002\uffae\004\uffae" +
    "\005\uffae\012\uffae\013\uffae\014\uffae\015\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\036\uffae\037\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\052\uffae\054\uffae\055\uffae" +
    "\056\uffae\063\uffae\001\002\000\006\037\075\054\132\001" +
    "\002\000\104\002\uff98\004\uff98\005\uff98\012\uff98\013\uff98" +
    "\014\uff98\015\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\036\uff98\037\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\047\uff98\051\uff98\052\uff98\054\uff98\055\uff98" +
    "\056\uff98\063\uff98\001\002\000\032\016\037\035\042\040" +
    "\041\041\057\050\040\053\060\054\134\057\067\060\065" +
    "\061\055\062\063\063\046\001\002\000\076\002\uffa6\004" +
    "\uffa6\005\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\052\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\063\uffa6\001\002\000\012\037\075\044\uff96" +
    "\052\uff96\054\uff96\001\002\000\006\044\137\054\140\001" +
    "\002\000\030\016\037\035\042\040\041\041\057\050\040" +
    "\053\060\057\067\060\065\061\055\062\063\063\046\001" +
    "\002\000\076\002\uffa7\004\uffa7\005\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\036\uffa7\037\uffa7\044\uffa7\045\uffa7\046\uffa7\047" +
    "\uffa7\052\uffa7\054\uffa7\055\uffa7\056\uffa7\063\uffa7\001\002" +
    "\000\012\037\075\044\uff95\052\uff95\054\uff95\001\002\000" +
    "\004\063\152\001\002\000\032\016\037\035\042\040\041" +
    "\041\057\050\040\052\146\053\060\057\067\060\065\061" +
    "\055\062\063\063\046\001\002\000\076\002\uffa1\004\uffa1" +
    "\005\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\036\uffa1\037\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\052\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\063\uffa1\001\002\000\076\002\uffa0\004\uffa0\005" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0\037\uffa0\044\uffa0" +
    "\045\uffa0\046\uffa0\047\uffa0\052\uffa0\054\uffa0\055\uffa0\056" +
    "\uffa0\063\uffa0\001\002\000\076\002\uff9f\004\uff9f\005\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\036\uff9f\037\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\052\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\063\uff9f\001\002\000\006\044\137\052\150\001\002\000" +
    "\076\002\uff9e\004\uff9e\005\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\036\uff9e\037\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\052" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\063\uff9e\001\002\000\006" +
    "\044\155\056\156\001\002\000\004\042\153\001\002\000" +
    "\030\016\037\035\042\040\041\041\057\050\040\053\060" +
    "\057\067\060\065\061\055\062\063\063\046\001\002\000" +
    "\010\037\075\044\uff9c\056\uff9c\001\002\000\004\063\157" +
    "\001\002\000\076\002\uff9d\004\uff9d\005\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\036\uff9d\037\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\052\uff9d\054\uff9d\055\uff9d\056\uff9d\063\uff9d\001" +
    "\002\000\004\042\160\001\002\000\030\016\037\035\042" +
    "\040\041\041\057\050\040\053\060\057\067\060\065\061" +
    "\055\062\063\063\046\001\002\000\010\037\075\044\uff9b" +
    "\056\uff9b\001\002\000\006\044\163\056\uffd0\001\002\000" +
    "\006\056\uffcf\063\uffcd\001\002\000\004\063\031\001\002" +
    "\000\014\004\016\005\021\013\023\014\014\063\020\001" +
    "\002\000\010\041\167\044\uffcc\056\uffcc\001\002\000\040" +
    "\002\uffda\004\uffda\005\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\041\uffda\044\uffda\047\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\063\uffda\001\002\000\030\002\ufff6\004\ufff6\005" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\063\ufff6\001\002\000\004\042\172\001\002\000" +
    "\014\004\016\005\021\013\023\014\014\063\020\001\002" +
    "\000\024\002\ufff9\004\ufff9\005\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\041\167\063\ufff9\001\002\000\014\004\016" +
    "\005\021\013\023\014\014\063\020\001\002\000\006\041" +
    "\167\057\176\001\002\000\004\054\177\001\002\000\040" +
    "\002\uffd9\004\uffd9\005\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\041\uffd9\044\uffd9\047\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\063\uffd9\001\002\000\004\053\201\001\002\000" +
    "\010\040\202\054\ufff1\063\206\001\002\000\004\063\267" +
    "\001\002\000\006\047\265\054\ufff0\001\002\000\004\054" +
    "\211\001\002\000\006\047\uffef\054\uffef\001\002\000\004" +
    "\046\207\001\002\000\014\004\016\005\021\013\023\014" +
    "\014\063\020\001\002\000\010\041\167\047\uffed\054\uffed" +
    "\001\002\000\006\047\212\055\213\001\002\000\014\004" +
    "\016\005\021\013\023\014\014\063\020\001\002\000\026" +
    "\004\016\005\021\006\225\010\231\011\221\013\023\014" +
    "\014\016\215\053\060\063\220\001\002\000\022\002\ufff3" +
    "\004\ufff3\005\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\063" +
    "\ufff3\001\002\000\030\016\037\035\042\040\041\041\057" +
    "\050\040\053\060\057\067\060\065\061\055\062\063\063" +
    "\046\001\002\000\004\045\261\001\002\000\030\004\uffe5" +
    "\005\uffe5\006\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\016" +
    "\uffe5\053\uffe5\056\uffe5\063\uffe5\001\002\000\016\041\uffd5" +
    "\042\uff97\043\uff97\051\uff97\053\133\063\uffd5\001\002\000" +
    "\004\063\254\001\002\000\030\004\uffea\005\uffea\006\uffea" +
    "\010\uffea\011\uffea\013\uffea\014\uffea\016\uffea\053\uffea\056" +
    "\uffea\063\uffea\001\002\000\030\004\uffe4\005\uffe4\006\uffe4" +
    "\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\053\uffe4\056" +
    "\uffe4\063\uffe4\001\002\000\004\045\253\001\002\000\030" +
    "\016\037\035\042\040\041\041\057\050\040\053\060\057" +
    "\067\060\065\061\055\062\063\063\046\001\002\000\004" +
    "\045\242\001\002\000\010\042\240\043\072\051\071\001" +
    "\002\000\004\045\237\001\002\000\030\016\037\035\042" +
    "\040\041\041\057\050\040\053\060\057\067\060\065\061" +
    "\055\062\063\063\046\001\002\000\030\004\016\005\021" +
    "\006\225\010\231\011\221\013\023\014\014\016\215\053" +
    "\060\056\234\063\220\001\002\000\030\004\uffe9\005\uffe9" +
    "\006\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\016\uffe9\053" +
    "\uffe9\056\uffe9\063\uffe9\001\002\000\040\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\053\uffeb\056\uffeb\063\uffeb" +
    "\001\002\000\006\037\075\055\213\001\002\000\030\004" +
    "\uffdd\005\uffdd\006\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd" +
    "\016\uffdd\053\uffdd\056\uffdd\063\uffdd\001\002\000\030\004" +
    "\uffe6\005\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6" +
    "\016\uffe6\053\uffe6\056\uffe6\063\uffe6\001\002\000\030\016" +
    "\037\035\042\040\041\041\057\050\040\053\060\057\067" +
    "\060\065\061\055\062\063\063\046\001\002\000\006\037" +
    "\075\045\uffe2\001\002\000\030\004\uffe7\005\uffe7\006\uffe7" +
    "\010\uffe7\011\uffe7\013\uffe7\014\uffe7\016\uffe7\053\uffe7\056" +
    "\uffe7\063\uffe7\001\002\000\006\037\075\055\213\001\002" +
    "\000\032\004\uffe0\005\uffe0\006\uffe0\007\245\010\uffe0\011" +
    "\uffe0\013\uffe0\014\uffe0\016\uffe0\053\uffe0\056\uffe0\063\uffe0" +
    "\001\002\000\032\016\037\035\042\040\041\041\057\050" +
    "\040\053\060\055\213\057\067\060\065\061\055\062\063" +
    "\063\046\001\002\000\030\004\uffe1\005\uffe1\006\uffe1\010" +
    "\uffe1\011\uffe1\013\uffe1\014\uffe1\016\uffe1\053\uffe1\056\uffe1" +
    "\063\uffe1\001\002\000\030\004\uffdf\005\uffdf\006\uffdf\010" +
    "\uffdf\011\uffdf\013\uffdf\014\uffdf\016\uffdf\053\uffdf\056\uffdf" +
    "\063\uffdf\001\002\000\006\037\075\055\213\001\002\000" +
    "\032\004\uffe0\005\uffe0\006\uffe0\007\245\010\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\016\uffe0\053\uffe0\056\uffe0\063\uffe0\001" +
    "\002\000\030\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde" +
    "\013\uffde\014\uffde\016\uffde\053\uffde\056\uffde\063\uffde\001" +
    "\002\000\030\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\053\uffe3\056\uffe3\063\uffe3\001" +
    "\002\000\030\016\037\035\042\040\041\041\057\050\040" +
    "\053\060\057\067\060\065\061\055\062\063\063\046\001" +
    "\002\000\006\037\075\047\256\001\002\000\030\016\037" +
    "\035\042\040\041\041\057\050\040\053\060\057\067\060" +
    "\065\061\055\062\063\063\046\001\002\000\006\037\075" +
    "\055\213\001\002\000\030\004\uffdc\005\uffdc\006\uffdc\010" +
    "\uffdc\011\uffdc\013\uffdc\014\uffdc\016\uffdc\053\uffdc\056\uffdc" +
    "\063\uffdc\001\002\000\030\004\uffe8\005\uffe8\006\uffe8\010" +
    "\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\053\uffe8\056\uffe8" +
    "\063\uffe8\001\002\000\006\037\075\045\uffdb\001\002\000" +
    "\006\041\167\055\213\001\002\000\022\002\ufff2\004\ufff2" +
    "\005\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\063\ufff2\001" +
    "\002\000\006\040\202\063\206\001\002\000\006\047\uffee" +
    "\054\uffee\001\002\000\004\046\270\001\002\000\014\004" +
    "\016\005\021\013\023\014\014\063\020\001\002\000\010" +
    "\041\167\047\uffec\054\uffec\001\002\000\026\002\ufff8\004" +
    "\ufff8\005\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\044\164" +
    "\045\ufff8\063\ufff8\001\002\000\004\020\274\001\002\000" +
    "\004\063\275\001\002\000\024\002\uffff\004\uffff\005\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff\063\uffff\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\016" +
    "\005\023\010\014\011\007\026\011\027\016\030\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\025" +
    "\007\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\025\007\026\031\032" +
    "\032\027\033\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\025\007\026\033\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\025\065\034\046\035\055" +
    "\036\053\037\052\040\051\041\050\042\047\043\044\044" +
    "\043\045\042\046\063\054\061\055\060\056\067\001\001" +
    "\000\006\057\143\060\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\122\001\001\000\004" +
    "\052\113\001\001\000\004\051\107\001\001\000\004\050" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\025\065\034\130\035\055\036\053\037" +
    "\052\040\051\041\050\042\047\043\044\044\043\045\042" +
    "\046\063\054\061\055\060\056\067\001\001\000\016\025" +
    "\065\044\127\045\042\046\063\055\060\056\067\001\001" +
    "\000\022\025\065\043\126\044\043\045\042\046\063\054" +
    "\061\055\060\056\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\025\065\034\073\035\055" +
    "\036\053\037\052\040\051\041\050\042\047\043\044\044" +
    "\043\045\042\046\063\054\061\055\060\056\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\025\065\035\076\036\053\037\052\040\051\041\050" +
    "\042\047\043\044\044\043\045\042\046\063\054\061\055" +
    "\060\056\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\025\065\036\100\037\052\040\051\041\050\042" +
    "\047\043\044\044\043\045\042\046\063\054\061\055\060" +
    "\056\067\001\001\000\004\050\101\001\001\000\032\025" +
    "\065\037\104\040\051\041\050\042\047\043\044\044\043" +
    "\045\042\046\063\054\061\055\060\056\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\025\065\040" +
    "\112\041\050\042\047\043\044\044\043\045\042\046\063" +
    "\054\061\055\060\056\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\113\001\001\000\026\025\065" +
    "\041\116\042\047\043\044\044\043\045\042\046\063\054" +
    "\061\055\060\056\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\025\065\042\123" +
    "\043\044\044\043\045\042\046\063\054\061\055\060\056" +
    "\067\001\001\000\002\001\001\000\022\025\065\043\125" +
    "\044\043\045\042\046\063\054\061\055\060\056\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\025\065\034" +
    "\134\035\055\036\053\037\052\040\051\041\050\042\047" +
    "\043\044\044\043\045\042\046\063\047\135\054\061\055" +
    "\060\056\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\025\065\034\140\035\055\036" +
    "\053\037\052\040\051\041\050\042\047\043\044\044\043" +
    "\045\042\046\063\054\061\055\060\056\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\150\001\001" +
    "\000\042\025\065\034\134\035\055\036\053\037\052\040" +
    "\051\041\050\042\047\043\044\044\043\045\042\046\063" +
    "\047\146\054\061\055\060\056\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\025\065\034\153\035\055\036\053\037\052\040\051" +
    "\041\050\042\047\043\044\044\043\045\042\046\063\054" +
    "\061\055\060\056\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\025" +
    "\065\034\160\035\055\036\053\037\052\040\051\041\050" +
    "\042\047\043\044\044\043\045\042\046\063\054\061\055" +
    "\060\056\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\167\001\001\000\010\026" +
    "\165\027\016\030\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\172\027\016\030\010\001\001\000\002\001\001\000\010" +
    "\026\174\027\016\030\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\203\013\202\014\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\207\027\016\030\010\001\001\000" +
    "\002\001\001\000\004\015\213\001\001\000\010\026\262" +
    "\027\016\030\010\001\001\000\032\010\215\016\231\017" +
    "\221\020\225\021\216\022\222\023\223\025\227\026\011" +
    "\027\016\030\010\046\226\001\001\000\002\001\001\000" +
    "\040\025\065\034\261\035\055\036\053\037\052\040\051" +
    "\041\050\042\047\043\044\044\043\045\042\046\063\054" +
    "\061\055\060\056\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\025\065" +
    "\034\242\035\055\036\053\037\052\040\051\041\050\042" +
    "\047\043\044\044\043\045\042\046\063\054\061\055\060" +
    "\056\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\025\065\034\234\035\055\036\053" +
    "\037\052\040\051\041\050\042\047\043\044\044\043\045" +
    "\042\046\063\054\061\055\060\056\067\001\001\000\030" +
    "\010\215\017\232\020\225\021\216\022\222\023\223\025" +
    "\227\026\011\027\016\030\010\046\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\025\065\034\240" +
    "\035\055\036\053\037\052\040\051\041\050\042\047\043" +
    "\044\044\043\045\042\046\063\054\061\055\060\056\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\243\001\001\000\004\024\245\001\001\000\042\015\246" +
    "\025\065\034\247\035\055\036\053\037\052\040\051\041" +
    "\050\042\047\043\044\044\043\045\042\046\063\054\061" +
    "\055\060\056\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\250\001\001\000\004\024\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\025\065\034" +
    "\254\035\055\036\053\037\052\040\051\041\050\042\047" +
    "\043\044\044\043\045\042\046\063\054\061\055\060\056" +
    "\067\001\001\000\002\001\001\000\040\025\065\034\256" +
    "\035\055\036\053\037\052\040\051\041\050\042\047\043" +
    "\044\044\043\045\042\046\063\054\061\055\060\056\067" +
    "\001\001\000\004\015\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\263\001\001" +
    "\000\002\001\001\000\004\014\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\270\027\016\030\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJaja$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJaja$actions {
  private final AnalizadorSintacticoJaja parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJaja$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_Imports Lista_Declaraciones 
            {
              Programa RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Programa(lImp, lDecl); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJaja$parser.done_parsing();
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_Imports ::= Lista_Imports TRAFICAR IDEN COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lImp.add(new Import(ruta)); RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_Imports ::= 
            {
              List<Import> RESULT =null;
		 RESULT = new ArrayList<Import>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion_Alias 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionAlias dAlias = (DeclaracionAlias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dAlias); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Variables 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables dGen = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Funcion 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionFun dGen = (DeclaracionFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Declaraciones ::= 
            {
              ListaDeclaraciones RESULT =null;
		 RESULT = new ListaDeclaraciones(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionAlias(id, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl_Variables ::= Tipo Lista_Decl_Asignaciones 
            {
              DeclaracionVariables RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Decl_Asignaciones ::= Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionVar> lista_var = new ArrayList<DeclaracionVar>();
                        lista_var.add(var); RESULT = lista_var; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		List<DeclaracionVar> lDecl = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(var); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl_Asig ::= IDEN 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl_Asig ::= IDEN ASIGNACION Expresion 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-6)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Parametros ::= 
            {
              List<DeclaracionPar> RESULT =null;
		 RESULT = new ArrayList<DeclaracionPar>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Parametros ::= Lista_Parametros2 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Parametros2 ::= Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionPar> lista_par = new ArrayList<DeclaracionPar>();
                  lista_par.add(par); RESULT = lista_par; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Parametros2 ::= Lista_Parametros2 FLECHA Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lPar.add(par); RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Parametro ::= IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Parametro ::= DIRECCION IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bloque_Anidado ::= LLAP Lista_Instrucciones LLCIERRE 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> LIns = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = LIns; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bloque_Anidado",11, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_Instrucciones ::= Instruccion 
            {
              List<Instruccion> RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
                    lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= Decl_Variables PUNTOCOMA 
            {
              Instruccion RESULT =null;
		DeclaracionVariables decl = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = decl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruccion ::= Asignacion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = as; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= Llamada_Fun PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruccion ::= Condicional 
            {
              Instruccion RESULT =null;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruccion ::= Bucle 
            {
              Instruccion RESULT =null;
		Instruccion buc = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = buc; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= Inst_Return PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion iRet = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = iRet; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= E10 ASIGNACION Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, expr2);  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condicional ::= SI Expresion Bloque_Anidado Cond_Else 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional",15, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Cond_Else ::= 
            {
              InsCond RESULT =null;
		 RESULT = new InsCond(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Cond_Else ::= SINO Bloque_Anidado 
            {
              InsCond RESULT =null;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Cond_Else ::= SINO Expresion Bloque_Anidado Cond_Else 
            {
              InsCond RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bucle ::= MIENTRAS Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleWhile(expr, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bucle ::= PARA IDEN Expresion FLECHA Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Expresion exprIni = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion exprFin = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleFor(id, exprIni, exprFin, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst_Return ::= DEVUELVE Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsReturn(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return",17, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo ::= Tipo PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoPuntero(tipo); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo ::= VECTOR PAP Tipo ENTERO PCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoArray(tipo, ent); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo ::= T 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = TipoEntero.instancia();  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T ::= BIN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBinario.instancia(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // T ::= IDEN 
            {
              Tipo RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new TipoAlias(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // T ::= Tipo_Reg 
            {
              Tipo RESULT =null;
		Tipo t_reg = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t_reg; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_Reg ::= REGISTRO LLAP Matriz_Atributos LLCIERRE 
            {
              Tipo RESULT =null;
		ListaDeclaraciones mAtrib = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoRegistro(mAtrib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg",22, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matriz_Atributos ::= Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matriz_Atributos ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matriz_Atributos2 ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                  mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matriz_Atributos2 ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS Tipo 
            {
              DeclaracionVariables RESULT =null;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos",25, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= Expresion DISY E1 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.DISY, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= E1 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e1; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E1 CONJ E2 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.CONJ, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e2; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op2 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op2, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e3; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP2 ::= DESIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DESIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP2 ::= IGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.IGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E3 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op3 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op3, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e4; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP3 ::= MAYOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP3 ::= MENOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP3 ::= MAYORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP3 ::= MENORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E4 ::= E4 OP4 E5 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op4 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op4, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion e5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e5; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP4 ::= SUMA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP4 ::= RESTA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E5 ::= E5 OP5 E6 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op5 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op5, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion e6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e6; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP5 ::= MUL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP5 ::= DIV 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP5 ::= MOD 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E6 POT E7 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.POT, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion e7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e7; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= OP7 E7 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op7 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op7, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion e8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e8; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP7 ::= DIRECCION 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.DIRECCION; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP7 ::= PUNTERO 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.PUNTERO; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E8 ::= OP8 E8 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op8 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op8, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E8 ::= E9 
            {
              Expresion RESULT =null;
		Expresion e9 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e9; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP8 ::= NEG 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.NEG; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP8 ::= MENOS 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.MENOS; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E9 ::= Literal 
            {
              Expresion RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E9 ::= Llamada_Fun 
            {
              Expresion RESULT =null;
		Llamada ll = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = ll; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E9 ::= E10 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Llamada_Fun ::= IDEN PAP Lista_Expresiones PCIERRE 
            {
              Llamada RESULT =null;
		String izquierda = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new Llamada(izquierda, lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Llamada_Fun ::= IDEN PAP PCIERRE 
            {
              Llamada RESULT =null;
		String izquierda = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 RESULT = new Llamada(izquierda, new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		Entero e = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Literal ::= FACTO 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Literal ::= FAKE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Literal ::= NULO 
            {
              Literal RESULT =null;
		Nulo n = (Nulo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Literal ::= DEVUELVE Array_Literal 
            {
              Literal RESULT =null;
		LiteralArray aL = (LiteralArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = aL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Literal ::= DEVUELVE Struct_Literal 
            {
              Literal RESULT =null;
		LiteralStruct sL = (LiteralStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = sL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Array_Literal ::= CAP CCIERRE 
            {
              LiteralArray RESULT =null;
		 RESULT = new LiteralArray(new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Array_Literal ::= CAP Lista_Expresiones CCIERRE 
            {
              LiteralArray RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralArray(lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Struct_Literal ::= LLAP Lista_Asig_Atributos LLCIERRE 
            {
              LiteralStruct RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralStruct(lAtr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Struct_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Lista_Asig_Atributos ::= IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 Map<String, Expresion> valores = new HashMap<String, Expresion>();
                     valores.put(id, expr); RESULT = valores; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Lista_Asig_Atributos ::= Lista_Asig_Atributos COMA IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lAtr.put(id, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E10 ::= E10 CAP Expresion CCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new AccesoArray(izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E10 ::= E10 PUNTO IDEN 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new AccesoStruct(izquierda, id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E10 ::= PAP Expresion PCIERRE 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E10 ::= IDEN 
            {
              Expresion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Lista_Expresiones ::= Expresion 
            {
              List<Expresion> RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Expresion> lExpr = new ArrayList<Expresion>();
                   lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Lista_Expresiones ::= Lista_Expresiones COMA Expresion 
            {
              List<Expresion> RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoJaja$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                               CUP$AnalizadorSintacticoJaja$act_num,
                               CUP$AnalizadorSintacticoJaja$parser,
                               CUP$AnalizadorSintacticoJaja$stack,
                               CUP$AnalizadorSintacticoJaja$top);
    }
}

