
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 31 22:51:59 CEST 2024
//----------------------------------------------------

package main.sintactico;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.*;
import main.lexico.AnalizadorLexicoJaja;
import main.lexico.UnidadLexica;
import main.errors.GestionErroresJaja;
import main.ast.Programa;
import main.ast.Import;
import main.ast.declaraciones.*;
import main.ast.expresiones.*;
import main.ast.instrucciones.*;
import main.ast.literales.*;
import main.ast.tipos.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 31 22:51:59 CEST 2024
  */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJaja() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\002\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\002\000\002\005\006\000" +
    "\002\010\004\000\002\007\003\000\002\007\005\000\002" +
    "\006\003\000\002\006\005\000\002\011\010\000\002\011" +
    "\012\000\002\012\002\000\002\012\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\005\000\002\014\006\000" +
    "\002\015\005\000\002\016\003\000\002\016\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\020\005" +
    "\000\002\020\005\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\021" +
    "\006\000\002\024\002\000\002\024\004\000\002\024\006" +
    "\000\002\022\005\000\002\022\011\000\002\023\004\000" +
    "\002\026\004\000\002\026\010\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\006\000\002\031\003\000\002\031\004" +
    "\000\002\031\004\000\002\031\005\000\002\032\004\000" +
    "\002\032\005\000\002\033\005\000\002\034\005\000\002" +
    "\034\003\000\002\035\005\000\002\035\003\000\002\036" +
    "\005\000\002\036\003\000\002\051\003\000\002\051\003" +
    "\000\002\037\005\000\002\037\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\040\005\000\002\040\003\000\002\053\003\000\002\053" +
    "\003\000\002\041\005\000\002\041\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\042\005\000" +
    "\002\042\003\000\002\043\004\000\002\043\003\000\002" +
    "\055\003\000\002\055\003\000\002\044\004\000\002\044" +
    "\003\000\002\056\003\000\002\056\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\025\006\000" +
    "\002\025\005\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\004\000\002\057" +
    "\004\000\002\057\004\000\002\060\004\000\002\060\005" +
    "\000\002\061\005\000\002\062\005\000\002\062\007\000" +
    "\002\046\006\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\047\003\000\002\047\005\000\002\063" +
    "\005\000\002\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\024\002\ufffe\004\ufffe\005\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\017\ufffe\075\ufffe\001\002\000\004" +
    "\002\320\001\002\000\024\002\ufffa\004\ufffa\005\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\017\006\075\ufffa\001\002" +
    "\000\004\076\315\001\002\000\022\002\001\004\016\005" +
    "\021\012\014\013\024\014\013\015\023\075\017\001\002" +
    "\000\022\002\ufffb\004\ufffb\005\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\075\ufffb\001\002\000\104\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\050" +
    "\uffcb\052\uffcb\053\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb" +
    "\064\uffcb\066\uffcb\067\uffcb\070\uffcb\075\uffcb\001\002\000" +
    "\006\052\161\075\033\001\002\000\004\065\307\001\002" +
    "\000\004\075\202\001\002\000\004\056\201\001\002\000" +
    "\104\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\047\uffce\050\uffce\052\uffce\053\uffce\055\uffce\056" +
    "\uffce\060\uffce\061\uffce\064\uffce\066\uffce\067\uffce\070\uffce" +
    "\075\uffce\001\002\000\114\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\047\uff89\050\uff89\052\uff89" +
    "\053\uff89\054\uff89\055\uff89\056\uff89\057\177\060\uff89\061" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89" +
    "\075\uff89\001\002\000\104\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf\052\uffcf" +
    "\053\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf\064\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\075\uffcf\001\002\000\104\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\047" +
    "\uffcd\050\uffcd\052\uffcd\053\uffcd\055\uffcd\056\uffcd\060\uffcd" +
    "\061\uffcd\064\uffcd\066\uffcd\067\uffcd\070\uffcd\075\uffcd\001" +
    "\002\000\104\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc\055" +
    "\uffcc\056\uffcc\060\uffcc\061\uffcc\064\uffcc\066\uffcc\067\uffcc" +
    "\070\uffcc\075\uffcc\001\002\000\004\075\174\001\002\000" +
    "\004\067\027\001\002\000\004\056\026\001\002\000\022" +
    "\002\ufffd\004\ufffd\005\ufffd\012\ufffd\013\ufffd\014\ufffd\015" +
    "\ufffd\075\ufffd\001\002\000\004\075\033\001\002\000\010" +
    "\055\ufff7\056\ufff7\060\ufff7\001\002\000\006\055\170\060" +
    "\171\001\002\000\004\075\033\001\002\000\012\053\040" +
    "\055\ufff5\056\ufff5\060\ufff5\001\002\000\006\055\037\070" +
    "\uffc9\001\002\000\004\070\036\001\002\000\104\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\047" +
    "\uffca\050\uffca\052\uffca\053\uffca\055\uffca\056\uffca\060\uffca" +
    "\061\uffca\064\uffca\066\uffca\067\uffca\070\uffca\075\uffca\001" +
    "\002\000\006\070\uffc8\075\uffc5\001\002\000\030\021\060" +
    "\046\043\051\042\052\061\062\041\065\062\071\071\072" +
    "\067\073\056\074\065\075\017\001\002\000\024\021\uffa2" +
    "\046\uffa2\062\uffa2\065\uffa2\071\uffa2\072\uffa2\073\uffa2\074" +
    "\uffa2\075\uffa2\001\002\000\030\021\uffa7\046\uffa7\051\uffa7" +
    "\052\uffa7\062\uffa7\065\uffa7\071\uffa7\072\uffa7\073\uffa7\074" +
    "\uffa7\075\uffa7\001\002\000\024\021\uffa3\046\uffa3\062\uffa3" +
    "\065\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\001" +
    "\002\000\100\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\047\uffa4\050\uffa4\053\uffa4\055\uffa4\056" +
    "\uffa4\060\uffa4\061\uffa4\064\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\001\002\000\100\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\047\uffa8\050\uffa8\053\uffa8\055\uffa8" +
    "\056\uffa8\060\uffa8\061\uffa8\064\uffa8\066\uffa8\067\uffa8\070" +
    "\uffa8\001\002\000\100\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa\053\uffaa\055" +
    "\uffaa\056\uffaa\060\uffaa\061\uffaa\064\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\001\002\000\012\050\077\055\ufff4\056\ufff4\060" +
    "\ufff4\001\002\000\106\022\uff8d\023\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\047\uff8d\050\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\056\uff8d\060\uff8d\061\uff8d\063\uff8d\064\uff8d" +
    "\065\162\066\uff8d\067\uff8d\070\uff8d\001\002\000\100\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\127\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\047\uffaf\050\uffaf\053\uffaf\055\uffaf\056\uffaf\060\uffaf\061" +
    "\uffaf\064\uffaf\066\uffaf\067\uffaf\070\uffaf\001\002\000\076" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\033\123\034\124\035\122\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047" +
    "\uffb3\050\uffb3\053\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3" +
    "\064\uffb3\066\uffb3\067\uffb3\070\uffb3\001\002\000\070\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\036\120\037\117\040\uffb9\041\uffb9\042\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\053\uffb9\055\uffb9" +
    "\056\uffb9\060\uffb9\061\uffb9\064\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\001\002\000\064\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\040\uffbd\041\uffbd\042" +
    "\114\043\113\044\110\045\111\047\uffbd\050\uffbd\053\uffbd" +
    "\055\uffbd\056\uffbd\060\uffbd\061\uffbd\064\uffbd\066\uffbd\067" +
    "\uffbd\070\uffbd\001\002\000\054\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\040\106\041" +
    "\105\047\uffbf\050\uffbf\053\uffbf\055\uffbf\056\uffbf\060\uffbf" +
    "\061\uffbf\064\uffbf\066\uffbf\067\uffbf\070\uffbf\001\002\000" +
    "\100\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\047\uff9a\050\uff9a\053\uff9a\055\uff9a\056\uff9a\060" +
    "\uff9a\061\uff9a\064\uff9a\066\uff9a\067\uff9a\070\uff9a\001\002" +
    "\000\050\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\047\102\050\uffc1\053\uffc1\055\uffc1" +
    "\056\uffc1\060\uffc1\061\uffc1\064\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\001\002\000\020\004\016\005\021\013\024\014\013" +
    "\063\137\067\141\075\017\001\002\000\030\021\uffa6\046" +
    "\uffa6\051\uffa6\052\uffa6\062\uffa6\065\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\001\002\000\030\021\060\046" +
    "\043\051\042\052\061\062\041\065\062\071\071\072\067" +
    "\073\056\074\065\075\017\001\002\000\024\021\060\046" +
    "\043\062\041\065\062\071\071\072\067\073\056\074\065" +
    "\075\017\001\002\000\030\021\060\046\043\051\042\052" +
    "\061\062\041\065\062\071\071\072\067\073\056\074\065" +
    "\075\017\001\002\000\100\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\047\uff99\050\uff99\053\uff99" +
    "\055\uff99\056\uff99\060\uff99\061\uff99\064\uff99\066\uff99\067" +
    "\uff99\070\uff99\001\002\000\104\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\047\uff9f\050\uff9f\053" +
    "\uff9f\054\074\055\uff9f\056\uff9f\060\uff9f\061\uff9f\063\073" +
    "\064\uff9f\066\uff9f\067\uff9f\070\uff9f\001\002\000\100\022" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\047\uff9b\050\uff9b\053\uff9b\055\uff9b\056\uff9b\060\uff9b\061" +
    "\uff9b\064\uff9b\066\uff9b\067\uff9b\070\uff9b\001\002\000\100" +
    "\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\047\uffa0\050\uffa0\053\uffa0\055\uffa0\056\uffa0\060\uffa0" +
    "\061\uffa0\064\uffa0\066\uffa0\067\uffa0\070\uffa0\001\002\000" +
    "\100\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\047\uff9c\050\uff9c\053\uff9c\055\uff9c\056\uff9c\060" +
    "\uff9c\061\uff9c\064\uff9c\066\uff9c\067\uff9c\070\uff9c\001\002" +
    "\000\100\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\047\uffa1\050\uffa1\053\uffa1\055\uffa1\056\uffa1" +
    "\060\uffa1\061\uffa1\064\uffa1\066\uffa1\067\uffa1\070\uffa1\001" +
    "\002\000\030\021\060\046\043\051\042\052\061\062\041" +
    "\065\062\071\071\072\067\073\056\074\065\075\017\001" +
    "\002\000\004\075\075\001\002\000\104\022\uff8f\023\uff8f" +
    "\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032" +
    "\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\047\uff8f\050" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\060\uff8f\061\uff8f" +
    "\063\uff8f\064\uff8f\066\uff8f\067\uff8f\070\uff8f\001\002\000" +
    "\006\050\077\064\100\001\002\000\030\021\060\046\043" +
    "\051\042\052\061\062\041\065\062\071\071\072\067\073" +
    "\056\074\065\075\017\001\002\000\104\022\uff90\023\uff90" +
    "\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\047\uff90\050" +
    "\uff90\053\uff90\054\uff90\055\uff90\056\uff90\060\uff90\061\uff90" +
    "\063\uff90\064\uff90\066\uff90\067\uff90\070\uff90\001\002\000" +
    "\050\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\047\102\050\uffc2\053\uffc2\055\uffc2\056" +
    "\uffc2\060\uffc2\061\uffc2\064\uffc2\066\uffc2\067\uffc2\070\uffc2" +
    "\001\002\000\030\021\060\046\043\051\042\052\061\062" +
    "\041\065\062\071\071\072\067\073\056\074\065\075\017" +
    "\001\002\000\054\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\040\106\041\105\047\uffc0" +
    "\050\uffc0\053\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0\064" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\001\002\000\030\021\060" +
    "\046\043\051\042\052\061\062\041\065\062\071\071\072" +
    "\067\073\056\074\065\075\017\001\002\000\030\021\uffbc" +
    "\046\uffbc\051\uffbc\052\uffbc\062\uffbc\065\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\074\uffbc\075\uffbc\001\002\000\030\021\uffbb" +
    "\046\uffbb\051\uffbb\052\uffbb\062\uffbb\065\uffbb\071\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\001\002\000\064\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\040\uffbe\041\uffbe\042\114\043\113\044\110\045\111" +
    "\047\uffbe\050\uffbe\053\uffbe\055\uffbe\056\uffbe\060\uffbe\061" +
    "\uffbe\064\uffbe\066\uffbe\067\uffbe\070\uffbe\001\002\000\030" +
    "\021\uffb6\046\uffb6\051\uffb6\052\uffb6\062\uffb6\065\uffb6\071" +
    "\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002\000\030" +
    "\021\uffb5\046\uffb5\051\uffb5\052\uffb5\062\uffb5\065\uffb5\071" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\030" +
    "\021\060\046\043\051\042\052\061\062\041\065\062\071" +
    "\071\072\067\073\056\074\065\075\017\001\002\000\030" +
    "\021\uffb7\046\uffb7\051\uffb7\052\uffb7\062\uffb7\065\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\001\002\000\030" +
    "\021\uffb8\046\uffb8\051\uffb8\052\uffb8\062\uffb8\065\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000\070" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\036\120\037\117\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\047\uffba\050\uffba\053\uffba\055" +
    "\uffba\056\uffba\060\uffba\061\uffba\064\uffba\066\uffba\067\uffba" +
    "\070\uffba\001\002\000\030\021\060\046\043\051\042\052" +
    "\061\062\041\065\062\071\071\072\067\073\056\074\065" +
    "\075\017\001\002\000\030\021\uffb1\046\uffb1\051\uffb1\052" +
    "\uffb1\062\uffb1\065\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1" +
    "\075\uffb1\001\002\000\030\021\uffb2\046\uffb2\051\uffb2\052" +
    "\uffb2\062\uffb2\065\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\001\002\000\076\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\123\034\124" +
    "\035\122\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\047\uffb4\050\uffb4\053\uffb4\055\uffb4" +
    "\056\uffb4\060\uffb4\061\uffb4\064\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\001\002\000\030\021\uffac\046\uffac\051\uffac\052\uffac" +
    "\062\uffac\065\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\001\002\000\030\021\uffae\046\uffae\051\uffae\052\uffae" +
    "\062\uffae\065\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\001\002\000\030\021\uffad\046\uffad\051\uffad\052\uffad" +
    "\062\uffad\065\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\001\002\000\030\021\060\046\043\051\042\052\061" +
    "\062\041\065\062\071\071\072\067\073\056\074\065\075" +
    "\017\001\002\000\100\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\127\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\047\uffb0\050\uffb0\053\uffb0\055" +
    "\uffb0\056\uffb0\060\uffb0\061\uffb0\064\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\001\002\000\030\021\060\046\043\051\042\052" +
    "\061\062\041\065\062\071\071\072\067\073\056\074\065" +
    "\075\017\001\002\000\100\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\047\uffab\050\uffab\053\uffab" +
    "\055\uffab\056\uffab\060\uffab\061\uffab\064\uffab\066\uffab\067" +
    "\uffab\070\uffab\001\002\000\100\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\053" +
    "\uffa9\055\uffa9\056\uffa9\060\uffa9\061\uffa9\064\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\001\002\000\100\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\047\uffa5\050\uffa5" +
    "\053\uffa5\055\uffa5\056\uffa5\060\uffa5\061\uffa5\064\uffa5\066" +
    "\uffa5\067\uffa5\070\uffa5\001\002\000\006\050\077\066\134" +
    "\001\002\000\104\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\047\uff8e\050\uff8e\053\uff8e\054\uff8e" +
    "\055\uff8e\056\uff8e\060\uff8e\061\uff8e\063\uff8e\064\uff8e\066" +
    "\uff8e\067\uff8e\070\uff8e\001\002\000\102\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032" +
    "\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\047\uff96\050" +
    "\uff96\052\161\053\uff96\055\uff96\056\uff96\060\uff96\061\uff96" +
    "\064\uff96\066\uff96\067\uff96\070\uff96\001\002\000\100\022" +
    "\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98" +
    "\047\uff98\050\uff98\053\uff98\055\uff98\056\uff98\060\uff98\061" +
    "\uff98\064\uff98\066\uff98\067\uff98\070\uff98\001\002\000\032" +
    "\021\060\046\043\051\042\052\061\062\041\064\154\065" +
    "\062\071\071\072\067\073\056\074\065\075\017\001\002" +
    "\000\100\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027" +
    "\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\047\uff97\050\uff97\053\uff97\055\uff97\056\uff97" +
    "\060\uff97\061\uff97\064\uff97\066\uff97\067\uff97\070\uff97\001" +
    "\002\000\004\075\143\001\002\000\006\055\146\070\147" +
    "\001\002\000\004\053\144\001\002\000\030\021\060\046" +
    "\043\051\042\052\061\062\041\065\062\071\071\072\067" +
    "\073\056\074\065\075\017\001\002\000\010\050\077\055" +
    "\uff92\070\uff92\001\002\000\004\075\150\001\002\000\100" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\047\uff93\050\uff93\053\uff93\055\uff93\056\uff93\060\uff93" +
    "\061\uff93\064\uff93\066\uff93\067\uff93\070\uff93\001\002\000" +
    "\004\053\151\001\002\000\030\021\060\046\043\051\042" +
    "\052\061\062\041\065\062\071\071\072\067\073\056\074" +
    "\065\075\017\001\002\000\010\050\077\055\uff91\070\uff91" +
    "\001\002\000\012\050\077\055\uff8c\064\uff8c\066\uff8c\001" +
    "\002\000\100\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\047\uff95\050\uff95\053\uff95\055\uff95\056" +
    "\uff95\060\uff95\061\uff95\064\uff95\066\uff95\067\uff95\070\uff95" +
    "\001\002\000\006\055\156\064\157\001\002\000\030\021" +
    "\060\046\043\051\042\052\061\062\041\065\062\071\071" +
    "\072\067\073\056\074\065\075\017\001\002\000\100\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94" +
    "\047\uff94\050\uff94\053\uff94\055\uff94\056\uff94\060\uff94\061" +
    "\uff94\064\uff94\066\uff94\067\uff94\070\uff94\001\002\000\012" +
    "\050\077\055\uff8b\064\uff8b\066\uff8b\001\002\000\104\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\047\uffd1\050\uffd1\052\uffd1\053\uffd1\055\uffd1\056\uffd1\060" +
    "\uffd1\061\uffd1\064\uffd1\066\uffd1\067\uffd1\070\uffd1\075\uffd1" +
    "\001\002\000\032\021\060\046\043\051\042\052\061\062" +
    "\041\065\062\066\163\071\071\072\067\073\056\074\065" +
    "\075\017\001\002\000\100\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\047\uff9d\050\uff9d\053\uff9d" +
    "\055\uff9d\056\uff9d\060\uff9d\061\uff9d\064\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\001\002\000\006\055\156\066\165\001\002" +
    "\000\100\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044" +
    "\uff9e\045\uff9e\047\uff9e\050\uff9e\053\uff9e\055\uff9e\056\uff9e" +
    "\060\uff9e\061\uff9e\064\uff9e\066\uff9e\067\uff9e\070\uff9e\001" +
    "\002\000\006\055\167\070\uffc7\001\002\000\006\070\uffc6" +
    "\075\uffc4\001\002\000\004\075\033\001\002\000\014\004" +
    "\016\005\021\013\024\014\013\075\017\001\002\000\010" +
    "\052\161\055\uffc3\070\uffc3\001\002\000\010\055\ufff6\056" +
    "\ufff6\060\ufff6\001\002\000\004\053\175\001\002\000\014" +
    "\004\016\005\021\013\024\014\013\075\017\001\002\000" +
    "\006\052\161\056\ufff9\001\002\000\004\075\200\001\002" +
    "\000\112\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\047\uff8a\050\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\055\uff8a\056\uff8a\060\uff8a\061\uff8a\063\uff8a\064\uff8a\065" +
    "\uff8a\066\uff8a\067\uff8a\070\uff8a\075\uff8a\001\002\000\022" +
    "\002\ufffc\004\ufffc\005\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\075\ufffc\001\002\000\004\065\203\001\002\000\010" +
    "\051\204\066\ufff1\075\210\001\002\000\004\075\304\001" +
    "\002\000\006\061\302\066\ufff0\001\002\000\004\066\213" +
    "\001\002\000\006\061\uffef\066\uffef\001\002\000\004\060" +
    "\211\001\002\000\014\004\016\005\021\013\024\014\013" +
    "\075\017\001\002\000\010\052\161\061\uffed\066\uffed\001" +
    "\002\000\006\061\214\067\215\001\002\000\014\004\016" +
    "\005\021\013\024\014\013\075\017\001\002\000\050\004" +
    "\016\005\021\006\217\010\226\011\233\013\024\014\013" +
    "\016\225\021\060\046\043\051\042\052\061\062\041\065" +
    "\062\071\071\072\067\073\056\074\065\075\017\001\002" +
    "\000\022\002\ufff3\004\ufff3\005\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\075\ufff3\001\002\000\030\021\060\046\043" +
    "\051\042\052\061\062\041\065\062\071\071\072\067\073" +
    "\056\074\065\075\017\001\002\000\052\004\uffe4\005\uffe4" +
    "\006\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\021" +
    "\uffe4\046\uffe4\051\uffe4\052\uffe4\062\uffe4\065\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4\001\002\000" +
    "\004\056\267\001\002\000\062\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\047\uffa0\050\uffa0\053" +
    "\uffa0\056\266\001\002\000\004\056\265\001\002\000\052" +
    "\004\016\005\021\006\217\010\226\011\233\013\024\014" +
    "\013\016\225\021\060\046\043\051\042\052\061\062\041" +
    "\065\062\070\263\071\071\072\067\073\056\074\065\075" +
    "\017\001\002\000\030\021\060\046\043\051\042\052\061" +
    "\062\041\065\062\071\071\072\067\073\056\074\065\075" +
    "\017\001\002\000\030\021\060\046\043\051\042\052\061" +
    "\062\041\065\062\071\071\072\067\073\056\074\065\075" +
    "\017\001\002\000\004\056\257\001\002\000\052\004\uffea" +
    "\005\uffea\006\uffea\010\uffea\011\uffea\013\uffea\014\uffea\016" +
    "\uffea\021\uffea\046\uffea\051\uffea\052\uffea\062\uffea\065\uffea" +
    "\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\001" +
    "\002\000\052\004\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\016\uffe5\021\uffe5\046\uffe5\051\uffe5\052" +
    "\uffe5\062\uffe5\065\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\001\002\000\072\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\047\uff8d\050\uff8d" +
    "\052\uffcc\053\uff8d\054\uff8d\063\uff8d\065\162\075\uffcc\001" +
    "\002\000\004\075\251\001\002\000\026\022\246\023\240" +
    "\024\235\025\236\026\242\027\243\030\245\031\237\050" +
    "\077\053\241\001\002\000\030\021\uffde\046\uffde\051\uffde" +
    "\052\uffde\062\uffde\065\uffde\071\uffde\072\uffde\073\uffde\074" +
    "\uffde\075\uffde\001\002\000\030\021\uffdd\046\uffdd\051\uffdd" +
    "\052\uffdd\062\uffdd\065\uffdd\071\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\001\002\000\030\021\uffd9\046\uffd9\051\uffd9" +
    "\052\uffd9\062\uffd9\065\uffd9\071\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\075\uffd9\001\002\000\030\021\uffdf\046\uffdf\051\uffdf" +
    "\052\uffdf\062\uffdf\065\uffdf\071\uffdf\072\uffdf\073\uffdf\074" +
    "\uffdf\075\uffdf\001\002\000\030\021\060\046\043\051\042" +
    "\052\061\062\041\065\062\071\071\072\067\073\056\074" +
    "\065\075\017\001\002\000\030\021\uffdc\046\uffdc\051\uffdc" +
    "\052\uffdc\062\uffdc\065\uffdc\071\uffdc\072\uffdc\073\uffdc\074" +
    "\uffdc\075\uffdc\001\002\000\030\021\uffdb\046\uffdb\051\uffdb" +
    "\052\uffdb\062\uffdb\065\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\001\002\000\030\021\060\046\043\051\042" +
    "\052\061\062\041\065\062\071\071\072\067\073\056\074" +
    "\065\075\017\001\002\000\030\021\uffda\046\uffda\051\uffda" +
    "\052\uffda\062\uffda\065\uffda\071\uffda\072\uffda\073\uffda\074" +
    "\uffda\075\uffda\001\002\000\030\021\uffe0\046\uffe0\051\uffe0" +
    "\052\uffe0\062\uffe0\065\uffe0\071\uffe0\072\uffe0\073\uffe0\074" +
    "\uffe0\075\uffe0\001\002\000\006\050\077\056\uffe1\001\002" +
    "\000\006\050\077\056\uffe2\001\002\000\004\053\252\001" +
    "\002\000\030\021\060\046\043\051\042\052\061\062\041" +
    "\065\062\071\071\072\067\073\056\074\065\075\017\001" +
    "\002\000\006\050\077\061\254\001\002\000\030\021\060" +
    "\046\043\051\042\052\061\062\041\065\062\071\071\072" +
    "\067\073\056\074\065\075\017\001\002\000\006\050\077" +
    "\067\215\001\002\000\052\004\uffd3\005\uffd3\006\uffd3\010" +
    "\uffd3\011\uffd3\013\uffd3\014\uffd3\016\uffd3\021\uffd3\046\uffd3" +
    "\051\uffd3\052\uffd3\062\uffd3\065\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\073\uffd3\074\uffd3\075\uffd3\001\002\000\052\004\uffe3" +
    "\005\uffe3\006\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\016" +
    "\uffe3\021\uffe3\046\uffe3\051\uffe3\052\uffe3\062\uffe3\065\uffe3" +
    "\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\001" +
    "\002\000\006\050\077\067\215\001\002\000\052\004\uffd4" +
    "\005\uffd4\006\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\016" +
    "\uffd4\021\uffd4\046\uffd4\051\uffd4\052\uffd4\062\uffd4\065\uffd4" +
    "\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\001" +
    "\002\000\006\050\077\056\uffd2\001\002\000\062\002\uffeb" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\046\uffeb" +
    "\051\uffeb\052\uffeb\062\uffeb\065\uffeb\070\uffeb\071\uffeb\072" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\001\002\000\052\004\uffe9" +
    "\005\uffe9\006\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\016" +
    "\uffe9\021\uffe9\046\uffe9\051\uffe9\052\uffe9\062\uffe9\065\uffe9" +
    "\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\001" +
    "\002\000\052\004\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8" +
    "\013\uffe8\014\uffe8\016\uffe8\021\uffe8\046\uffe8\051\uffe8\052" +
    "\uffe8\062\uffe8\065\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\074\uffe8\075\uffe8\001\002\000\052\004\uffe6\005\uffe6\006" +
    "\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\016\uffe6\021\uffe6" +
    "\046\uffe6\051\uffe6\052\uffe6\062\uffe6\065\uffe6\070\uffe6\071" +
    "\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\001\002\000\052" +
    "\004\uffe7\005\uffe7\006\uffe7\010\uffe7\011\uffe7\013\uffe7\014" +
    "\uffe7\016\uffe7\021\uffe7\046\uffe7\051\uffe7\052\uffe7\062\uffe7" +
    "\065\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075" +
    "\uffe7\001\002\000\006\050\077\067\215\001\002\000\054" +
    "\004\uffd7\005\uffd7\006\uffd7\007\273\010\uffd7\011\uffd7\013" +
    "\uffd7\014\uffd7\016\uffd7\021\uffd7\046\uffd7\051\uffd7\052\uffd7" +
    "\062\uffd7\065\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7\074" +
    "\uffd7\075\uffd7\001\002\000\052\004\uffd8\005\uffd8\006\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\016\uffd8\021\uffd8\046" +
    "\uffd8\051\uffd8\052\uffd8\062\uffd8\065\uffd8\070\uffd8\071\uffd8" +
    "\072\uffd8\073\uffd8\074\uffd8\075\uffd8\001\002\000\032\021" +
    "\060\046\043\051\042\052\061\062\041\065\062\067\215" +
    "\071\071\072\067\073\056\074\065\075\017\001\002\000" +
    "\052\004\uffd6\005\uffd6\006\uffd6\010\uffd6\011\uffd6\013\uffd6" +
    "\014\uffd6\016\uffd6\021\uffd6\046\uffd6\051\uffd6\052\uffd6\062" +
    "\uffd6\065\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6" +
    "\075\uffd6\001\002\000\006\050\077\067\215\001\002\000" +
    "\054\004\uffd7\005\uffd7\006\uffd7\007\273\010\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\016\uffd7\021\uffd7\046\uffd7\051\uffd7\052" +
    "\uffd7\062\uffd7\065\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\001\002\000\052\004\uffd5\005\uffd5\006" +
    "\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\016\uffd5\021\uffd5" +
    "\046\uffd5\051\uffd5\052\uffd5\062\uffd5\065\uffd5\070\uffd5\071" +
    "\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\001\002\000\006" +
    "\052\161\067\215\001\002\000\022\002\ufff2\004\ufff2\005" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\075\ufff2\001\002" +
    "\000\006\051\204\075\210\001\002\000\006\061\uffee\066" +
    "\uffee\001\002\000\004\060\305\001\002\000\014\004\016" +
    "\005\021\013\024\014\013\075\017\001\002\000\010\052" +
    "\161\061\uffec\066\uffec\001\002\000\014\004\016\005\021" +
    "\013\024\014\013\075\017\001\002\000\006\052\161\055" +
    "\311\001\002\000\004\071\312\001\002\000\004\066\313" +
    "\001\002\000\104\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\052\uffd0\053\uffd0" +
    "\055\uffd0\056\uffd0\060\uffd0\061\uffd0\064\uffd0\066\uffd0\067" +
    "\uffd0\070\uffd0\075\uffd0\001\002\000\006\055\170\056\ufff8" +
    "\001\002\000\004\020\316\001\002\000\004\075\317\001" +
    "\002\000\024\002\uffff\004\uffff\005\uffff\012\uffff\013\uffff" +
    "\014\uffff\015\uffff\017\uffff\075\uffff\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\020" +
    "\005\024\010\014\011\007\026\011\027\017\030\010\063" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\027\007\313\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\027\007\030\031\034\032\031\033" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\027\007\030\033\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\025\067\034\046\035\056\036\054\037" +
    "\053\040\052\041\051\042\050\043\045\044\044\045\043" +
    "\046\065\055\063\056\062\057\071\063\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\124" +
    "\001\001\000\004\053\115\001\001\000\004\052\111\001" +
    "\001\000\004\051\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\134\027\017\030\010\060\135\061" +
    "\137\063\021\001\001\000\002\001\001\000\042\025\067" +
    "\034\132\035\056\036\054\037\053\040\052\041\051\042" +
    "\050\043\045\044\044\045\043\046\065\055\063\056\062" +
    "\057\071\063\047\001\001\000\020\025\067\044\131\045" +
    "\043\046\065\056\062\057\071\063\047\001\001\000\024" +
    "\025\067\043\130\044\044\045\043\046\065\055\063\056" +
    "\062\057\071\063\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\025\067\034\075\035\056" +
    "\036\054\037\053\040\052\041\051\042\050\043\045\044" +
    "\044\045\043\046\065\055\063\056\062\057\071\063\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\025\067\035\100\036\054\037\053\040\052" +
    "\041\051\042\050\043\045\044\044\045\043\046\065\055" +
    "\063\056\062\057\071\063\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\025\067\036\102\037\053\040" +
    "\052\041\051\042\050\043\045\044\044\045\043\046\065" +
    "\055\063\056\062\057\071\063\047\001\001\000\004\051" +
    "\103\001\001\000\034\025\067\037\106\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\055\063\056" +
    "\062\057\071\063\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\025\067\040\114\041\051\042\050" +
    "\043\045\044\044\045\043\046\065\055\063\056\062\057" +
    "\071\063\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\115\001\001\000\030\025\067\041\120\042" +
    "\050\043\045\044\044\045\043\046\065\055\063\056\062" +
    "\057\071\063\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\025\067\042\125\043" +
    "\045\044\044\045\043\046\065\055\063\056\062\057\071" +
    "\063\047\001\001\000\002\001\001\000\024\025\067\043" +
    "\127\044\044\045\043\046\065\055\063\056\062\057\071" +
    "\063\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\025\067\034\152\035" +
    "\056\036\054\037\053\040\052\041\051\042\050\043\045" +
    "\044\044\045\043\046\065\047\154\055\063\056\062\057" +
    "\071\063\047\001\001\000\002\001\001\000\004\062\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\025" +
    "\067\034\144\035\056\036\054\037\053\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\055\063\056" +
    "\062\057\071\063\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\025" +
    "\067\034\151\035\056\036\054\037\053\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\055\063\056" +
    "\062\057\071\063\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\025" +
    "\067\034\157\035\056\036\054\037\053\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\055\063\056" +
    "\062\057\071\063\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\025\067\034\152\035" +
    "\056\036\054\037\053\040\052\041\051\042\050\043\045" +
    "\044\044\045\043\046\065\047\163\055\063\056\062\057" +
    "\071\063\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\172\001\001\000\012\026\171\027\017\030\010" +
    "\063\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\175\027\017\030\010\063\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\205" +
    "\013\204\014\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\211\027\017\030\010\063\021\001\001\000" +
    "\002\001\001\000\004\015\215\001\001\000\012\026\277" +
    "\027\017\030\010\063\021\001\001\000\066\010\222\016" +
    "\223\017\227\020\220\021\230\022\217\023\226\025\221" +
    "\026\011\027\017\030\010\034\233\035\056\036\054\037" +
    "\053\040\052\041\051\042\050\043\045\044\044\045\043" +
    "\046\065\055\063\056\062\057\071\063\231\001\001\000" +
    "\002\001\001\000\042\025\067\034\267\035\056\036\054" +
    "\037\053\040\052\041\051\042\050\043\045\044\044\045" +
    "\043\046\065\055\063\056\062\057\071\063\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\010\222\017\263\020\220\021\230" +
    "\022\217\023\226\025\221\026\011\027\017\030\010\034" +
    "\233\035\056\036\054\037\053\040\052\041\051\042\050" +
    "\043\045\044\044\045\043\046\065\055\063\056\062\057" +
    "\071\063\231\001\001\000\042\025\067\034\261\035\056" +
    "\036\054\037\053\040\052\041\051\042\050\043\045\044" +
    "\044\045\043\046\065\055\063\056\062\057\071\063\047" +
    "\001\001\000\042\025\067\034\257\035\056\036\054\037" +
    "\053\040\052\041\051\042\050\043\045\044\044\045\043" +
    "\046\065\055\063\056\062\057\071\063\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\025\067\034\247\035\056\036\054\037" +
    "\053\040\052\041\051\042\050\043\045\044\044\045\043" +
    "\046\065\055\063\056\062\057\071\063\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\025\067\034\246" +
    "\035\056\036\054\037\053\040\052\041\051\042\050\043" +
    "\045\044\044\045\043\046\065\055\063\056\062\057\071" +
    "\063\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\025\067\034\252\035\056\036\054\037\053\040\052\041" +
    "\051\042\050\043\045\044\044\045\043\046\065\055\063" +
    "\056\062\057\071\063\047\001\001\000\002\001\001\000" +
    "\042\025\067\034\254\035\056\036\054\037\053\040\052" +
    "\041\051\042\050\043\045\044\044\045\043\046\065\055" +
    "\063\056\062\057\071\063\047\001\001\000\004\015\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\270\001\001\000\004" +
    "\024\271\001\001\000\002\001\001\000\044\015\273\025" +
    "\067\034\274\035\056\036\054\037\053\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\055\063\056" +
    "\062\057\071\063\047\001\001\000\002\001\001\000\004" +
    "\015\275\001\001\000\004\024\276\001\001\000\002\001" +
    "\001\000\004\015\300\001\001\000\002\001\001\000\004" +
    "\014\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\305\027\017\030\010\063\021\001\001\000\002" +
    "\001\001\000\012\026\307\027\017\030\010\063\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJaja$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJaja$actions {
  private final AnalizadorSintacticoJaja parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJaja$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_Imports Lista_Declaraciones 
            {
              Programa RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Programa(lImp, lDecl); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJaja$parser.done_parsing();
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_Imports ::= Lista_Imports TRAFICAR RUTA COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lImp.add(new Import(ruta, id)); RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_Imports ::= 
            {
              List<Import> RESULT =null;
		 RESULT = new ArrayList<Import>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion_Alias PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionAlias dAlias = (DeclaracionAlias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dAlias); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Variables PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables dGen = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Funcion 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionFun dGen = (DeclaracionFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Declaraciones ::= 
            {
              ListaDeclaraciones RESULT =null;
		 RESULT = new ListaDeclaraciones(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionAlias(id, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl_Variables ::= Tipo Lista_Decl_Asignaciones 
            {
              DeclaracionVariables RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Decl_Asignaciones ::= Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionVar> lista_var = new ArrayList<DeclaracionVar>();
                        lista_var.add(var); RESULT = lista_var; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		List<DeclaracionVar> lDecl = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(var); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl_Asig ::= IDEN 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl_Asig ::= IDEN ASIGNACION Expresion 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-6)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Parametros ::= 
            {
              List<DeclaracionPar> RESULT =null;
		 RESULT = new ArrayList<DeclaracionPar>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Parametros ::= Lista_Parametros2 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Parametros2 ::= Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionPar> lista_par = new ArrayList<DeclaracionPar>();
                  lista_par.add(par); RESULT = lista_par; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Parametros2 ::= Lista_Parametros2 FLECHA Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lPar.add(par); RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Parametro ::= IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Parametro ::= DIRECCION IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bloque_Anidado ::= LLAP Lista_Instrucciones LLCIERRE 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> LIns = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = LIns; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bloque_Anidado",11, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_Instrucciones ::= Instruccion 
            {
              List<Instruccion> RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
                    lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= Decl_Variables PUNTOCOMA 
            {
              Instruccion RESULT =null;
		DeclaracionVariables decl = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = decl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruccion ::= Asignacion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = as; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= Llamada_Fun PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruccion ::= Condicional 
            {
              Instruccion RESULT =null;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruccion ::= Bucle 
            {
              Instruccion RESULT =null;
		Instruccion buc = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = buc; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= Inst_Return PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion iRet = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = iRet; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= Expresion ASIGNACION Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, expr2); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Asignacion ::= Expresion OpBin Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, new OperadorBin(op, expr1, expr2)); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OpBin ::= POTASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.POT; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OpBin ::= MULASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OpBin ::= DIVASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OpBin ::= MODASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OpBin ::= SUMAASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OpBin ::= RESTAASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OpBin ::= CONJASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.CONJ; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OpBin ::= DISYASIG 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DISY; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OpBin",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Condicional ::= SI Expresion Bloque_Anidado Cond_Else 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional",15, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Cond_Else ::= 
            {
              InsCond RESULT =null;
		 RESULT = new InsCond(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Cond_Else ::= SINO Bloque_Anidado 
            {
              InsCond RESULT =null;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Cond_Else ::= SINO Expresion Bloque_Anidado Cond_Else 
            {
              InsCond RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bucle ::= MIENTRAS Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleWhile(expr, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Bucle ::= PARA IDEN ASIGNACION Expresion FLECHA Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-5)).value;
		Expresion exprIni = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion exprFin = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleFor(id, exprIni, exprFin, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Inst_Return ::= DEVUELVE Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsReturn(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return",17, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo ::= Tipo PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoPuntero(tipo); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo ::= VECTOR PAP Tipo COMA ENTERO PCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoArray(tipo, ent); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo ::= T 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // T ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = TipoEntero.instancia();  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // T ::= BIN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBinario.instancia(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // T ::= Identificador 
            {
              Tipo RESULT =null;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new TipoAlias(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // T ::= Tipo_Reg 
            {
              Tipo RESULT =null;
		Tipo t_reg = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t_reg; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_Reg ::= REGISTRO LLAP Matriz_Atributos LLCIERRE 
            {
              Tipo RESULT =null;
		ListaDeclaraciones mAtrib = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoRegistro(mAtrib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg",22, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Matriz_Atributos ::= Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Matriz_Atributos ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Matriz_Atributos2 ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                  mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Matriz_Atributos2 ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS Tipo 
            {
              DeclaracionVariables RESULT =null;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos",25, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion ::= Expresion DISY E1 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.DISY, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion ::= E1 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e1; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E1 ::= E1 CONJ E2 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.CONJ, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e2; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op2 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op2, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e3; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP2 ::= DESIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DESIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP2 ::= IGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.IGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E3 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op3 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op3, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e4; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP3 ::= MAYOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP3 ::= MENOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP3 ::= MAYORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP3 ::= MENORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= E4 OP4 E5 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op4 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op4, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion e5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e5; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP4 ::= SUMA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP4 ::= RESTA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E5 ::= E5 OP5 E6 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op5 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op5, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion e6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e6; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP5 ::= MUL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP5 ::= DIV 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP5 ::= MOD 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E6 ::= E6 POT E7 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.POT, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion e7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e7; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E7 ::= OP7 E7 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op7 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op7, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion e8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e8; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP7 ::= DIRECCION 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.DIRECCION; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP7 ::= PUNTERO 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.PUNTERO; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E8 ::= OP8 E8 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op8 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op8, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E8 ::= E9 
            {
              Expresion RESULT =null;
		Expresion e9 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e9; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP8 ::= NEG 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.NEG; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP8 ::= MENOS 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.MENOS; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E9 ::= Literal 
            {
              Expresion RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E9 ::= Llamada_Fun 
            {
              Expresion RESULT =null;
		Llamada ll = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = ll; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E9 ::= E10 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Llamada_Fun ::= Identificador PAP Lista_Expresiones PCIERRE 
            {
              Llamada RESULT =null;
		Identificador izquierda = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new Llamada(izquierda, lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Llamada_Fun ::= Identificador PAP PCIERRE 
            {
              Llamada RESULT =null;
		Identificador izquierda = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 RESULT = new Llamada(izquierda, new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		Entero e = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Literal ::= FACTO 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Literal ::= FAKE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Literal ::= NULO 
            {
              Literal RESULT =null;
		Nulo n = (Nulo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Literal ::= NUEVO Array_Literal 
            {
              Literal RESULT =null;
		LiteralArray aL = (LiteralArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = aL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Literal ::= NUEVO Struct_Literal 
            {
              Literal RESULT =null;
		LiteralStruct sL = (LiteralStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = sL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Literal ::= NUEVO Tipo 
            {
              Literal RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DirDinamica(t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Array_Literal ::= CAP CCIERRE 
            {
              LiteralArray RESULT =null;
		 RESULT = new LiteralArray(new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Array_Literal ::= CAP Lista_Expresiones CCIERRE 
            {
              LiteralArray RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralArray(lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Struct_Literal ::= LLAP Lista_Asig_Atributos LLCIERRE 
            {
              LiteralStruct RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralStruct(lAtr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Struct_Literal",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Lista_Asig_Atributos ::= IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 Map<String, Expresion> valores = new HashMap<String, Expresion>();
                     valores.put(id, expr); RESULT = valores; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",48, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Lista_Asig_Atributos ::= Lista_Asig_Atributos COMA IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lAtr.put(id, expr); RESULT = lAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",48, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E10 ::= E10 CAP Expresion CCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new AccesoArray(izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E10 ::= E10 PUNTO IDEN 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new AccesoStruct(izquierda, id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E10 ::= PAP Expresion PCIERRE 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E10 ::= Identificador 
            {
              Expresion RESULT =null;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Lista_Expresiones ::= Expresion 
            {
              List<Expresion> RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Expresion> lExpr = new ArrayList<Expresion>();
                   lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Lista_Expresiones ::= Lista_Expresiones COMA Expresion 
            {
              List<Expresion> RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Identificador ::= IDEN CUATROPUNTOS IDEN 
            {
              Identificador RESULT =null;
		String lib = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id, lib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador",49, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Identificador ::= IDEN 
            {
              Identificador RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador",49, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoJaja$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                               CUP$AnalizadorSintacticoJaja$act_num,
                               CUP$AnalizadorSintacticoJaja$parser,
                               CUP$AnalizadorSintacticoJaja$stack,
                               CUP$AnalizadorSintacticoJaja$top);
    }
}

