
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 31 20:42:02 CEST 2024
//----------------------------------------------------

package main.sintactico;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java_cup.runtime.*;
import main.lexico.AnalizadorLexicoJaja;
import main.lexico.UnidadLexica;
import main.errors.GestionErroresJaja;
import main.ast.Programa;
import main.ast.Import;
import main.ast.declaraciones.*;
import main.ast.expresiones.*;
import main.ast.instrucciones.*;
import main.ast.literales.*;
import main.ast.tipos.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 31 20:42:02 CEST 2024
  */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJaja() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\004\000\002\003" +
    "\007\000\002\003\002\000\002\004\005\000\002\004\005" +
    "\000\002\004\004\000\002\004\002\000\002\005\006\000" +
    "\002\010\004\000\002\007\003\000\002\007\005\000\002" +
    "\006\003\000\002\006\005\000\002\011\010\000\002\011" +
    "\012\000\002\012\002\000\002\012\003\000\002\013\003" +
    "\000\002\013\005\000\002\014\005\000\002\014\006\000" +
    "\002\015\005\000\002\016\003\000\002\016\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\004\000\002\020\005" +
    "\000\002\021\006\000\002\024\002\000\002\024\004\000" +
    "\002\024\006\000\002\022\005\000\002\022\011\000\002" +
    "\023\004\000\002\026\004\000\002\026\010\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\006\000\002\031\003\000" +
    "\002\031\004\000\002\031\004\000\002\031\005\000\002" +
    "\032\004\000\002\032\005\000\002\033\005\000\002\034" +
    "\005\000\002\034\003\000\002\035\005\000\002\035\003" +
    "\000\002\036\005\000\002\036\003\000\002\050\003\000" +
    "\002\050\003\000\002\037\005\000\002\037\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\040\005\000\002\040\003\000\002\052\003" +
    "\000\002\052\003\000\002\041\005\000\002\041\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\042\005\000\002\042\003\000\002\043\004\000\002\043" +
    "\003\000\002\054\003\000\002\054\003\000\002\044\004" +
    "\000\002\044\003\000\002\055\003\000\002\055\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\025\006\000\002\025\005\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\004" +
    "\000\002\056\004\000\002\056\004\000\002\057\004\000" +
    "\002\057\005\000\002\060\005\000\002\061\005\000\002" +
    "\061\007\000\002\046\006\000\002\046\005\000\002\046" +
    "\005\000\002\046\003\000\002\047\003\000\002\047\005" +
    "\000\002\062\005\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\024\002\ufffe\004\ufffe\005\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\017\ufffe\065\ufffe\001\002\000\004" +
    "\002\306\001\002\000\024\002\ufffa\004\ufffa\005\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\017\006\065\ufffa\001\002" +
    "\000\004\066\303\001\002\000\022\002\001\004\016\005" +
    "\021\012\013\013\024\014\014\015\023\065\017\001\002" +
    "\000\022\002\ufffb\004\ufffb\005\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\065\ufffb\001\002\000\006\042\161\065\033" +
    "\001\002\000\064\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\045\uffd4\046" +
    "\uffd4\050\uffd4\051\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\065\uffd4\001\002\000\004\065\207\001\002\000\004\055" +
    "\202\001\002\000\004\046\201\001\002\000\064\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7" +
    "\042\uffd7\043\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\054" +
    "\uffd7\056\uffd7\057\uffd7\060\uffd7\065\uffd7\001\002\000\074" +
    "\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\037\uff92" +
    "\040\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047" +
    "\177\050\uff92\051\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\065\uff92\001\002\000\064\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\042" +
    "\uffd8\043\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\054\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\065\uffd8\001\002\000\064\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\037\uffd6\040" +
    "\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6" +
    "\054\uffd6\056\uffd6\057\uffd6\060\uffd6\065\uffd6\001\002\000" +
    "\064\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\037" +
    "\uffd5\040\uffd5\042\uffd5\043\uffd5\045\uffd5\046\uffd5\050\uffd5" +
    "\051\uffd5\054\uffd5\056\uffd5\057\uffd5\060\uffd5\065\uffd5\001" +
    "\002\000\004\065\174\001\002\000\004\057\027\001\002" +
    "\000\004\046\026\001\002\000\022\002\ufffd\004\ufffd\005" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\065\ufffd\001\002" +
    "\000\004\065\033\001\002\000\010\045\ufff7\046\ufff7\050" +
    "\ufff7\001\002\000\006\045\170\050\171\001\002\000\004" +
    "\065\033\001\002\000\012\043\040\045\ufff5\046\ufff5\050" +
    "\ufff5\001\002\000\006\045\037\060\uffd2\001\002\000\004" +
    "\060\036\001\002\000\064\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\045" +
    "\uffd3\046\uffd3\050\uffd3\051\uffd3\054\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\065\uffd3\001\002\000\006\060\uffd1\065\uffce\001" +
    "\002\000\030\021\060\036\043\041\042\042\061\052\041" +
    "\055\062\061\071\062\067\063\056\064\065\065\017\001" +
    "\002\000\024\021\uffab\036\uffab\052\uffab\055\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffab\001\002\000\030\021" +
    "\uffb0\036\uffb0\041\uffb0\042\uffb0\052\uffb0\055\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\064\uffb0\065\uffb0\001\002\000\024\021" +
    "\uffac\036\uffac\052\uffac\055\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\065\uffac\001\002\000\060\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\037\uffad\040\uffad\043\uffad\045" +
    "\uffad\046\uffad\050\uffad\051\uffad\054\uffad\056\uffad\057\uffad" +
    "\060\uffad\001\002\000\060\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\037\uffb1\040\uffb1\043\uffb1\045\uffb1\046" +
    "\uffb1\050\uffb1\051\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\001\002\000\060\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\037\uffb3\040\uffb3\043\uffb3\045\uffb3\046\uffb3\050" +
    "\uffb3\051\uffb3\054\uffb3\056\uffb3\057\uffb3\060\uffb3\001\002" +
    "\000\012\040\076\045\ufff4\046\ufff4\050\ufff4\001\002\000" +
    "\066\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035\uff96\037" +
    "\uff96\040\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96" +
    "\051\uff96\053\uff96\054\uff96\055\162\056\uff96\057\uff96\060" +
    "\uff96\001\002\000\060\022\126\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\037\uffb8\040\uffb8\043\uffb8\045\uffb8\046\uffb8" +
    "\050\uffb8\051\uffb8\054\uffb8\056\uffb8\057\uffb8\060\uffb8\001" +
    "\002\000\056\023\122\024\123\025\121\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037" +
    "\uffbc\040\uffbc\043\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc" +
    "\054\uffbc\056\uffbc\057\uffbc\060\uffbc\001\002\000\050\026" +
    "\117\027\116\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\037\uffc2\040\uffc2\043\uffc2\045\uffc2\046\uffc2\050" +
    "\uffc2\051\uffc2\054\uffc2\056\uffc2\057\uffc2\060\uffc2\001\002" +
    "\000\044\030\uffc6\031\uffc6\032\113\033\112\034\107\035" +
    "\110\037\uffc6\040\uffc6\043\uffc6\045\uffc6\046\uffc6\050\uffc6" +
    "\051\uffc6\054\uffc6\056\uffc6\057\uffc6\060\uffc6\001\002\000" +
    "\034\030\105\031\104\037\uffc8\040\uffc8\043\uffc8\045\uffc8" +
    "\046\uffc8\050\uffc8\051\uffc8\054\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\001\002\000\060\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\035\uffa3\037\uffa3\040\uffa3\043\uffa3\045\uffa3\046\uffa3" +
    "\050\uffa3\051\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3\001" +
    "\002\000\030\037\101\040\uffca\043\uffca\045\uffca\046\uffca" +
    "\050\uffca\051\uffca\054\uffca\056\uffca\057\uffca\060\uffca\001" +
    "\002\000\020\004\016\005\021\013\024\014\014\053\137" +
    "\057\141\065\017\001\002\000\030\021\uffaf\036\uffaf\041" +
    "\uffaf\042\uffaf\052\uffaf\055\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\001\002\000\030\021\060\036\043\041" +
    "\042\042\061\052\041\055\062\061\071\062\067\063\056" +
    "\064\065\065\017\001\002\000\024\021\060\036\043\052" +
    "\041\055\062\061\071\062\067\063\056\064\065\065\017" +
    "\001\002\000\030\021\060\036\043\041\042\042\061\052" +
    "\041\055\062\061\071\062\067\063\056\064\065\065\017" +
    "\001\002\000\060\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\037\uffa2\040\uffa2\043\uffa2\045\uffa2\046\uffa2\050" +
    "\uffa2\051\uffa2\054\uffa2\056\uffa2\057\uffa2\060\uffa2\001\002" +
    "\000\064\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\037\uffa8\040\uffa8\043\uffa8\044\073\045\uffa8\046\uffa8\050" +
    "\uffa8\051\uffa8\053\074\054\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\001\002\000\060\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\037\uffa4\040\uffa4\043\uffa4\045\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4\001\002" +
    "\000\060\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\037\uffa9\040\uffa9\043\uffa9\045\uffa9\046\uffa9\050\uffa9\051" +
    "\uffa9\054\uffa9\056\uffa9\057\uffa9\060\uffa9\001\002\000\060" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5" +
    "\040\uffa5\043\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\054" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\001\002\000\060\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\040\uffaa" +
    "\043\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\054\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\001\002\000\004\065\130\001\002" +
    "\000\030\021\060\036\043\041\042\042\061\052\041\055" +
    "\062\061\071\062\067\063\056\064\065\065\017\001\002" +
    "\000\006\040\076\054\077\001\002\000\030\021\060\036" +
    "\043\041\042\042\061\052\041\055\062\061\071\062\067" +
    "\063\056\064\065\065\017\001\002\000\064\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\037\uff99\040\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\050\uff99\051\uff99\053\uff99" +
    "\054\uff99\056\uff99\057\uff99\060\uff99\001\002\000\030\037" +
    "\101\040\uffcb\043\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb" +
    "\054\uffcb\056\uffcb\057\uffcb\060\uffcb\001\002\000\030\021" +
    "\060\036\043\041\042\042\061\052\041\055\062\061\071" +
    "\062\067\063\056\064\065\065\017\001\002\000\034\030" +
    "\105\031\104\037\uffc9\040\uffc9\043\uffc9\045\uffc9\046\uffc9" +
    "\050\uffc9\051\uffc9\054\uffc9\056\uffc9\057\uffc9\060\uffc9\001" +
    "\002\000\030\021\060\036\043\041\042\042\061\052\041" +
    "\055\062\061\071\062\067\063\056\064\065\065\017\001" +
    "\002\000\030\021\uffc5\036\uffc5\041\uffc5\042\uffc5\052\uffc5" +
    "\055\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\001" +
    "\002\000\030\021\uffc4\036\uffc4\041\uffc4\042\uffc4\052\uffc4" +
    "\055\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\001" +
    "\002\000\044\030\uffc7\031\uffc7\032\113\033\112\034\107" +
    "\035\110\037\uffc7\040\uffc7\043\uffc7\045\uffc7\046\uffc7\050" +
    "\uffc7\051\uffc7\054\uffc7\056\uffc7\057\uffc7\060\uffc7\001\002" +
    "\000\030\021\uffbf\036\uffbf\041\uffbf\042\uffbf\052\uffbf\055" +
    "\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\001\002" +
    "\000\030\021\uffbe\036\uffbe\041\uffbe\042\uffbe\052\uffbe\055" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002" +
    "\000\030\021\060\036\043\041\042\042\061\052\041\055" +
    "\062\061\071\062\067\063\056\064\065\065\017\001\002" +
    "\000\030\021\uffc0\036\uffc0\041\uffc0\042\uffc0\052\uffc0\055" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\001\002" +
    "\000\030\021\uffc1\036\uffc1\041\uffc1\042\uffc1\052\uffc1\055" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\001\002" +
    "\000\050\026\117\027\116\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\043\uffc3\045\uffc3" +
    "\046\uffc3\050\uffc3\051\uffc3\054\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\001\002\000\030\021\060\036\043\041\042\042\061" +
    "\052\041\055\062\061\071\062\067\063\056\064\065\065" +
    "\017\001\002\000\030\021\uffba\036\uffba\041\uffba\042\uffba" +
    "\052\uffba\055\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\001\002\000\030\021\uffbb\036\uffbb\041\uffbb\042\uffbb" +
    "\052\uffbb\055\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065" +
    "\uffbb\001\002\000\056\023\122\024\123\025\121\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\037\uffbd\040\uffbd\043\uffbd\045\uffbd\046\uffbd\050\uffbd" +
    "\051\uffbd\054\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000" +
    "\030\021\uffb5\036\uffb5\041\uffb5\042\uffb5\052\uffb5\055\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\001\002\000" +
    "\030\021\uffb7\036\uffb7\041\uffb7\042\uffb7\052\uffb7\055\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\001\002\000" +
    "\030\021\uffb6\036\uffb6\041\uffb6\042\uffb6\052\uffb6\055\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\001\002\000" +
    "\030\021\060\036\043\041\042\042\061\052\041\055\062" +
    "\061\071\062\067\063\056\064\065\065\017\001\002\000" +
    "\060\022\126\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037" +
    "\uffb9\040\uffb9\043\uffb9\045\uffb9\046\uffb9\050\uffb9\051\uffb9" +
    "\054\uffb9\056\uffb9\057\uffb9\060\uffb9\001\002\000\030\021" +
    "\060\036\043\041\042\042\061\052\041\055\062\061\071" +
    "\062\067\063\056\064\065\065\017\001\002\000\060\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\040" +
    "\uffb4\043\uffb4\045\uffb4\046\uffb4\050\uffb4\051\uffb4\054\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\001\002\000\064\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\037\uff98\040\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\050\uff98\051\uff98\053\uff98" +
    "\054\uff98\056\uff98\057\uff98\060\uff98\001\002\000\060\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040" +
    "\uffb2\043\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\054\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\001\002\000\060\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\035\uffae\037\uffae\040\uffae\043" +
    "\uffae\045\uffae\046\uffae\050\uffae\051\uffae\054\uffae\056\uffae" +
    "\057\uffae\060\uffae\001\002\000\006\040\076\056\134\001" +
    "\002\000\064\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\037\uff97\040\uff97\043\uff97\044\uff97\045\uff97\046\uff97" +
    "\050\uff97\051\uff97\053\uff97\054\uff97\056\uff97\057\uff97\060" +
    "\uff97\001\002\000\062\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034" +
    "\uff9f\035\uff9f\037\uff9f\040\uff9f\042\161\043\uff9f\045\uff9f" +
    "\046\uff9f\050\uff9f\051\uff9f\054\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\001\002\000\060\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\037\uffa1\040\uffa1\043\uffa1\045\uffa1\046\uffa1" +
    "\050\uffa1\051\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1\001" +
    "\002\000\032\021\060\036\043\041\042\042\061\052\041" +
    "\054\154\055\062\061\071\062\067\063\056\064\065\065" +
    "\017\001\002\000\060\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\037\uffa0\040\uffa0\043\uffa0\045\uffa0\046\uffa0" +
    "\050\uffa0\051\uffa0\054\uffa0\056\uffa0\057\uffa0\060\uffa0\001" +
    "\002\000\004\065\143\001\002\000\006\045\146\060\147" +
    "\001\002\000\004\043\144\001\002\000\030\021\060\036" +
    "\043\041\042\042\061\052\041\055\062\061\071\062\067" +
    "\063\056\064\065\065\017\001\002\000\010\040\076\045" +
    "\uff9b\060\uff9b\001\002\000\004\065\150\001\002\000\060" +
    "\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c" +
    "\040\uff9c\043\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\054" +
    "\uff9c\056\uff9c\057\uff9c\060\uff9c\001\002\000\004\043\151" +
    "\001\002\000\030\021\060\036\043\041\042\042\061\052" +
    "\041\055\062\061\071\062\067\063\056\064\065\065\017" +
    "\001\002\000\010\040\076\045\uff9a\060\uff9a\001\002\000" +
    "\012\040\076\045\uff95\054\uff95\056\uff95\001\002\000\060" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\037\uff9e" +
    "\040\uff9e\043\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\054" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\001\002\000\006\045\156" +
    "\054\157\001\002\000\030\021\060\036\043\041\042\042" +
    "\061\052\041\055\062\061\071\062\067\063\056\064\065" +
    "\065\017\001\002\000\060\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\037\uff9d\040\uff9d\043\uff9d\045\uff9d\046" +
    "\uff9d\050\uff9d\051\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\001\002\000\012\040\076\045\uff94\054\uff94\056\uff94\001" +
    "\002\000\064\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\037\uffda\040\uffda\042\uffda\043\uffda\045\uffda\046\uffda" +
    "\050\uffda\051\uffda\054\uffda\056\uffda\057\uffda\060\uffda\065" +
    "\uffda\001\002\000\032\021\060\036\043\041\042\042\061" +
    "\052\041\055\062\056\163\061\071\062\067\063\056\064" +
    "\065\065\017\001\002\000\060\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\043\uffa6\045\uffa6" +
    "\046\uffa6\050\uffa6\051\uffa6\054\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\001\002\000\006\045\156\056\165\001\002\000\060" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7" +
    "\040\uffa7\043\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7\054" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\001\002\000\006\045\167" +
    "\060\uffd0\001\002\000\006\060\uffcf\065\uffcd\001\002\000" +
    "\004\065\033\001\002\000\014\004\016\005\021\013\024" +
    "\014\014\065\017\001\002\000\010\042\161\045\uffcc\060" +
    "\uffcc\001\002\000\010\045\ufff6\046\ufff6\050\ufff6\001\002" +
    "\000\004\043\175\001\002\000\014\004\016\005\021\013" +
    "\024\014\014\065\017\001\002\000\006\042\161\046\ufff9" +
    "\001\002\000\004\065\200\001\002\000\072\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\037\uff93\040\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93" +
    "\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93\065" +
    "\uff93\001\002\000\022\002\ufffc\004\ufffc\005\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\065\ufffc\001\002\000\014\004" +
    "\016\005\021\013\024\014\014\065\017\001\002\000\006" +
    "\042\161\045\204\001\002\000\004\061\205\001\002\000" +
    "\004\056\206\001\002\000\064\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9" +
    "\045\uffd9\046\uffd9\050\uffd9\051\uffd9\054\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\065\uffd9\001\002\000\004\055\210\001\002" +
    "\000\010\041\211\056\ufff1\065\215\001\002\000\004\065" +
    "\277\001\002\000\006\051\275\056\ufff0\001\002\000\004" +
    "\056\220\001\002\000\006\051\uffef\056\uffef\001\002\000" +
    "\004\050\216\001\002\000\014\004\016\005\021\013\024" +
    "\014\014\065\017\001\002\000\010\042\161\051\uffed\056" +
    "\uffed\001\002\000\006\051\221\057\222\001\002\000\014" +
    "\004\016\005\021\013\024\014\014\065\017\001\002\000" +
    "\050\004\016\005\021\006\224\010\233\011\240\013\024" +
    "\014\014\016\232\021\060\036\043\041\042\042\061\052" +
    "\041\055\062\061\071\062\067\063\056\064\065\065\017" +
    "\001\002\000\022\002\ufff3\004\ufff3\005\ufff3\012\ufff3\013" +
    "\ufff3\014\ufff3\015\ufff3\065\ufff3\001\002\000\030\021\060" +
    "\036\043\041\042\042\061\052\041\055\062\061\071\062" +
    "\067\063\056\064\065\065\017\001\002\000\052\004\uffe4" +
    "\005\uffe4\006\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016" +
    "\uffe4\021\uffe4\036\uffe4\041\uffe4\042\uffe4\052\uffe4\055\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\001" +
    "\002\000\004\046\262\001\002\000\042\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\043\uffa9" +
    "\046\261\001\002\000\004\046\260\001\002\000\052\004" +
    "\016\005\021\006\224\010\233\011\240\013\024\014\014" +
    "\016\232\021\060\036\043\041\042\042\061\052\041\055" +
    "\062\060\256\061\071\062\067\063\056\064\065\065\017" +
    "\001\002\000\030\021\060\036\043\041\042\042\061\052" +
    "\041\055\062\061\071\062\067\063\056\064\065\065\017" +
    "\001\002\000\030\021\060\036\043\041\042\042\061\052" +
    "\041\055\062\061\071\062\067\063\056\064\065\065\017" +
    "\001\002\000\004\046\252\001\002\000\052\004\uffea\005" +
    "\uffea\006\uffea\010\uffea\011\uffea\013\uffea\014\uffea\016\uffea" +
    "\021\uffea\036\uffea\041\uffea\042\uffea\052\uffea\055\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\001\002" +
    "\000\052\004\uffe5\005\uffe5\006\uffe5\010\uffe5\011\uffe5\013" +
    "\uffe5\014\uffe5\016\uffe5\021\uffe5\036\uffe5\041\uffe5\042\uffe5" +
    "\052\uffe5\055\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\001\002\000\052\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\037\uff96\040\uff96\042\uffd5\043\uff96" +
    "\044\uff96\053\uff96\055\162\065\uffd5\001\002\000\004\065" +
    "\244\001\002\000\006\040\076\043\242\001\002\000\030" +
    "\021\060\036\043\041\042\042\061\052\041\055\062\061" +
    "\071\062\067\063\056\064\065\065\017\001\002\000\006" +
    "\040\076\046\uffe2\001\002\000\004\043\245\001\002\000" +
    "\030\021\060\036\043\041\042\042\061\052\041\055\062" +
    "\061\071\062\067\063\056\064\065\065\017\001\002\000" +
    "\006\040\076\051\247\001\002\000\030\021\060\036\043" +
    "\041\042\042\061\052\041\055\062\061\071\062\067\063" +
    "\056\064\065\065\017\001\002\000\006\040\076\057\222" +
    "\001\002\000\052\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011" +
    "\uffdc\013\uffdc\014\uffdc\016\uffdc\021\uffdc\036\uffdc\041\uffdc" +
    "\042\uffdc\052\uffdc\055\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\001\002\000\052\004\uffe3\005\uffe3" +
    "\006\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\016\uffe3\021" +
    "\uffe3\036\uffe3\041\uffe3\042\uffe3\052\uffe3\055\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\001\002\000" +
    "\006\040\076\057\222\001\002\000\052\004\uffdd\005\uffdd" +
    "\006\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\016\uffdd\021" +
    "\uffdd\036\uffdd\041\uffdd\042\uffdd\052\uffdd\055\uffdd\060\uffdd" +
    "\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\001\002\000" +
    "\006\040\076\046\uffdb\001\002\000\062\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\036\uffeb\041\uffeb" +
    "\042\uffeb\052\uffeb\055\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\001\002\000\052\004\uffe9\005\uffe9" +
    "\006\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\016\uffe9\021" +
    "\uffe9\036\uffe9\041\uffe9\042\uffe9\052\uffe9\055\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\001\002\000" +
    "\052\004\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\013\uffe8" +
    "\014\uffe8\016\uffe8\021\uffe8\036\uffe8\041\uffe8\042\uffe8\052" +
    "\uffe8\055\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8" +
    "\065\uffe8\001\002\000\052\004\uffe6\005\uffe6\006\uffe6\010" +
    "\uffe6\011\uffe6\013\uffe6\014\uffe6\016\uffe6\021\uffe6\036\uffe6" +
    "\041\uffe6\042\uffe6\052\uffe6\055\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\001\002\000\052\004\uffe7" +
    "\005\uffe7\006\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\016" +
    "\uffe7\021\uffe7\036\uffe7\041\uffe7\042\uffe7\052\uffe7\055\uffe7" +
    "\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\001" +
    "\002\000\006\040\076\057\222\001\002\000\054\004\uffe0" +
    "\005\uffe0\006\uffe0\007\265\010\uffe0\011\uffe0\013\uffe0\014" +
    "\uffe0\016\uffe0\021\uffe0\036\uffe0\041\uffe0\042\uffe0\052\uffe0" +
    "\055\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\001\002\000\032\021\060\036\043\041\042\042\061" +
    "\052\041\055\062\057\222\061\071\062\067\063\056\064" +
    "\065\065\017\001\002\000\052\004\uffe1\005\uffe1\006\uffe1" +
    "\010\uffe1\011\uffe1\013\uffe1\014\uffe1\016\uffe1\021\uffe1\036" +
    "\uffe1\041\uffe1\042\uffe1\052\uffe1\055\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\001\002\000\052\004" +
    "\uffdf\005\uffdf\006\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf" +
    "\016\uffdf\021\uffdf\036\uffdf\041\uffdf\042\uffdf\052\uffdf\055" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf" +
    "\001\002\000\006\040\076\057\222\001\002\000\054\004" +
    "\uffe0\005\uffe0\006\uffe0\007\265\010\uffe0\011\uffe0\013\uffe0" +
    "\014\uffe0\016\uffe0\021\uffe0\036\uffe0\041\uffe0\042\uffe0\052" +
    "\uffe0\055\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\001\002\000\052\004\uffde\005\uffde\006\uffde\010" +
    "\uffde\011\uffde\013\uffde\014\uffde\016\uffde\021\uffde\036\uffde" +
    "\041\uffde\042\uffde\052\uffde\055\uffde\060\uffde\061\uffde\062" +
    "\uffde\063\uffde\064\uffde\065\uffde\001\002\000\006\042\161" +
    "\057\222\001\002\000\022\002\ufff2\004\ufff2\005\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\065\ufff2\001\002\000\006" +
    "\041\211\065\215\001\002\000\006\051\uffee\056\uffee\001" +
    "\002\000\004\050\300\001\002\000\014\004\016\005\021" +
    "\013\024\014\014\065\017\001\002\000\010\042\161\051" +
    "\uffec\056\uffec\001\002\000\006\045\170\046\ufff8\001\002" +
    "\000\004\020\304\001\002\000\004\065\305\001\002\000" +
    "\024\002\uffff\004\uffff\005\uffff\012\uffff\013\uffff\014\uffff" +
    "\015\uffff\017\uffff\065\uffff\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\020" +
    "\005\024\010\014\011\007\026\010\027\017\030\011\062" +
    "\021\001\001\000\002\001\001\000\006\006\027\007\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\027\007\030\031\034\032\031\033" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\027\007\030\033\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\025\067\034\046\035\056\036\054\037" +
    "\053\040\052\041\051\042\050\043\045\044\044\045\043" +
    "\046\065\054\063\055\062\056\071\062\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\123" +
    "\001\001\000\004\052\114\001\001\000\004\051\110\001" +
    "\001\000\004\050\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\134\027\017\030\011\057\135\060" +
    "\137\062\021\001\001\000\002\001\001\000\042\025\067" +
    "\034\132\035\056\036\054\037\053\040\052\041\051\042" +
    "\050\043\045\044\044\045\043\046\065\054\063\055\062" +
    "\056\071\062\047\001\001\000\020\025\067\044\131\045" +
    "\043\046\065\055\062\056\071\062\047\001\001\000\024" +
    "\025\067\043\130\044\044\045\043\046\065\054\063\055" +
    "\062\056\071\062\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\025\067" +
    "\034\074\035\056\036\054\037\053\040\052\041\051\042" +
    "\050\043\045\044\044\045\043\046\065\054\063\055\062" +
    "\056\071\062\047\001\001\000\002\001\001\000\040\025" +
    "\067\035\077\036\054\037\053\040\052\041\051\042\050" +
    "\043\045\044\044\045\043\046\065\054\063\055\062\056" +
    "\071\062\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\025\067\036\101\037\053\040\052\041\051\042" +
    "\050\043\045\044\044\045\043\046\065\054\063\055\062" +
    "\056\071\062\047\001\001\000\004\050\102\001\001\000" +
    "\034\025\067\037\105\040\052\041\051\042\050\043\045" +
    "\044\044\045\043\046\065\054\063\055\062\056\071\062" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\025\067\040\113\041\051\042\050\043\045\044\044" +
    "\045\043\046\065\054\063\055\062\056\071\062\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\114" +
    "\001\001\000\030\025\067\041\117\042\050\043\045\044" +
    "\044\045\043\046\065\054\063\055\062\056\071\062\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\025\067\042\124\043\045\044\044\045" +
    "\043\046\065\054\063\055\062\056\071\062\047\001\001" +
    "\000\002\001\001\000\024\025\067\043\126\044\044\045" +
    "\043\046\065\054\063\055\062\056\071\062\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\025\067\034\152\035" +
    "\056\036\054\037\053\040\052\041\051\042\050\043\045" +
    "\044\044\045\043\046\065\047\154\054\063\055\062\056" +
    "\071\062\047\001\001\000\002\001\001\000\004\061\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\025" +
    "\067\034\144\035\056\036\054\037\053\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\054\063\055" +
    "\062\056\071\062\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\025" +
    "\067\034\151\035\056\036\054\037\053\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\054\063\055" +
    "\062\056\071\062\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\025" +
    "\067\034\157\035\056\036\054\037\053\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\054\063\055" +
    "\062\056\071\062\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\025\067\034\152\035" +
    "\056\036\054\037\053\040\052\041\051\042\050\043\045" +
    "\044\044\045\043\046\065\047\163\054\063\055\062\056" +
    "\071\062\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\172\001\001\000\012\026\171\027\017\030\011" +
    "\062\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\026\175\027\017\030\011\062\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\202\027\017\030\011" +
    "\062\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\212\013\211\014\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\216\027\017\030\011\062\021\001" +
    "\001\000\002\001\001\000\004\015\222\001\001\000\012" +
    "\026\272\027\017\030\011\062\021\001\001\000\066\010" +
    "\227\016\230\017\234\020\225\021\235\022\224\023\233" +
    "\025\226\026\010\027\017\030\011\034\240\035\056\036" +
    "\054\037\053\040\052\041\051\042\050\043\045\044\044" +
    "\045\043\046\065\054\063\055\062\056\071\062\236\001" +
    "\001\000\002\001\001\000\042\025\067\034\262\035\056" +
    "\036\054\037\053\040\052\041\051\042\050\043\045\044" +
    "\044\045\043\046\065\054\063\055\062\056\071\062\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\010\227\017\256\020\225" +
    "\021\235\022\224\023\233\025\226\026\010\027\017\030" +
    "\011\034\240\035\056\036\054\037\053\040\052\041\051" +
    "\042\050\043\045\044\044\045\043\046\065\054\063\055" +
    "\062\056\071\062\236\001\001\000\042\025\067\034\254" +
    "\035\056\036\054\037\053\040\052\041\051\042\050\043" +
    "\045\044\044\045\043\046\065\054\063\055\062\056\071" +
    "\062\047\001\001\000\042\025\067\034\252\035\056\036" +
    "\054\037\053\040\052\041\051\042\050\043\045\044\044" +
    "\045\043\046\065\054\063\055\062\056\071\062\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\025\067\034\242\035\056\036\054\037\053\040\052" +
    "\041\051\042\050\043\045\044\044\045\043\046\065\054" +
    "\063\055\062\056\071\062\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\025\067\034\245\035\056\036" +
    "\054\037\053\040\052\041\051\042\050\043\045\044\044" +
    "\045\043\046\065\054\063\055\062\056\071\062\047\001" +
    "\001\000\002\001\001\000\042\025\067\034\247\035\056" +
    "\036\054\037\053\040\052\041\051\042\050\043\045\044" +
    "\044\045\043\046\065\054\063\055\062\056\071\062\047" +
    "\001\001\000\004\015\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\263\001\001\000\004\024\265\001\001\000\044\015" +
    "\266\025\067\034\267\035\056\036\054\037\053\040\052" +
    "\041\051\042\050\043\045\044\044\045\043\046\065\054" +
    "\063\055\062\056\071\062\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\270\001\001\000\004\024" +
    "\271\001\001\000\002\001\001\000\004\015\273\001\001" +
    "\000\002\001\001\000\004\014\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\300\027\017\030\011" +
    "\062\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJaja$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJaja$actions {
  private final AnalizadorSintacticoJaja parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJaja$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_Imports Lista_Declaraciones 
            {
              Programa RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Programa(lImp, lDecl); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJaja$parser.done_parsing();
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Lista_Imports ::= Lista_Imports TRAFICAR RUTA COMO IDEN 
            {
              List<Import> RESULT =null;
		List<Import> lImp = (List<Import>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String ruta = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lImp.add(new Import(ruta, id)); RESULT = lImp; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_Imports ::= 
            {
              List<Import> RESULT =null;
		 RESULT = new ArrayList<Import>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Imports",1, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_Declaraciones ::= Lista_Declaraciones Declaracion_Alias PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionAlias dAlias = (DeclaracionAlias)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dAlias); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Variables PUNTOCOMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables dGen = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lista_Declaraciones ::= Lista_Declaraciones Decl_Funcion 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones lDecl = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionFun dGen = (DeclaracionFun)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(dGen); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lista_Declaraciones ::= 
            {
              ListaDeclaraciones RESULT =null;
		 RESULT = new ListaDeclaraciones(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion_Alias ::= INCOGNITO IDEN ASIGNACION Tipo 
            {
              DeclaracionAlias RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionAlias(id, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Declaracion_Alias",3, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl_Variables ::= Tipo Lista_Decl_Asignaciones 
            {
              DeclaracionVariables RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Variables",6, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lista_Decl_Asignaciones ::= Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionVar> lista_var = new ArrayList<DeclaracionVar>();
                        lista_var.add(var); RESULT = lista_var; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Lista_Decl_Asignaciones ::= Lista_Decl_Asignaciones COMA Decl_Asig 
            {
              List<DeclaracionVar> RESULT =null;
		List<DeclaracionVar> lDecl = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVar var = (DeclaracionVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lDecl.add(var); RESULT = lDecl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Decl_Asignaciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Decl_Asig ::= IDEN 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Decl_Asig ::= IDEN ASIGNACION Expresion 
            {
              DeclaracionVar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVar(var, expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Asig",4, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decl_Funcion ::= DIVER IDEN PAP Lista_Parametros PCIERRE FLECHA Tipo Bloque_Anidado 
            {
              DeclaracionFun RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-6)).value;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionFun(id, lPar, bloq, t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Decl_Funcion",7, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Lista_Parametros ::= 
            {
              List<DeclaracionPar> RESULT =null;
		 RESULT = new ArrayList<DeclaracionPar>(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Lista_Parametros ::= Lista_Parametros2 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros",8, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Lista_Parametros2 ::= Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<DeclaracionPar> lista_par = new ArrayList<DeclaracionPar>();
                  lista_par.add(par); RESULT = lista_par; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Lista_Parametros2 ::= Lista_Parametros2 FLECHA Parametro 
            {
              List<DeclaracionPar> RESULT =null;
		List<DeclaracionPar> lPar = (List<DeclaracionPar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionPar par = (DeclaracionPar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lPar.add(par); RESULT = lPar; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Parametros2",9, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Parametro ::= IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Parametro ::= DIRECCION IDEN DOSPUNTOS Tipo 
            {
              DeclaracionPar RESULT =null;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionPar(var, t, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Parametro",10, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Bloque_Anidado ::= LLAP Lista_Instrucciones LLCIERRE 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> LIns = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = LIns; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bloque_Anidado",11, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_Instrucciones ::= Instruccion 
            {
              List<Instruccion> RESULT =null;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
                    lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Lista_Instrucciones ::= Lista_Instrucciones Instruccion 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lInstrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lInstrucciones.add(ins); RESULT = lInstrucciones; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Instrucciones",12, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Instruccion ::= Decl_Variables PUNTOCOMA 
            {
              Instruccion RESULT =null;
		DeclaracionVariables decl = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = decl; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instruccion ::= Asignacion PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = as; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instruccion ::= Llamada_Fun PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = llamada; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instruccion ::= Condicional 
            {
              Instruccion RESULT =null;
		Instruccion cond = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = cond; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instruccion ::= Bucle 
            {
              Instruccion RESULT =null;
		Instruccion buc = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = buc; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instruccion ::= Inst_Return PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Instruccion iRet = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = iRet; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Instruccion",13, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asignacion ::= Expresion ASIGNACION Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsAsig(expr1, expr2);  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Asignacion",14, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condicional ::= SI Expresion Bloque_Anidado Cond_Else 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, true); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Condicional",15, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Cond_Else ::= 
            {
              InsCond RESULT =null;
		 RESULT = new InsCond(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Cond_Else ::= SINO Bloque_Anidado 
            {
              InsCond RESULT =null;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Cond_Else ::= SINO Expresion Bloque_Anidado Cond_Else 
            {
              InsCond RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		InsCond cond_else = (InsCond)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsCond(expr, bloq, cond_else, false); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Cond_Else",18, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Bucle ::= MIENTRAS Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleWhile(expr, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Bucle ::= PARA IDEN ASIGNACION Expresion FLECHA Expresion Bloque_Anidado 
            {
              Instruccion RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-5)).value;
		Expresion exprIni = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion exprFin = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		List<Instruccion> bloq = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsBucleFor(id, exprIni, exprFin, bloq); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Bucle",16, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst_Return ::= DEVUELVE Expresion 
            {
              Instruccion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new InsReturn(expr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Inst_Return",17, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo ::= Tipo PUNTERO 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoPuntero(tipo); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo ::= VECTOR PAP Tipo COMA ENTERO PCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Entero ent = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoArray(tipo, ent); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo ::= T 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = tipo; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = TipoEntero.instancia();  
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T ::= BIN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBinario.instancia(); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // T ::= Identificador 
            {
              Tipo RESULT =null;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new TipoAlias(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // T ::= Tipo_Reg 
            {
              Tipo RESULT =null;
		Tipo t_reg = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t_reg; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("T",21, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_Reg ::= REGISTRO LLAP Matriz_Atributos LLCIERRE 
            {
              Tipo RESULT =null;
		ListaDeclaraciones mAtrib = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new TipoRegistro(mAtrib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Tipo_Reg",22, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matriz_Atributos ::= Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matriz_Atributos ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matriz_Atributos ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos",23, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matriz_Atributos2 ::= Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 ListaDeclaraciones mAtr = new ListaDeclaraciones();
                  mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matriz_Atributos2 ::= Matriz_Atributos2 Lista_Atributos COMA 
            {
              ListaDeclaraciones RESULT =null;
		ListaDeclaraciones mAtr = (ListaDeclaraciones)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		DeclaracionVariables lAtr = (DeclaracionVariables)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 mAtr.add(lAtr); RESULT = mAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Matriz_Atributos2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Lista_Atributos ::= Lista_Decl_Asignaciones DOSPUNTOS Tipo 
            {
              DeclaracionVariables RESULT =null;
		List<DeclaracionVar> lVar = (List<DeclaracionVar>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DeclaracionVariables(tipo, lVar); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Atributos",25, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= Expresion DISY E1 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.DISY, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= E1 
            {
              Expresion RESULT =null;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e1; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Expresion",26, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E1 CONJ E2 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.CONJ, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e2; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E2 OP2 E3 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op2 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op2, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion e3 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e3; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP2 ::= DESIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DESIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP2 ::= IGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.IGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP2",38, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E3 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op3 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op3, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion e4 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e4; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP3 ::= MAYOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP3 ::= MENOR 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENOR; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP3 ::= MAYORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MAYORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP3 ::= MENORIGUAL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MENORIGUAL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP3",39, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E4 ::= E4 OP4 E5 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op4 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op4, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion e5 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e5; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP4 ::= SUMA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.SUMA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP4 ::= RESTA 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.RESTA; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP4",40, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E5 ::= E5 OP5 E6 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		OperadorBin.Operadores op5 = (OperadorBin.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(op5, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion e6 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e6; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP5 ::= MUL 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MUL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP5 ::= DIV 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.DIV; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP5 ::= MOD 
            {
              OperadorBin.Operadores RESULT =null;
		 RESULT = OperadorBin.Operadores.MOD; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP5",41, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E6 POT E7 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorBin(OperadorBin.Operadores.POT, izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion e7 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e7; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= OP7 E7 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op7 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op7, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion e8 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e8; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP7 ::= DIRECCION 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.DIRECCION; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP7 ::= PUNTERO 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.PUNTERO; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP7",42, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E8 ::= OP8 E8 
            {
              Expresion RESULT =null;
		OperadorUn.Operadores op8 = (OperadorUn.Operadores)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new OperadorUn(op8, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E8 ::= E9 
            {
              Expresion RESULT =null;
		Expresion e9 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e9; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP8 ::= NEG 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.NEG; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP8 ::= MENOS 
            {
              OperadorUn.Operadores RESULT =null;
		 RESULT = OperadorUn.Operadores.MENOS; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("OP8",43, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E9 ::= Literal 
            {
              Expresion RESULT =null;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E9 ::= Llamada_Fun 
            {
              Expresion RESULT =null;
		Llamada ll = (Llamada)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = ll; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E9 ::= E10 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Llamada_Fun ::= Identificador PAP Lista_Expresiones PCIERRE 
            {
              Llamada RESULT =null;
		Identificador izquierda = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new Llamada(izquierda, lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Llamada_Fun ::= Identificador PAP PCIERRE 
            {
              Llamada RESULT =null;
		Identificador izquierda = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		 RESULT = new Llamada(izquierda, new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Llamada_Fun",19, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Literal ::= ENTERO 
            {
              Literal RESULT =null;
		Entero e = (Entero)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Literal ::= FACTO 
            {
              Literal RESULT =null;
		True t = (True)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = t; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Literal ::= FAKE 
            {
              Literal RESULT =null;
		False f = (False)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = f; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Literal ::= NULO 
            {
              Literal RESULT =null;
		Nulo n = (Nulo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = n; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Literal ::= NUEVO Array_Literal 
            {
              Literal RESULT =null;
		LiteralArray aL = (LiteralArray)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = aL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Literal ::= NUEVO Struct_Literal 
            {
              Literal RESULT =null;
		LiteralStruct sL = (LiteralStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = sL; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Literal ::= NUEVO Tipo 
            {
              Literal RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new DirDinamica(t); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Literal",44, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Array_Literal ::= CAP CCIERRE 
            {
              LiteralArray RESULT =null;
		 RESULT = new LiteralArray(new ArrayList<Expresion>()); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Array_Literal ::= CAP Lista_Expresiones CCIERRE 
            {
              LiteralArray RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralArray(lExpr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Array_Literal",45, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Struct_Literal ::= LLAP Lista_Asig_Atributos LLCIERRE 
            {
              LiteralStruct RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new LiteralStruct(lAtr); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Struct_Literal",46, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Lista_Asig_Atributos ::= IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 Map<String, Expresion> valores = new HashMap<String, Expresion>();
                     valores.put(id, expr); RESULT = valores; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Lista_Asig_Atributos ::= Lista_Asig_Atributos COMA IDEN ASIGNACION Expresion 
            {
              Map<String,Expresion> RESULT =null;
		Map<String,Expresion> lAtr = (Map<String,Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lAtr.put(id, expr); RESULT = lAtr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Asig_Atributos",47, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E10 ::= E10 CAP Expresion CCIERRE 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-3)).value;
		Expresion derecha = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = new AccesoArray(izquierda, derecha); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E10 ::= E10 PUNTO IDEN 
            {
              Expresion RESULT =null;
		Expresion izquierda = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new AccesoStruct(izquierda, id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E10 ::= PAP Expresion PCIERRE 
            {
              Expresion RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		 RESULT = expr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E10 ::= Identificador 
            {
              Expresion RESULT =null;
		Identificador id = (Identificador)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("E10",36, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Lista_Expresiones ::= Expresion 
            {
              List<Expresion> RESULT =null;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 List<Expresion> lExpr = new ArrayList<Expresion>();
                   lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Lista_Expresiones ::= Lista_Expresiones COMA Expresion 
            {
              List<Expresion> RESULT =null;
		List<Expresion> lExpr = (List<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		Expresion expr = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 lExpr.add(expr); RESULT = lExpr; 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Lista_Expresiones",37, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Identificador ::= IDEN CUATROPUNTOS IDEN 
            {
              Identificador RESULT =null;
		String lib = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id, lib); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador",48, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Identificador ::= IDEN 
            {
              Identificador RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.peek()).value;
		 RESULT = new Identificador(id); 
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("Identificador",48, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoJaja$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                               CUP$AnalizadorSintacticoJaja$act_num,
                               CUP$AnalizadorSintacticoJaja$parser,
                               CUP$AnalizadorSintacticoJaja$stack,
                               CUP$AnalizadorSintacticoJaja$top);
    }
}

