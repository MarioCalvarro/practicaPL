
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Feb 22 16:43:22 CET 2024
//----------------------------------------------------

package main.sintactico;

import java_cup.runtime.*;
import main.lexico.AnalizadorLexicoJaja;
import main.lexico.UnidadLexica;
import main.errors.GestionErroresJaja;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Feb 22 16:43:22 CET 2024
  */
public class AnalizadorSintacticoJaja extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoJaja() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoJaja(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\002\000\002\002\002\000\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\003\000\004\002\001\001\002\000\004\002\005\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\003\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoJaja$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoJaja$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoJaja$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoJaja$actions {
  private final AnalizadorSintacticoJaja parser;

  /** Constructor */
  CUP$AnalizadorSintacticoJaja$actions(AnalizadorSintacticoJaja parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoJaja$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoJaja$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoJaja$stack.elementAt(CUP$AnalizadorSintacticoJaja$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoJaja$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoJaja$parser.done_parsing();
          return CUP$AnalizadorSintacticoJaja$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoJaja$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoJaja$do_action(
    int                        CUP$AnalizadorSintacticoJaja$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoJaja$parser,
    java.util.Stack            CUP$AnalizadorSintacticoJaja$stack,
    int                        CUP$AnalizadorSintacticoJaja$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoJaja$do_action_part00000000(
                               CUP$AnalizadorSintacticoJaja$act_num,
                               CUP$AnalizadorSintacticoJaja$parser,
                               CUP$AnalizadorSintacticoJaja$stack,
                               CUP$AnalizadorSintacticoJaja$top);
    }
}

