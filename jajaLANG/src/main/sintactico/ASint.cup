package main.sintactico;

import java_cup.runtime.*;
import main.lexico.AnalizadorLexicoJaja;
import main.lexico.UnidadLexica;
import main.errors.GestionErroresJaja;

scan with {: return getScanner().next_token(); :};
parser code {: 
    private GestionErroresJaja errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica) unidadLexica);
    }
:};

init with {: 
    errores = new GestionErroresJaja();
    AnalizadorLexicoJaja alex = (AnalizadorLexicoJaja) getScanner();
    alex.fijaGestionErrores(errores);
:};


terminal    //Palabras clave
            ENT, BIN, FACTO, FAKE, SI, SINO, MIENTRAS, PARA, DIVER, REGISTRO,
            NULO, INCOGNITO, DEVUELVE, TRAFICAR, COMO,

            //Variables
            ID, ENTERO,

            //Operadores Aritmeticos
            POT, MUL, DIV, MOD, SUMA, RESTA,

            //Relacionales
            IGUAL, DESIGUAL, MAYOR, MENOR, MAYORIGUAL, MENORIGUAL,

            //Logicos
            NEG, CONJ, DISY,

            //Otros
            DIRECCION, PUNTERO, ASIGNACION, PUNTO, COMA, PUNTOCOMA, DOSPUNTOS, FLECHA,

            //Agrupaciones
            CAP, CCIERRE, PAP, PCIERRE, LLAP, LLCIERRE;






/////////////////////
///Inicio programa///
/////////////////////
Programa ::= Lista_Instrucciones: lInstrucciones
    {: RESULT = new Programa(lInstrucciones); :};

Lista_Instrucciones ::= Instruccion: ins PUNTOCOMA
    {: List<Instruccion> lInstrucciones = new ArrayList<Instruccion>();
    lInstrucciones.add(ins);
    RESULT = lInstrucciones; :};

                    | Lista_Instrucciones: lInstrucciones Instruccion: ins PUNTOCOMA
    {: lInstrucciones.add(ins);
    RESULT = lInstrucciones; :};

Instruccion ::= Declaracion: decl
    {: RESULT = decl; :}
            |   Asignacion: as
    {: RESULT = as; :}
            |   Decl_asig: dAs
    {: RESULT = dAs; :}
            |   Llamada_fun: llamada
    {: RESULT = llamada; :}
            |   Alias: aka          //Also known as
    {: RESULT = aka; :}
            |   Condicional: cond
    {: RESULT = cond; :}
            |   Bucle: buc
    {: RESULT = buc; :}
            |   Inst_return: iRet
    {: RESULT = iRet; :}
            ;



/////////////////////
///     TIPOS     ///
/////////////////////

Tipo ::= Tipo:tipo PUNTERO
    {: RESULT = new TipoPuntero(tipo); :}

Tipo ::= T:tipo
    {: RESULT = tipo; :}

T ::= ENT 
    {: RESULT = new TipoEntero();  :}

    | BIN 
    {: RESULT = new TipoBinario(); :}

    | ID: id             //ID se referirá a los identificadores definidos por el incognito
    {: RESULT = new TipoAlias(id.getLexema(), id.getFila(), id.getColumna()); :}

    | Tipo_Reg: t_reg
    {: RESULT = t_reg; :}
    ;


Tipo_Reg ::= REGISTRO CAP Matriz_Atributos: mAtrib CCIERRE
    {: RESULT = new TipoRegistro(mAtrib); :}


//Una sola lista de atributos o varias con la coma de la última opcional
Matriz_Atributos ::= Lista_Atributos: lAtr
    {: List<List<Atributo>> mAtr = new ArrayList<List<Atributo>>();
    mAtr.add(lAtr); RESULT = mAtr; :}

                | Lista_Atributos: lAtr COMA
    {: List<List<Atributo>> mAtr = new ArrayList<List<Atributo>>();
    mAtr.add(lAtr); RESULT = mAtr; :}

                | Matriz_Atributos': mAtr Lista_Atributos: lAtr
    {: mAtr.add(lAtr); RESULT = mAtr; :}

                | Matriz_Atributos': mAtr Lista_Atributos: lAtr COMA
    {: mAtr.add(lAtr); RESULT = mAtr; :}


Matriz_Atributos' ::= Lista_Atributos: lAtr COMA
    {: List<List<Atributo>> mAtr = new ArrayList<List<Atributo>>();
    mAtr.add(lAtr); RESULT = mAtr; :}

                | Matriz_Atributos': mAtr Lista_Atributos: lAtr COMA
    {: mAtr.add(lAtr); RESULT = mAtr; :}


Lista_Atributos ::= Lista_Variables: lVar DOSPUNTOS Tipo: tipo
    {: RESULT = ast.listaAtributos(lVar, tipo); :}



Lista_Variables ::= Variable: var
    {: List<Variable> lVar = new ArrayList<Variable>();
    lVar.add(var); RESULT = lVar; :}

                | Lista_Variables': lVar Variable: var
    {: lVar.add(var); RESULT = lVar; :}

Lista_Variables' ::= Variable: var COMA
    {: List<Variable> lVar = new ArrayList<Variable>();
    lVar.add(var); RESULT = lVar; :}

                | Lista_Variables': lVar Variable: var COMA
    {: lVar.add(var); RESULT = lVar; :}



Variable ::= ID: id Lista_Corchetes: lCor
    {: RESULT = new Variable(id.lexema(), lCor)); :};


Lista_Corchetes ::= //Sin corchetes
    {: Result = new ArrayList<int>() :}

                | CAP ENTERO: num CCIERRE
    {: lCor = new ArrayList<int>() 
    lCor.add(num.lexema()); RESULT = lCor :}

                | Lista_Corchetes: lCor CAP ENTERO: num CCIERRE
    {: lCor.add(num.lexema()); RESULT = lCor :}




/////////////////////
////INSTRUCCIONES////
/////////////////////

///Declaraciones///
Declaracion ::= Dec_variables: dec_var
    {: RESULT = dec_var :}

            | Dec_funcion: dec_fun;
    {: RESULT = dec_fun :}
            ;


Dec_variables ::= Tipo: tipo Lista_Variables: lVar
    {: RESULT = ast.listaVariables(tipo, lVar); :}

