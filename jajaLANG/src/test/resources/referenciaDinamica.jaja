incognito dato_t = registro {
    atr1: ent @,
    atr2: vector(ent @, 2),
};

diver f(&a: ent) -> ent {
	a += leerEnt();
    devuelve a;
}

diver tronco() {
    ent @ punt = nuevo ent;
    @punt = leerEnt();
    ent a = @punt;
    ent b = f(a);
    escribirEnt(b); //Tiene que dar 10
    liberar(punt);


    //Ejemplo complicado de punteros
    //registros y arrays con mem. dinamica
    dato_t @ d = nuevo dato_t;
    @d = nuevo {
        atr1 = nuevo ent,
        atr2 = nuevo [nuevo ent, nuevo ent]
    };
    @(@d).atr1 = leerEnt();
    @(@d).atr2[0] = leerEnt();
    @(@d).atr2[1] = leerEnt();
}
