incognito dato_t = registro {
    atr1: ent,
    //atr2: vector(ent, 2),
};

diver f(r: dato_t) -> dato_t {
   devuelve r;
}


//diver f(&r: dato_t)  {
//	(@r).ent = (@r).ent + 1;
//}

diver tronco() {
    ent a = 0;
    vector(ent, 2) vec = nuevo [1,2];
    dato_t reg1 = nuevo {atr1 = a};

    dato_t reg = nuevo {atr1 = reg1.atr1};

   // dato_t @ puntero = & reg1;

    //dato_t reg2 = f(reg1);
    //f(&reg1);
    //f(puntreg);

    escribirEnt(reg1.atr1); //Tiene que dar 1
    //escribirEnt((@puntreg).a); //Tiene que dar 1
}
